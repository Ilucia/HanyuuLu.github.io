{"title":"spring&mybatis/Spring基础","date":"2022-04-27T15:24:01.747Z","link":"spring&mybatis/Spring基础","updated":"2022-04-27T15:24:01.747Z","content":"<h1 id=\"spring基础\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#spring基础\"></a> Spring基础<a href=\"spring&mybatis/Spring基础#spring基础\"></a></h1>\n<h2 id=\"core模块\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#core模块\"></a> Core模块<a href=\"spring&mybatis/Spring基础#core模块\"></a></h2>\n<h3 id=\"注解方式配置\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#注解方式配置\"></a> 注解方式配置<a href=\"spring&mybatis/Spring基础#注解方式配置\"></a></h3>\n<p>⾃从jdk5有了注解这个新特性，我们可以看到Struts2框架、Hibernate框架都⽀持使⽤注解来配置信<br>\n息…<br>\n通过注解来配置信息就是为了简化IOC容器的配置，注解可以把对象添加到IOC容器中、处理对象依赖<br>\n关系，我们来看看怎么⽤吧：<br>\n使⽤注解步骤：<br>\n1）先引⼊context名称空间<br>\nxmlns:context=&quot;<a href=\"http://www.springframework.org/schema/context\" target=\"_blank\" rel=\"noopener\">http://www.springframework.org/schema/context</a></p>\n<p>2）开启注解扫描器<br>\n&lt;context:component-scan base-package=&quot;&quot;&gt;&lt;/context:component-scan&gt;<br>\n第⼆种⽅法:也可以通过⾃定义扫描类以@CompoentScan修饰来扫描IOC容器的bean对象。<br>\n如下代码:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//表明该类是配置类</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">//启动扫描器，扫描bb包下的</span></span><br><span class=\"line\"><span class=\"comment\">//也可以指定多个基础包</span></span><br><span class=\"line\"><span class=\"comment\">//也可以指定类型</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"bb\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnnotationScan</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>在使⽤<code>@ComponentScan()</code>这个注解的时候，在测试类上需要<code>@ContextConfiguration</code>这个注解来加载配置类</li>\n<li><code>@ContextConfiguration</code>这个注解⼜在Spring的test包下</li>\n<li>创建对象以及处理对象依赖关系，相关的注解：\n<ul>\n<li><code>@ComponentScan</code>扫描器</li>\n<li><code>@Configuration</code>表明该类是配置类</li>\n<li><code>@Component</code> 指定把⼀个对象加⼊IOC容器—&gt;@Name也可以实现相同的效果【⼀般少⽤】</li>\n<li><code>@Repository</code> 作⽤同@Component； 在持久层使⽤</li>\n<li><code>@Service</code> 作⽤同@Component； 在业务逻辑层使⽤</li>\n<li><code>@Controller</code> 作⽤同@Component； 在控制层使⽤</li>\n<li><code>@Resource</code> 依赖关系\n<ul>\n<li>如果<code>@Resource</code>不指定值，那么就根据类型来找，相同的类型在IOC容器中不能有两个<br>\n如果<code>@Resource</code>指定了值，那么就根据名字来找</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"userdao\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#userdao\"></a> UserDao<a href=\"spring&mybatis/Spring基础#userdao\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package aa;</span><br><span class=\"line\">import org.springframework.stereotype.Repository;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* Created by ozc on 2017/5/10.</span><br><span class=\"line\">*/</span><br><span class=\"line\">//把对象添加到容器中,⾸字⺟会⼩写</span><br><span class=\"line\">@Repository</span><br><span class=\"line\">public class UserDao &#123;</span><br><span class=\"line\">public void save() &#123;</span><br><span class=\"line\">System.out.println(&quot;DB:保存⽤户&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"userservice\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#userservice\"></a> userService<a href=\"spring&mybatis/Spring基础#userservice\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import javax.annotation.Resource;</span><br><span class=\"line\">//把UserService对象添加到IOC容器中,⾸字⺟会⼩写</span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class UserService &#123;</span><br><span class=\"line\">//如果@Resource不指定值，那么就根据类型来找---&gt;UserDao....当然了，IOC容器不能有两个</span><br><span class=\"line\">UserDao类型的对象</span><br><span class=\"line\">//@Resource</span><br><span class=\"line\">//如果指定了值，那么Spring就在IOC容器找有没有id为userDao的对象。</span><br><span class=\"line\">@Resource(name = &quot;userDao&quot;)</span><br><span class=\"line\">private UserDao userDao;</span><br><span class=\"line\">public void save() &#123;</span><br><span class=\"line\">userDao.save();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"useraction\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#useraction\"></a> userAction<a href=\"spring&mybatis/Spring基础#useraction\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/</span><br><span class=\"line\">//把对象添加到IOC容器中,⾸字⺟会⼩写</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class UserAction &#123;</span><br><span class=\"line\">@Resource(name = &quot;userService&quot;)</span><br><span class=\"line\">private UserService userService;</span><br><span class=\"line\">public String execute() &#123;</span><br><span class=\"line\">userService.save();</span><br><span class=\"line\">return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#测试\"></a> 测试<a href=\"spring&mybatis/Spring基础#测试\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class App &#123;</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">// 创建容器对象</span><br><span class=\"line\">ApplicationContext ac = new</span><br><span class=\"line\">ClassPathXmlApplicationContext(&quot;aa/applicationContext.xml&quot;);</span><br><span class=\"line\">UserAction userAction = (UserAction) ac.getBean(&quot;userAction&quot;);</span><br><span class=\"line\">userAction.execute();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"bean创建细节\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#bean创建细节\"></a> Bean创建细节<a href=\"spring&mybatis/Spring基础#bean创建细节\"></a></h4>\n<ul>\n<li>参数指定</li>\n</ul>\n<h5 id=\"单例多例\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#单例多例\"></a> 单例/多例<a href=\"spring&mybatis/Spring基础#单例多例\"></a></h5>\n<ul>\n<li><code>scope=&quot;singleton&quot;</code> 默认值， 即 默认是单例 【service/dao/⼯具类】</li>\n</ul>\n<ul>\n<li><code>scope=&quot;prototype&quot;</code> 多例\n<ul>\n<li>Action对象</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"创建时间点\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#创建时间点\"></a> 创建时间点<a href=\"spring&mybatis/Spring基础#创建时间点\"></a></h5>\n<ul>\n<li><code>scope=&quot;prototype&quot;</code> 在⽤到对象的时候，才创建对象</li>\n</ul>\n<ul>\n<li><code>scope=&quot;singleton&quot;</code> 在启动(容器初始化之前)， 就已经创建了bean，且整个应⽤只有⼀<br>\n个</li>\n</ul>\n<h5 id=\"是否延迟创建\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#是否延迟创建\"></a> 是否延迟创建<a href=\"spring&mybatis/Spring基础#是否延迟创建\"></a></h5>\n<ul>\n<li><code>lazy-init=&quot;false&quot;</code> 默认为false, 不延迟创建，即在启动时候就创建对象</li>\n<li><code>lazy-init=&quot;true&quot;</code> 延迟初始化, 在⽤到对象的时候才创建对象\n<ul>\n<li>只对单例有效</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"创建对象之后的初始化销毁\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#创建对象之后的初始化销毁\"></a> 创建对象之后的初始化/销毁<a href=\"spring&mybatis/Spring基础#创建对象之后的初始化销毁\"></a></h5>\n<ul>\n<li><code>init-method=&quot;init_user&quot;</code> 对应对象的init_user⽅法，在对象创建之后执⾏</li>\n</ul>\n<ul>\n<li><code>destroy-method=&quot;destroy_user&quot;</code> 在调⽤容器对象的destroy⽅法时候执⾏，(容器⽤<br>\n实现类)</li>\n</ul>\n<h2 id=\"依赖注入\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#依赖注入\"></a> 依赖注入<a href=\"spring&mybatis/Spring基础#依赖注入\"></a></h2>\n<p>Spring提供了好⼏种的⽅式来给属性赋值</p>\n<ol>\n<li>通过构造函数</li>\n<li>通过set⽅法给属性注⼊值</li>\n<li>p名称空间</li>\n<li>⾃动装配(了解)</li>\n<li>注解</li>\n</ol>\n<h3 id=\"使用注解实现自动装配\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#使用注解实现自动装配\"></a> 使用注解实现自动装配<a href=\"spring&mybatis/Spring基础#使用注解实现自动装配\"></a></h3>\n<ul>\n<li>@Autowired注解来实现⾃动装配\n<ul>\n<li>可以在构造器上修饰，也可以在setter⽅法上修饰</li>\n<li>来⾃java的@Inject的和@AutoWired有相同的功能</li>\n<li>如果没有匹配到bean，为了避免异常的出现，我们可以使⽤required属性上设置为false</li>\n</ul>\n</li>\n</ul>\n<p>UserService中使⽤userDao变量来维护与Dao层之间的依赖关系，UserAction中使⽤userService变量<br>\n来维护与Service层之间的依赖关系。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"DB:保存⽤户\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">userDao.save();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAction</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">userService.save();</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"applicationcontextxml配置文件\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#applicationcontextxml配置文件\"></a> applicationContext.xml配置⽂件<a href=\"spring&mybatis/Spring基础#applicationcontextxml配置文件\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--创建userDao对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"UserDao\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--创建userService对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"UserService\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--要想在userService层中能够引⽤到userDao，就必须先创建userDao对象--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"UserDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"userDao\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<h2 id=\"aop\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#aop\"></a> AOP<a href=\"spring&mybatis/Spring基础#aop\"></a></h2>\n<h3 id=\"注解方式实现aop编程\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#注解方式实现aop编程\"></a> 注解⽅式实现AOP编程<a href=\"spring&mybatis/Spring基础#注解方式实现aop编程\"></a></h3>\n<p>我们之前⼿动的实现AOP编程是需要⾃⼰来编写代理⼯⼚的，现在有了Spring，就不需要我们⾃⼰写代<br>\n理⼯⼚了。Spring内部会帮我们创建代理⼯⼚。也就是说，不⽤我们⾃⼰写代理对象了</p>\n<p>因此，我们只要关⼼<strong>切⾯类、切⼊点、编写切⼊表达式指定拦截什么⽅法</strong>就可以了</p>\n<h4 id=\"在配置文件中开启aop注解方式\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#在配置文件中开启aop注解方式\"></a> 在配置⽂件中开启AOP注解⽅式<a href=\"spring&mybatis/Spring基础#在配置文件中开启aop注解方式\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                           http://www.springframework.org/schema/aop/spring-aop.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"aa\"</span>/&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 开启aop注解⽅式 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<h4 id=\"类代码\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#类代码\"></a> 类代码<a href=\"spring&mybatis/Spring基础#类代码\"></a></h4>\n<h5 id=\"切面类\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#切面类\"></a> 切⾯类<a href=\"spring&mybatis/Spring基础#切面类\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span><span class=\"comment\">//指定为切⾯类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AOP</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//⾥⾯的值为切⼊点表达式</span></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* aa.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"开始事务\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"execution(* aa.*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"关闭事务\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"userdao-2\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#userdao-2\"></a> UserDao<a href=\"spring&mybatis/Spring基础#userdao-2\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUser</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"DB:保存⽤户\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"iuser接口\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#iuser接口\"></a> IUser接口<a href=\"spring&mybatis/Spring基础#iuser接口\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IUser</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"测试-2\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#测试-2\"></a> 测试<a href=\"spring&mybatis/Spring基础#测试-2\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ac = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"aa/applicationContext.xml\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//这⾥得到的是代理对象....</span></span><br><span class=\"line\">        IUser iUser = (IUser) ac.getBean(<span class=\"string\">\"userDao\"</span>);</span><br><span class=\"line\">        System.out.println(iUser.getClass());</span><br><span class=\"line\">        iUser.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"aop注解api\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#aop注解api\"></a> AOP注解API<a href=\"spring&mybatis/Spring基础#aop注解api\"></a></h4>\n<ul>\n<li><strong>@Aspect</strong>\n<ul>\n<li>指定⼀个类为切⾯类</li>\n</ul>\n</li>\n<li><em><em>@Pointcut(&quot;execution(</em> cn.itcast.e_aop_anno…(…))&quot;)</em>*\n<ul>\n<li>指定切⼊点表达式</li>\n</ul>\n</li>\n<li><strong>@Before(“pointCut_()”)</strong>\n<ul>\n<li>前置通知，⽬标⽅法之前执⾏</li>\n</ul>\n</li>\n<li><strong>@After(“pointCut_()”)</strong>\n<ul>\n<li>后置通知，⽬标⽅法之后执⾏（始终执⾏）</li>\n</ul>\n</li>\n<li><strong>@AfterReturning(“pointCut_()”)</strong>\n<ul>\n<li>返回后通知，执⾏⽅法结束前执⾏(异常不执⾏)</li>\n</ul>\n</li>\n<li><strong>@AfterThrowing(“pointCut_()”)</strong>\n<ul>\n<li>异常通知，出现异常时候执⾏</li>\n</ul>\n</li>\n<li><strong>@Around(“pointCut_()”)</strong>\n<ul>\n<li>环绕通知，环绕⽬标⽅法执⾏</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定切⼊点表达式，拦截哪个类的哪些⽅法</span></span><br><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* aa.*.*(..))\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//Point签名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointCut_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 前置通知 : 在执⾏⽬标⽅法之前执⾏</span></span><br><span class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"pointCut_()\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"开始事务/异常\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 后置/最终通知：在执⾏⽬标⽅法之后执⾏，⽆论是否出现异常最终都会执⾏</span></span><br><span class=\"line\"><span class=\"meta\">@After</span>(<span class=\"string\">\"pointCut_()\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"提交事务/关闭\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回后通知： 在调⽤⽬标⽅法结束后执⾏ 【出现异常不执⾏】</span></span><br><span class=\"line\"><span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"pointCut_()\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturning</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"afterReturning()\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 异常通知： 当⽬标⽅法执⾏异常时候执⾏此关注点代码</span></span><br><span class=\"line\"><span class=\"meta\">@AfterThrowing</span>(<span class=\"string\">\"pointCut_()\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterThrowing</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"afterThrowing()\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 环绕通知：环绕⽬标⽅式执⾏</span></span><br><span class=\"line\"><span class=\"meta\">@Around</span>(<span class=\"string\">\"pointCut_()\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">around</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable</span>&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"环绕前....\"</span>);</span><br><span class=\"line\">  pjp.proceed(); <span class=\"comment\">// 执⾏⽬标⽅法</span></span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"环绕后....\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"pointcut\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#pointcut\"></a> @Pointcut<a href=\"spring&mybatis/Spring基础#pointcut\"></a></h4>\n<p>在Spring 2.0中，Pointcut的定义包括两个部分：<strong>Pointcut表示式</strong>(expression)和<strong>Pointcut签名</strong>(signature)</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Pointcut表示式</span></span><br><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.savage.aop.MessageSender.*(..))\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//Point签名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></div></figure>\n<p>然后要使用所定义的Pointcut时，可以指定Pointcut签名</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"og()\"</span>)</span><br></pre></td></tr></table></div></figure>\n<p>这种使用方式等同于以下方式，直接定义execution表达式使用</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* com.savage.aop.MessageSender.*(..))\"</span>)</span><br></pre></td></tr></table></div></figure>\n<p>Pointcut定义时，还<strong>可以使用&amp;&amp;、||、! 这三个运算</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.savage.aop.MessageSender.*(..))\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logSender</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.savage.aop.MessageReceiver.*(..))\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logReceiver</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"logSender() || logReceiver()\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logMessage</span><span class=\"params\">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这个例子中，<strong>logMessage()将匹配任何MessageSender和MessageReceiver中的任何方法</strong></p>\n<p>还可以<strong>将公用的Pointcut放到一个类中，以供整个应用程序使用</strong>，如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.savage.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pointcuts</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* *Message(..))\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logMessage</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* *Attachment(..))\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logAttachment</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* *Service.*(..))\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">auth</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>在使用上面定义Pointcut时，指定完整的类名加上Pointcut签名就可以了，如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.savage.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogBeforeAdvice</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"com.sagage.aop.Pointcuts.logMessage()\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"Logging before \"</span> + joinPoint.getSignature().getName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"切入点表达式\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#切入点表达式\"></a> 切入点表达式<a href=\"spring&mybatis/Spring基础#切入点表达式\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>\n<p><strong>?</strong> 号代表0或1，可以不写</p>\n</li>\n<li>\n<p>*** **号代表任意类型，0或多</p>\n</li>\n<li>\n<p>⽅法参数为 <strong>…</strong> 表示为可变参数</p>\n</li>\n<li>\n<p><strong>modifiers-pattern?</strong>【修饰的类型，可以不写】</p>\n</li>\n<li>\n<p><strong>ret-type-pattern</strong>【⽅法返回值类型，必写】</p>\n</li>\n<li>\n<p><strong>declaring-type-pattern?</strong>【⽅法声明的类型，可以不写】</p>\n</li>\n<li>\n<p><strong>name-pattern(param-pattern)</strong>【要匹配的名称，括号⾥⾯是⽅法的参数】</p>\n</li>\n<li>\n<p><strong>throws-pattern?</strong>【⽅法抛出的异常类型，可以不写】</p>\n</li>\n</ul>\n<h5 id=\"例\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring基础#例\"></a> 例<a href=\"spring&mybatis/Spring基础#例\"></a></h5>\n<p><img src=\"/Users/ng/Documents/spring&amp;mybatis/pictures/%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F.png\" alt=\"\" class=\"article-img\"></p>\n","prev":{"title":"spring&mybatis/Spring MVC","link":"spring&mybatis/Spring MVC"},"next":{"title":"java1.8/集合_容器","link":"java1.8/集合_容器"},"plink":"ilucia.github.io/spring&mybatis/Spring基础/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> Spring基础","id":"spring基础","index":"1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> Core模块","id":"core模块","index":"1.1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 注解方式配置","id":"注解方式配置","index":"1.1.1"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 依赖注入","id":"依赖注入","index":"1.2","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 使用注解实现自动装配","id":"使用注解实现自动装配","index":"1.2.1"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> AOP","id":"aop","index":"1.3","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 注解⽅式实现AOP编程","id":"注解方式实现aop编程","index":"1.3.1"}]}]}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2022年4月27日","updated":"2022年4月27日"}}