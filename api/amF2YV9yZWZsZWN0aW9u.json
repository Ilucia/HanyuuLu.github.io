{"title":"Java反射机制备忘","date":"2020-03-29T17:14:00.000Z","link":"java_reflection","tags":["Java","reflection"],"categories":["review"],"updated":"2022-04-27T15:24:01.727Z","content":"<h1 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"java_reflection#概述\"></a> 概述<a href=\"java_reflection#概述\"></a></h1>\n<blockquote>\n<p>反射的概念是由Smith在1982年首次提出的，主要是指程序可以访问、检测和修改它本身状态或行为的一种能力，通过反射可以调用私有方法和私有属性，大部分框架也都是运用反射原理的。java通常是先有类再有对象，有对象就可以调用方法或者属性，java中的反射其实是通过Class对象来调用类里面的方法。</p>\n<p>主要是指程序可以访问，检测和修改它本身状态或行为的一种能力，并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。</p>\n<p>一个类有多个组成部分，例如：成员变量、方法、构造方法等，反射就是加载类,并解剖出类的各个组成部分。</p>\n</blockquote>\n<ul>\n<li>\n<p>反射主要提供的功能</p>\n<ul>\n<li>在运行时判断任意一个对象所属的类</li>\n<li>在运行时构造任意一个类的对象</li>\n<li>在运行时判断任意一个类所具有的成员变量和方法</li>\n<li>在运行时调用任意一个对象的方法</li>\n<li>生成动态代理</li>\n</ul>\n</li>\n<li>\n<p>优点</p>\n<ul>\n<li>能够运行时动态获取类的实例，大大提高系统的灵活性和扩展性</li>\n<li>与Java动态编译相结合，可以更多功能</li>\n</ul>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>性能较低</li>\n<li>不安全</li>\n<li>破坏了类的封装性</li>\n</ul>\n</li>\n<li>\n<p>相关类</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.Class;</span><br><span class=\"line\">java.lang.reflect.Constructor;</span><br><span class=\"line\">java.lang.reflect.Field;</span><br><span class=\"line\">java.lang.reflect.Method;</span><br><span class=\"line\">java.lang.reflect.Modifier;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n<h2 id=\"通过对象获取保证的包名和类名\"><a class=\"markdownIt-Anchor\" href=\"java_reflection#通过对象获取保证的包名和类名\"></a> 通过对象获取保证的包名和类名<a href=\"java_reflection#通过对象获取保证的包名和类名\"></a></h2>\n<p>文件结构</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:.</span><br><span class=\"line\">└─Hanyuu</span><br><span class=\"line\">        Demo.java</span><br></pre></td></tr></table></div></figure>\n<p>Demo.java</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Hanyuu;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Demo demo = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">        System.out.println(demo.getClass().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>输出</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hanyuu.Demo</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"实例化类对象\"><a class=\"markdownIt-Anchor\" href=\"java_reflection#实例化类对象\"></a> 实例化类对象<a href=\"java_reflection#实例化类对象\"></a></h2>\n<p>Demo.java</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Hanyuu;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        Demo demo = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">        Class&lt;?&gt; fornameClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Class&lt;?&gt; getClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Class&lt;?&gt; dotClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// throws ClassNotFoundException</span></span><br><span class=\"line\">        fornameClass = Class.forName(<span class=\"string\">\"Hanyuu.Demo\"</span>);</span><br><span class=\"line\">        getClass = <span class=\"keyword\">new</span> Demo().getClass();</span><br><span class=\"line\">        dotClass = Demo.class;</span><br><span class=\"line\">        System.out.println(fornameClass.getName());</span><br><span class=\"line\">        System.out.println(getClass.getName());</span><br><span class=\"line\">        System.out.println(dotClass.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>输出</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hanyuu.Demo</span><br><span class=\"line\">Hanyuu.Demo</span><br><span class=\"line\">Hanyuu.Demo</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"获取父类对象\"><a class=\"markdownIt-Anchor\" href=\"java_reflection#获取父类对象\"></a> 获取父类对象<a href=\"java_reflection#获取父类对象\"></a></h2>\n<h1 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"java_reflection#reference\"></a> Reference<a href=\"java_reflection#reference\"></a></h1>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/c615ebdefc75\" target=\"_blank\" rel=\"noopener\">JAVA反射</a></li>\n<li><a href=\"https://www.w3cschool.cn/java/java-reflex.html\" target=\"_blank\" rel=\"noopener\">java反射机制深入理解剖析</a></li>\n</ul>\n","prev":{"title":"Windows家庭版升级指南","link":"windows-10-upgrading-home-to-pro"},"next":{"title":"Java GC 机制备忘","link":"java_gc"},"plink":"ilucia.github.io/java_reflection/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 概述","id":"概述","index":"1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 通过对象获取保证的包名和类名","id":"通过对象获取保证的包名和类名","index":"1.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 实例化类对象","id":"实例化类对象","index":"1.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 获取父类对象","id":"获取父类对象","index":"1.3"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> Reference","id":"reference","index":"2"}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2020年3月29日","updated":"2022年4月27日"}}