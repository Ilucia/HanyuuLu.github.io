{"title":"高级数据结构复习","date":"2019-06-10T19:59:55.000Z","link":"Review/AdvancedDataStructures","tags":["advanced data structures","review"],"categories":["review"],"updated":"2022-04-27T15:24:01.595Z","content":"<h1 id=\"平摊分析与基本思路\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#平摊分析与基本思路\"></a> 平摊分析与基本思路<a href=\"Review/AdvancedDataStructures#平摊分析与基本思路\"></a></h1>\n<h2 id=\"aggregate-method-聚集分析\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#aggregate-method-聚集分析\"></a> Aggregate method （聚集分析）<a href=\"Review/AdvancedDataStructures#aggregate-method-聚集分析\"></a></h2>\n<h3 id=\"potential-function\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#potential-function\"></a> Potential Function<a href=\"Review/AdvancedDataStructures#potential-function\"></a></h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>=</mo><mi>a</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>d</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>−</mo><mi>a</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>+</mo><mi>P</mi><mo>(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">P(i)=amortizedCost(i)-actualCost(i)+P(i-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo><mo>(</mo><mi>P</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>−</mo><mi>P</mi><mo>(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>)</mo><mo>=</mo><mo>∑</mo><mo>(</mo><mi>a</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>d</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>−</mo><mi>a</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum(P(i)-P(i-1))=\\sum(amortizedCost(i)-actualCost(i))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>−</mo><mi>P</mi><mo>(</mo><mn>0</mn><mo>)</mo><mo>=</mo><mo>∑</mo><mo>(</mo><mi>a</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>d</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>−</mo><mi>a</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">P(n)-P(0)=\\sum(amortizedCost(i)-actualCost(i))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>−</mo><mi>P</mi><mo>(</mo><mn>0</mn><mo>)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">P(n)-P(0)\\geq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p>When P(0)=0,P(i) is the amount by which the first i operations have been over charged</p>\n<h2 id=\"accounting-method-记账分析\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#accounting-method-记账分析\"></a> Accounting method (记账分析)<a href=\"Review/AdvancedDataStructures#accounting-method-记账分析\"></a></h2>\n<p>Guess that the amortized cost of an increment is 2</p>\n<p>Now show that P(m)-P(0) &gt;= 0 is all for m</p>\n<p>1<sup>st</sup> increment:</p>\n<ul>\n<li>one unit of amortized cost is used to pay for the change in bit 0 from 0 to 1</li>\n<li>the other unit remains as a credit on bit and is used later to pay for the time when bit 0 changes form 1 to 0</li>\n</ul>\n<p>n<sup>th</sup>creament</p>\n<p>​\t…</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>m</mi><mo>)</mo><mo>−</mo><mi>P</mi><mo>(</mo><mn>0</mn><mo>)</mo><mo>=</mo><mo>∑</mo><mo>(</mo><mi>a</mi><mi>m</mi><mi>o</mi><mi>t</mi><mi>y</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>d</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>−</mo><mi>a</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">P(m)-P(0)=\\sum(amotyizedCost(i)-actualCost(i))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>= amount by which the first m increments have been over charged</p>\n<p>=number of credits</p>\n<p>= number of 1s</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\geq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<h2 id=\"potential-method-势能法\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#potential-method-势能法\"></a> Potential method (势能法)<a href=\"Review/AdvancedDataStructures#potential-method-势能法\"></a></h2>\n<p>Guess a suitable potential funciton for whtich <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>−</mo><mi>P</mi><mo>(</mo><mn>0</mn><mo>)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">P(n)-P(0) \\geq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> for all n</p>\n<p>Derive amortized cost for i<sup>th</sup> operation usting <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>P</mi><mo>=</mo><mi>P</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>−</mo><mi>P</mi><mo>(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>=</mo><mi>a</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>d</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>−</mo><mi>a</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta P = P(i)-P(i-1)=amortizedCost  - actualCost</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>d</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><mi>a</mi><mi>c</mi><mi>u</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>+</mo><mi mathvariant=\"normal\">Δ</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">amortizedCost  = acutalCost + \\Delta P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span></p>\n<h1 id=\"数据结构-二叉树与树\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#数据结构-二叉树与树\"></a> 数据结构、二叉树与树<a href=\"Review/AdvancedDataStructures#数据结构-二叉树与树\"></a></h1>\n<ul>\n<li>\n<p>Arbitrary Ordered Trees</p>\n<ul>\n<li>\n<p>Use parenthesis notation to represent the tree</p>\n</li>\n<li>\n<p>As the binary string(((())())((())()())): traverse tree as “(“ for node, then subtrees, then “)”</p>\n</li>\n<li>\n<p>2 Bits per node</p>\n<p><img src=\"AdvancedDataStructures/1560223707919.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"Review/AdvancedDataStructures/1560223707919.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Heap-like notation</p>\n<p><img src=\"Review/AdvancedDataStructures/1560224612865.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"AdvancedDataStructures/1560224612865.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>Orded threes</p>\n<ul>\n<li>parent</li>\n<li>first child</li>\n<li>next sibling</li>\n<li>degree</li>\n<li>subtree size</li>\n</ul>\n</li>\n<li>\n<p>Level-order degree sequence</p>\n<p><img src=\"AdvancedDataStructures/1560226038273.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"Review/AdvancedDataStructures/1560226038273.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n<h1 id=\"外排序\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#外排序\"></a> 外排序<a href=\"Review/AdvancedDataStructures#外排序\"></a></h1>\n<h2 id=\"缓冲使用策略原因和方法\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#缓冲使用策略原因和方法\"></a> 缓冲使用策略，原因和方法<a href=\"Review/AdvancedDataStructures#缓冲使用策略原因和方法\"></a></h2>\n<ul>\n<li>\n<p>Reason</p>\n</li>\n<li>\n<p>not feasible to input n records, sort and output in sorted order</p>\n</li>\n<li>\n<p>ALU-main memory-disk</p>\n</li>\n<li>\n<p>prefetch</p>\n<p><img src=\"Review/AdvancedDataStructures/1560237147382.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"AdvancedDataStructures/1560237147382.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>3 input/output buffers</p>\n<ul>\n<li>input, small, large</li>\n<li>middle</li>\n<li>fill middle group from disk</li>\n<li>if next record <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\leq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> middle-min- send to small</li>\n<li>if next record <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>≥</mo></mrow><annotation encoding=\"application/x-tex\">\\geq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span></span></span></span> middle-max- send to large</li>\n<li>else remove middle-min- or middle-max from middle and add new record to middle group</li>\n<li>fill input buffer when it gets empty</li>\n<li>write small/large buffer when full</li>\n<li>write middle group in sorted order when done</li>\n<li>double-ended priority queue</li>\n</ul>\n</li>\n<li>\n<p>Internal Merge Sort</p>\n<ul>\n<li>create initial sorted segments</li>\n<li>merge pairs of sorted segmetns in merge passes, until only 1 segment remains</li>\n</ul>\n</li>\n<li>\n<p>External Merge Sort</p>\n<ul>\n<li>run generation\n<ul>\n<li>a run is a sorted sequence of records</li>\n</ul>\n</li>\n<li>run merging</li>\n</ul>\n</li>\n<li>\n<p>Run generation</p>\n<ul>\n<li>loser tree</li>\n</ul>\n</li>\n<li>\n<p>Tournament Trees</p>\n</li>\n<li>\n<p>Huffman trees</p>\n</li>\n<li>\n<p>Double-ended priority queues</p>\n</li>\n<li>\n<p>Buffering</p>\n</li>\n</ul>\n<h1 id=\"红黑树\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#红黑树\"></a> 红黑树<a href=\"Review/AdvancedDataStructures#红黑树\"></a></h1>\n<h1 id=\"最小最大堆\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#最小最大堆\"></a> 最小最大堆<a href=\"Review/AdvancedDataStructures#最小最大堆\"></a></h1>\n<h3 id=\"插入\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#插入\"></a> 插入<a href=\"Review/AdvancedDataStructures#插入\"></a></h3>\n<p>只需要将节点插在二叉树的最后一个叶子结点位置，然后比较它对它父亲节点的大小，如果大则停止；如果小则交换位置，然后对父亲节点递归该过程直至根节点。复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(log(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p>一般来说，插入的位置可以不是最后一个叶子节点，可以作为任意中间节点的孩子节点插入，将这个叶子节点变为中间节点后，按上文所说的方法调整节点顺序以保证维持堆特性不变。</p>\n<h3 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#删除\"></a> 删除<a href=\"Review/AdvancedDataStructures#删除\"></a></h3>\n<p>要从堆中删除一个节点，用最后一个节点替换掉要删除的节点，然后调整节点顺序以维持堆特性。</p>\n<h1 id=\"设计数据结构与算法\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#设计数据结构与算法\"></a> 设计数据结构与算法<a href=\"Review/AdvancedDataStructures#设计数据结构与算法\"></a></h1>\n<h1 id=\"review\"><a class=\"markdownIt-Anchor\" href=\"Review/AdvancedDataStructures#review\"></a> Review<a href=\"Review/AdvancedDataStructures#review\"></a></h1>\n<ul>\n<li>Amoritized analysis</li>\n<li>Succinct data structures</li>\n<li>Function for bit vectors\n<ul>\n<li>BInary trees</li>\n<li>Ordered tree</li>\n</ul>\n</li>\n<li>String matching\n<ul>\n<li>BM</li>\n</ul>\n</li>\n<li>Double ended priority</li>\n<li>External Sort\n<ul>\n<li>buffer management</li>\n</ul>\n</li>\n<li>Red-black trees</li>\n<li>augmenting data structures</li>\n</ul>\n","prev":{"title":"操作系统原理总结","link":"Review/OS"},"next":{"title":"Win32 API 银行家算法的实现","link":"Others/BankersAlgorithm"},"plink":"ilucia.github.io/Review/AdvancedDataStructures/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 平摊分析与基本思路","id":"平摊分析与基本思路","index":"1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> Aggregate method （聚集分析）","id":"aggregate-method-聚集分析","index":"1.1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> Potential Function","id":"potential-function","index":"1.1.1"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> Accounting method (记账分析)","id":"accounting-method-记账分析","index":"1.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> Potential method (势能法)","id":"potential-method-势能法","index":"1.3"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 数据结构、二叉树与树","id":"数据结构-二叉树与树","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 外排序","id":"外排序","index":"3","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 缓冲使用策略，原因和方法","id":"缓冲使用策略原因和方法","index":"3.1"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 红黑树","id":"红黑树","index":"4"},{"title":"<a class=\"markdownIt-Anchor\"></a> 最小最大堆","id":"最小最大堆","index":"5"},{"title":"<a class=\"markdownIt-Anchor\"></a> 设计数据结构与算法","id":"设计数据结构与算法","index":"6"},{"title":"<a class=\"markdownIt-Anchor\"></a> Review","id":"review","index":"7"}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2019年6月10日","updated":"2022年4月27日"}}