{"title":"vim Reference","date":"2019-03-08T18:33:38.000Z","link":"Others/vim","tags":["vim"],"updated":"2022-04-27T15:24:01.595Z","content":"<blockquote>\n<p>Vim编辑程序有三种操作模式，分别称为 编辑模式、插入模式 和 命令模式，当运行Vim时，首先进入编辑模式<br>\n在 vim 内部通过 ! 前缀可以执行 shell 命令</p>\n</blockquote>\n<p>编辑模式</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">快捷键</th>\n<th style=\"text-align:center\">Change</th>\n<th style=\"text-align:center\">Delete</th>\n<th style=\"text-align:center\">Yank(Copy)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Line</td>\n<td style=\"text-align:center\">cc</td>\n<td style=\"text-align:center\">dd</td>\n<td style=\"text-align:center\">yy</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Letter</td>\n<td style=\"text-align:center\">cl</td>\n<td style=\"text-align:center\">dl</td>\n<td style=\"text-align:center\">yl</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Word</td>\n<td style=\"text-align:center\">cw</td>\n<td style=\"text-align:center\">dw</td>\n<td style=\"text-align:center\">yw</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>跳转<br>\n字符移动</p>\n<pre><code>    h，j，k，l 左下上右\n</code></pre>\n<p>行内移动</p>\n<pre><code>    w 正向移动到相邻单词的首字符\n    b 逆向移动到相邻单词的首字符\n    B 向前一个单词,以空格和TAB为分隔符\n    e 正向移动到相邻单词的尾字符\n    ge 逆向移动到相邻单词的尾字符\n    0 数字０，左移光标到本行的开始；\n    $ 右移光标，到本行的末尾；\n    ^ 移动光标，到本行的第一个非空字符\n</code></pre>\n<p>页移动</p>\n<pre><code>    H 跳转到当前屏幕的第一行\n    M 跳转到本屏显示的中间一行\n    L 跳转到最后一行\n    2H 表示将光标移到屏幕的第２行\n    3L 表示将光标移到屏幕的倒数第3行\n    z + enter 是当前行成为屏幕的第一行\n    z + - 是当前一行成为最后一行\n    ctrl + f 在文件中前移一页（相当于 page down）；\n    ctrl + b 在文件中后移一页（相当于 page up）；\n    ctrl + d 往下滚动半屏\n    ctrl + u 往上滚动半屏\n</code></pre>\n<p>文件移动</p>\n<pre><code>    gg 跳到首行\n    G 调到尾行\n    nG 跳转到n行\n    % 跳到另一边括号\n</code></pre>\n<p>配合查找字符的方式移动</p>\n<pre><code>    fa 正向移动到第一个字符 a 处\n    Fa 逆向移动到第一个字符 a 处\n</code></pre>\n<p>非相邻的单词或字符间移动</p>\n<pre><code>    8w 正向移动到相隔八个单词的首字符\n    4Fa 逆向移动到第四个 a 字符\n</code></pre>\n<p>更大范围的移动</p>\n<pre><code>    * 当光标停留在一个单词上，* 键会在文件内搜索该单词，并跳转到下一处；\n    # 当光标停留在一个单词上，# 在文件内搜索该单词，并跳转到上一处；\n    (/) 移动到 前/后 句 的开始；\n    {/} 跳转到 当前/下一个 段落 的开始。\n    g_ 到本行最后一个不是 blank 字符的位置。\n    fa 到下一个为 a 的字符处，你也可以fs到下一个为s的字符。\n    t, 到逗号前的第一个字符。逗号可以变成其它字符。\n    3fa 在当前行查找第三个出现的 a。\n    F/T 和 f 和 t 一样，只不过是相反方向;\n    gg 将光标定位到文件第一行起始位置；\n    G 将光标定位到文件最后一行起始位置；\n    NG或Ngg 将光标定位到第 N 行的起始位置\n</code></pre>\n<p>搜索匹配</p>\n<pre><code>    /text 向后搜索\n    ？text 向前搜索\n    :g/targetWord 全局搜索\n    :%s/oldWord/newWord/gc 全局替换\n    n 搜索下一个同样的内容\n    N 搜索上一个同样的内容\n</code></pre>\n<p>替换和删除</p>\n<p>Vim常规的删除命令是 d、 x (前者删除 行 ，后者删除 字符 ),结合Vim的其他特性可以实现基础的删除功能。将光标定位于文件内指定位置后，可以用其他字符来替换光标所指向的字符，或从当前光标位置删除一个或多个字符或一行、多行</p>\n<pre><code>    gg dG 删除全部内容\n    d0 删除至行首\n    dl 删除当前字符， dl=x\n    dh 删除前一个字符\n    dd 删除当前行\n    dj 删除上一行\n    dk 删除下一行\n    dw 删除到下一个单词开头\n    de 删除到本单词末尾\n    dE 删除到本单词末尾包括标点在内\n    db 删除到前一个单词\n    dB 删除到前一个单词包括标点在内\n    10d 删除当前行开始的10行\n    d$ 删除当前字符之后的所有字符（本行）\n    D 删除当前字符至行尾。D=d$\n    kd gg 删除当前行之前所有行（不包括当前行）\n    jdG 删除当前行之后所有行（不包括当前行）\n    :1,10d 删除1-10行\n    :11,$d 删除11行及以后所有的行\n    :1,$d 删除所有行\n    J 删除两行之间的空行，实际上是合并两行\n    rc 用 c 替换光标所指向的当前字符；\n    nrc 用 c 替换光标所指向的前 n 个字符；\n    5rA 用 A 替换光标所指向的前 5 个字符；\n    x 删除光标所指向的当前字符；\n    nx 删除光标所指向的前 n 个字符；\n    3x 删除光标所指向的前 3 个字符；\n    dw 删除光标右侧的字；\n    ndw 删除光标右侧的 n 个字；\n    3dw 删除光标右侧的 3 个字；\n    db 删除光标左侧的字；\n    ndb 删除光标左侧的 n 个字；\n    5db 删除光标左侧的 5 个字；\n    dd 删除光标所在行，并去除空隙；\n    ndd 删除（剪切） n 行内容，并去除空隙；\n    3dd 删除（剪切） 3 行内容，并去除空隙；\n    Vim常规的替换命令有 c 和 s ，结合Vim的其他特性可以实现基础的替换功能，不过替换命令执行以后，通常会由 编辑模式 进入 插入模式\n    s 用输入的正文替换光标所指向的字符；\n    S 删除当前行，并进入编辑模式；\n    ns 用输入的正文替换光标右侧 n 个字符；\n    nS 删除当前行在内的 n 行，并进入编辑模式；\n    cw 用输入的正文替换光标右侧的字；\n    cW 用输入的正文替换从光标到行尾的所有字符（同 c$ )；\n    ncw 用输入的正文替换光标右侧的 n 个字；\n    cb 用输入的正文替换光标左侧的字；\n    ncb 用输入的正文替换光标左侧的 n 个字；\n    cd 用输入的正文替换光标的所在行；\n    ncd 用输入的正文替换光标下面的 n 行；\n    c$ 用输入的正文替换从光标开始到本行末尾的所有字符；\n    c0 用输入的正文替换从本行开头到光标的所有字符。\n</code></pre>\n<p>复制粘贴</p>\n<pre><code>    yy 拷贝当前行\n    nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行\n    *“+y 复制 1 行到操作系统的粘贴板\n    *“+nyy 复制 n 行到操作系统的粘贴板\n    :1,10 co 20 将1-10行插入到第20行之后\n    :1,co\n\n    将整个文件复制一份并添加到文件尾部\n    正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制\n    ddp 交换当前行和其下一行\n    xp 交换当前字符和其后一个字符\n    正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切\n    ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴\n    :1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。\n    :1, 10 m 20 将第1-10行移动到第20行之后。\n    x 剪切当前字符\n    3x 剪切当前光标开始向后三个字符\n    X 剪切当前字符的前一个字符。X=dh\n    p 粘贴到下一行或右侧，修改和删除的数据自动到粘贴板中\n    P 粘贴到上一行或左侧\n    如果是要替换别的单词，则先按 v 进入 visual mode，选中要替换的单词，再按粘贴即可,粘贴板中就换成了被替换的单词\n    yiw （yank inner word）在一个单词的任意字母使用,就复制该单词\n    yw 则只是复制从光标所在字母到词尾的部分\n</code></pre>\n<p>撤销和重复</p>\n<pre><code>    u 撤销最近一次修改 undo\n    . 重复最后一条修改正文的命令\n    U 撤销所有修改\n    ctrl + r 取消最后一次的撤销 redo\n</code></pre>\n<p>块编辑</p>\n<pre><code>    v 可进入visual模式，使用标准快捷键移动光标可选择文本块，之后可输入标准编辑命令\n    ctrl + v 列编辑\n    行尾块…\n</code></pre>\n<p>命令行模式下的一些技巧</p>\n<pre><code>    DTc 删除从光标的c之间的所有字符\n    Rc 将光标的字符替换为c\n    nDD 删除n行数据\n    nYY 复制n行数据\n    nX 删除n个字符\n    R 进入替换状态，esc退出\n</code></pre>\n<p>插入模式<br>\n进入</p>\n<pre><code>    i 在当前位置生前插入\n    I 在当前行首插入\n    a 在当前位置后插入\n    A 在当前行尾插入\n    o 在当前行之后插入一行\n    O 在当前行之前插入一行\n    s 删掉当前字符，并进行输入\n    x 删掉当前字符，停留在Normal模式\n</code></pre>\n<p>退出</p>\n<pre><code>    Esc\n    ctrl + O 暂时性的\n    ctrl + C 取消当前的任何操作\n    ctrl + [ 官方推荐替换Esc\n</code></pre>\n<p>移动光标 尽量不要进入插入模式移动光标</p>\n<pre><code>    ctrl + H 光标移当前行行首 imap\n    ctrl + J 光标移下一行行首 imap\n    ctrl + K 光标移上一行行尾 imap\n    ctrl + L 光标移当前行行尾 imap\n    Alt + H 光标左移一格 imap\n    Alt + J 光标下移一格 imap\n    Alt + K 光标上移一格 imap\n    Alt + L 光标右移一格 imap\n</code></pre>\n<p>命令模式<br>\n打开、保存</p>\n<pre><code>:e path_to_file/filename 在已经启动的Vim中打开一个文件\n:w 保存当前编辑的文件\n:w file_temp 将当前文件另存为file_temp\n</code></pre>\n<p>退出</p>\n<pre><code>ZZ 保存并退出\n:wq 保存并退出\n:e! 放弃所有修改，并打开原来文件\nShift +Z,Q 无条件退出\nq! 无条件退出\nctrl + Z 退出vim，不推荐，会生成.swp的文件\n</code></pre>\n<p>行号与文件</p>\n<pre><code>    编辑中的每一行正文都有自己的行号，用下列命令可以移动光标到指定行（效果与 编辑模式 下的 ngg 或 nG 相同）\n\n:n 将光标移到第 n 行\n</code></pre>\n<p>命令模式下，可以规定命令操作的行号范围。数值用来指定绝对行号；字符“.”表示光标所在行的行号；字符符“$”表示正文最后一行的行号；简单的表达式，例如“.+5”表示当前行往下的第 5 行。例如</p>\n<pre><code>:345         将光标移到第 345 行\n:345w file   将第 345 行写入 file 文件\n:3,5w file   将第 3 行至第 5 行写入 file 文件\n:1,.w file   将第 1 行至当前行写入 file 文件\n:.,$w file   将当前行至最后一行写入 file 文件\n:.,.+5w file 从当前行开始将 6 行内容写入 file 文件\n:1,$w file   将所有内容写入 file 文件，相当于 :w file 命令\n</code></pre>\n<p>在命令模式下，允许从文件中读取正文，或将正文写入文件</p>\n<pre><code>:w         将编辑的内容写入原始文件，用来保存编辑的中间结果\n:wq        将编辑的内容写入原始文件并退出编辑程序（相当于 ZZ 命令）\n:w file    将编辑的内容写入 file 文件，保持原有文件的内容不变\n:a,bw file 将第 a 行至第 b 行的内容写入 file 文件\n:r file    读取 file 文件的内容，插入当前光标所在行的后面\n:e file    编辑新文件 file 代替原有内容\n:f file    将当前文件重命名为 file\n:f         打印当前文件名称和状态，如文件的行数、光标所在的行号等\n</code></pre>\n<p>字符串搜索</p>\n<pre><code>    在 编辑模式 讲过字符串的搜索，此处的 命令模式 也可以进行字符串搜索，给出一个字符串，可以通过搜索该字符串到达指定行。如果希望进行正向搜索，将待搜索的字符串置于两个 / 之间；如果希望反向搜索，则将字符串放在两个 ? 之间\n\n:/str/               正向搜索，将光标移到下一个包含字符串 str 的行\n:?str?               反向搜索，将光标移到上一个包含字符串 str 的行\n:/str/w file         正向搜索，并将第一个包含字符串 str 的行写入 file 文件\n:/str1/,/str2/w file 正向搜索，并将包含字符串 str1 的行至包含字符串 str2 的行写\n</code></pre>\n<p>Vim中的正则表达式</p>\n<pre><code>:/struct/ 要搜索一行正文，这行正文的开头包含 struct 字\n因为它只找出在行中任意位置包含 struct的第一行，并不一定在行的开始包含 struct 。解决问题的办法是在搜索字符串前面加上特殊字符^\n:/^struct/\n也可以用类似办法在搜索字符串后面加上表示行的末尾的特殊字符 $ 来找出位于行末尾的字\n:/struct$/\n</code></pre>\n<p>下表给出大多数特殊字符和它们的含义</p>\n<pre><code>^                放在字符串前面，匹配行首的字；\n$                放在字符串后面，匹配行尾的字；\n\\&lt;               匹配一个字的字头；\n\\&gt;               匹配一个字的字尾；\n.                匹配任何单个正文字符；\n[str]            匹配 str 中的任何单个字符；\n[^str]           匹配任何不在 str 中的单个字符；\n[a-b]            匹配 a 到 b 之间的任一字符；\n*                匹配前一个字符的 0 次或多次出现；\n\\                转义后面的字符。\n</code></pre>\n<p>正文替换</p>\n<pre><code>    利用 :s 命令可以实现字符串的替换\n\n:%s/str1/str2/        用字符串 str2 替换行中首次出现的字符串 str1\n:s/str1/str2/g        用字符串 str2 替换行中所有出现的字符串 str1\n:.,$ s/str1/str2/g    用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1\n:1,$ s/str1/str2/g    用字符串 str2 替换正文中所有出现的字符串 str1\n:g/str1/s//str2/g     功能同上\n:m,ns/str1/str2/g     将从m行到n行的str1替换成str2\n</code></pre>\n<p>从上述替换命令可以看到：<br>\ng 放在命令末尾，表示对搜索字符串的每次出现进行替换,不止匹配每行中的第一次出现；不加 g，表示只对搜索字符串的首次出现进行替换；g 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作<br>\ns 表示后面跟着一串替换的命令<br>\n% 表示替换范围是所有行，即全文</p>\n<p>统计当前文件中字符串 str1 出现的次数</p>\n<pre><code>:%s/str1/&amp;/gn\n</code></pre>\n<p>删除正文</p>\n<p>Vim的初级删除命令是用 d ，高级删除命令可以用 正则替换 的方式执行</p>\n<pre><code>:d                              删除光标所在行\n:3d                             删除 3 行\n:.,$d                           删除当前行至正文的末尾\n:/str1/,/str2/d                 删除从字符串 str1 到 str2 的所有行\n:g/^\\(.*\\)$\\n\\1$/d              删除连续相同的行，保留最后一行\n:g/\\%(^\\1$\\n\\)\\@&lt;=\\(.*\\)$/d     删除连续相同的行，保留最开始一行\n:g/^\\s*$\\n\\s*$/d                删除连续多个空行，只保留一行空行\n:5,20s/^#//g                    删除5到20行开头的 # 注释\n</code></pre>\n<p>恢复文件</p>\n<pre><code>    Vim 在编辑某个文件时，会另外生成一个临时文件，这个文件的名称通常以 . 开头，并以 .swp 结尾。Vim 在正常退出时，该文件被删除，若意外退出，而没有保存文件的最新修改内容，则可以使用恢复命令 :recover 来恢复文件，也可以在启动Vim时用 -r 选项\n</code></pre>\n<p>选项设置</p>\n<pre><code>    为控制不同的编辑功能，Vim 提供了很多内部选项。利用 :set 命令可以设置选项。基本语法为\n\n:set option 设置选项 option\n</code></pre>\n<p>常见的功能选项包括：</p>\n<pre><code>autoindent        设置该选项，则正文自动缩进\nignorecase        设置该选项，则忽略规则表达式中大小写字母的区别\nnumber            设置该选项，则显示正文行号\nruler             设置该选项，则在屏幕底部显示光标所在行、列的位置\ntabstop           设置按 Tab 键跳过的空格数。例如 :set tabstop=n，n 默认值为 8\nmk                将选项保存在当前目录的 .exrc 文件中\n</code></pre>\n<p>分屏</p>\n<pre><code>    :vsplit（可用缩写 :vsp） 左右分屏\n    :split（可用缩写 :sp） 上下分屏\n    ctrl + w + hjkl 窗口之间移动\n    ctrl + w + w 逆时针遍历\n    ctrl + w = 让所有的屏都有一样的高度；\n    ctrl + w + 增加高度；\n    ctrl + w - 减少高度。\n    另外，也可以在终端里启动vim时就开启分屏操作\n    vim -On file1 file2… 打开 file1 和 file2 ，垂直分屏\n    vim -on file1 file2… 打开 file1 和 file2 ，水平分屏\n</code></pre>\n<p>标签页</p>\n<pre><code>    Vim的标签（Tab）页，类似浏览器的标签页，一个标签页打开一个Vim的窗口，一个Vim的窗口可以支持N个分屏\n\n:tabnew 在Vim中新建一个标签\n:tabnew filename 如果要在新建标签页的同时打开一个文件，则可以在命令后面直接附带文件路径\n</code></pre>\n<p>Vim中的每个标签页有一个唯一的数字序号，第一个标签页的序号是0，从左向右依次加一。关于标签页有一系列操作命令，简介如下</p>\n<pre><code>:tN[ext]                跳转到上一个匹配的标签\n:tabN[ext]              跳到上一个标签页\n:tabc[lose]             关闭当前标签页\n:tabdo                  为每个标签页执行命令\n:tabe[dit]              在新标签页里编辑文件\n:tabf[ind]              寻找 'path' 里的文件，在新标签页里编辑之\n:tabfir[st]             转到第一个标签页\n:tabl[ast]              转到最后一个标签页\n:tabm[ove]  N           把标签页移到序号为N位置\n:tabnew [filename]      在新标签页里编辑文件\n:tabn[ext]              转到下一个标签页\n:tabo[nly]              关闭所有除了当前标签页以外的所有标签页\n:tabp[revious]          转到前一个标签页\n:tabr[ewind]            转到第一个标签页\n</code></pre>\n<p>外部工具集成</p>\n<pre><code>    Vim可以与许多外部程序集成，功能十分强大，比如 diff , ctags , sort , xxd 等等\n</code></pre>\n<p>diff</p>\n<pre><code>    Linux命令 diff 用来对比两个文件的内容，不过对比结果显示在终端里，可读性比较差。结合Vim，在终端里可以直接输入命令 vimdiff，后面跟两个文件名作为参数：\n    vimdiff file1 file2\n    即可在Vim里分屏显示两个文件内容的对比结果，对文件内容差异部分进行高亮标记，还可以同步滚动两个文件内容，更可以实时修改文件内容，方便程度和用户体验大大提高。\n    vimdiff a.txt b.txt\n    如果直接给 -d 选项是一样的\n    vim -d a.txt b.txt\n    除了在终端里开启vimdiff 功能，也可以在打开Vim后，在Vim的命令模式输入相关命令来开启 vimdiff 功能：\n    :diffsplit abc.txt\n    如果你现在已经开启了一个文件，想Vim帮你区分你的文件跟 abc.txt 有什么区别，可以在Vim中用 diffsplit 的方式打开第二个文件，这个时 候Vim会用 split（分上下两屏）的方式开启第二个文件，并且通过颜色，fold来显示两个文件的区别\n    这样Vim就会用颜色帮你区分开2个文件的区别。如果文件比较大（源码）重复的部分会帮你折叠起来。\n    :diffpatch filename\n    通过 :diffpatch 你的patch的文件名，就可以以当前文件加上你的patch来显示。vim会split一个新的屏，显示patch后的信息并且用颜色标明区别。\n    如果不喜欢上下对比，喜欢左右（比较符合视觉）可以在前面加 vert ，例如：\n    :vert diffsplit abc.txt\n    :vert diffpatch abc.txt\n    看完diff，用 :only 回到原本编辑的文件，觉得diff的讨厌颜色还是在哪里，只要用 :diffoff 关闭就好了。\n    还有个常用的diff中的就是 :diffu ,这个是 :diffupdate 的简写，更新的时候用\n</code></pre>\n<p>sort</p>\n<pre><code>    Linux命令 sort 可以对文本内容进行按行中的字符比较、排序，但在终端里使用 sort 命令处理文件，并不能实时查看文件内容。具体用法请自查手册。\n</code></pre>\n<p>xxd</p>\n<pre><code>    vim+xxd 是Linux下最常用的二进制文本编辑工具，xxd其实是Vim外部的一个转换程序，随Vim一起发布，在Vim里调用它来编辑二进制文本非常方便。\n    首先以二进制模式在终端里打开一个文件：\n    vim -b filename\n    Vim 的 -b 选项是告诉 Vim 打开的是一个二进制文件，不指定的话，会在后面加上 0x0a ，即一个换行符。\n    然后在Vim的命令模式下键入：\n    :%!xxd\n    即可看到二进制模式显示出来的文本，看起来像这样：\n\n0000000: 1f8b 0808 39d7 173b 0203 7474 002b 4e49  ....9..;..tt.+NI\n0000010: 4b2c 8660 eb9c ecac c462 eb94 345e 2e30  K,......b..4^.0\n0000020: 373b 2731 0b22 0ca6 c1a2 d669 1035 39d9  7;'1.&quot;.....i.59\n</code></pre>\n<p>然后就可以在二进制模式下编辑该文件，编辑后保存，然后用下面命令从二进制模式转换到普通模式：</p>\n<pre><code>:%!xxd -r\n</code></pre>\n<p>另外，也可以调整二进制的显示模式，默认是 2 个字节为一组，可以通过 g 参数调整每组字节数：</p>\n<pre><code>:%!xxd -g 1         表示每1个字节为1组\n:%!xxd -g 2         表示每2个字节为1组(默认)\n:%!xxd -g 4         表示每4个字节为1组\n</code></pre>\n","prev":{"title":"systemCall添加自定义项目","link":"Others/systemCallAdd"},"next":{"title":"Keras简单样例代码","link":"Tensorflow/keras"},"plink":"ilucia.github.io/Others/vim/","copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2019年3月8日","updated":"2022年4月27日"}}