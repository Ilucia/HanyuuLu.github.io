{"title":"OpenCV function reference","date":"2018-10-02T00:00:00.000Z","link":"OpenCV/OpenCVFunctionRef","tags":["OpenCV, vsCode"],"updated":"2022-04-27T15:24:01.559Z","content":"<h2 id=\"1图像读取\"><a class=\"markdownIt-Anchor\" href=\"OpenCV/OpenCVFunctionRef#1图像读取\"></a> 1.图像读取<a href=\"OpenCV/OpenCVFunctionRef#1图像读取\"></a></h2>\n<ul>\n<li>cv2.imread()</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> mp</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\">img =cv2.imread(<span class=\"string\">'example.jpg'</span>,<span class=\"number\">0</span>)</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>Use the function cv2.imread() to read an image. The image should be in the working directory or a full path of image should be given.[[/]]<br>\nSecond argument is a flag which specifies the way image should be read.\\</p>\n<blockquote>\n<p>cv2.IMREAD_COLOR : Loads a color image. Any transparency of image will be neglected. It is the default flag.<br>\ncv2.IMREAD_GRAYSCALE : Loads image in grayscale mode<br>\ncv2.IMREAD_UNCHANGED : Loads image as such including alpha channel</p>\n<ul>\n<li><em>Instead of these three flags, you can simply pass integers 1, 0 or -1 respectively.</em></li>\n<li>*Even if the image path is wrong, it won’t throw any error, but <figure class=\"highlight\"><figcaption><span>img``` will give you ```None```*</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 2.图像显示</span><br><span class=\"line\">* cv2.inshow()</span><br><span class=\"line\">``` py</span><br><span class=\"line\">cv2.imshow(&apos;image&apos;,img)</span><br><span class=\"line\">cv2.waitKey(0)</span><br><span class=\"line\">cv2.destroyAllWindows()</span><br></pre></td></tr></table></div></figure></li>\n</ul>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>Use the function cv2.imshow() to display an image in a window. The window automatically fits to the image size. <br>\nFirst argument is a window name which is a string. second argument is our image. You can create as many windows as you wish, but with different window names.</p>\n</blockquote>\n<ul>\n<li>cv2.waitKey()</li>\n</ul>\n<blockquote>\n<p>cv2.waitKey() is a keyboard binding function. Its argument is the time in milliseconds. The function waits for specified milliseconds for any keyboard event. If you press any key in that time, the program continues. If 0 is passed, it waits indefinitely for a key stroke. It can also be set to detect specific key strokes like, if key a is pressed etc which we will discuss below.</p>\n<blockquote>\n<ul>\n<li>Besides binding keyboard events this function also processes many other GUI events, so you MUST use it to actually display the image.</li>\n</ul>\n</blockquote>\n</blockquote>\n<ul>\n<li>cv2.destoryAllWindows()</li>\n</ul>\n<blockquote>\n<p>cv2.destroyAllWindows() simply destroys all the windows we created. If you want to destroy any specific window, use the function cv2.destroyWindow() where you pass the exact window name as the argument.</p>\n<blockquote>\n<ul>\n<li>There is a special case where you can already create a window and load image to it later. In that case, you can specify whether window is resizable or not. It is done with the function cv2.namedWindow(). By default, the flag is cv2.WINDOW_AUTOSIZE. But if you specify flag to be cv2.WINDOW_NORMAL, you can resize window. It will be helpful when image is too large in dimension and adding track bar to windows.</li>\n</ul>\n</blockquote>\n</blockquote>\n<h2 id=\"3图像写入\"><a class=\"markdownIt-Anchor\" href=\"OpenCV/OpenCVFunctionRef#3图像写入\"></a> 3.图像写入<a href=\"OpenCV/OpenCVFunctionRef#3图像写入\"></a></h2>\n<ul>\n<li>cv2.imwrite()</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cv2.imwrite(<span class=\"string\">'messigray.png'</span>,img)</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>Use the function cv2.imwrite() to save an image. <br>\nFirst argument is the file name, second argument is the image you want to save.</p>\n</blockquote>\n<h2 id=\"4sumup\"><a class=\"markdownIt-Anchor\" href=\"OpenCV/OpenCVFunctionRef#4sumup\"></a> 4.SumUp<a href=\"OpenCV/OpenCVFunctionRef#4sumup\"></a></h2>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'messi5.jpg'</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">'image'</span>,img)</span><br><span class=\"line\">k = cv2.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> k == <span class=\"number\">27</span>:         <span class=\"comment\"># wait for ESC key to exit</span></span><br><span class=\"line\">    cv2.destroyAllWindows()</span><br><span class=\"line\"><span class=\"keyword\">elif</span> k == ord(<span class=\"string\">'s'</span>): <span class=\"comment\"># wait for 's' key to save and exit</span></span><br><span class=\"line\">    cv2.imwrite(<span class=\"string\">'messigray.png'</span>,img)</span><br><span class=\"line\">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<ul>\n<li>*If you are using a 64-bit machine, you will have to modify <figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## <span class=\"number\">5.</span>视频写入</span><br><span class=\"line\">&gt; 由于暂时没有需求，本部分暂时未深入，[跳转到相关链接](https:<span class=\"comment\">//opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_video_display/py_video_display.html)</span></span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"number\">6.</span>绘画操作</span><br><span class=\"line\">### common arguments</span><br><span class=\"line\">&gt;* img : The image <span class=\"built_in\">where</span> you want to draw the shapes</span><br><span class=\"line\">&gt;* color : Color of the shape. for BGR, pass it as a tuple, eg: (<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>) for blue. For grayscale, just pass the scalar <span class=\"built_in\">value</span>.</span><br><span class=\"line\">&gt;* thickness : Thickness of the line <span class=\"built_in\">or</span> circle etc. If <span class=\"number\">-1</span> is passed for closed figures like circles, it will fill the shape. default thickness = <span class=\"number\">1</span></span><br><span class=\"line\">&gt;* lineType : Type of line, whether <span class=\"number\">8</span>-connected, anti-aliased line etc. By default, it is <span class=\"number\">8</span>-connected. cv2.LINE_AA gives anti-aliased line which looks great for curves.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">* cv2.line()</span><br><span class=\"line\">``` py</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import cv2</span><br><span class=\"line\"></span><br><span class=\"line\"># Create a black image</span><br><span class=\"line\">img = np.zeros((<span class=\"number\">512</span>,<span class=\"number\">512</span>,<span class=\"number\">3</span>), np.uint8)</span><br><span class=\"line\"></span><br><span class=\"line\"># Draw a diagonal blue line with thickness of <span class=\"number\">5</span> px</span><br><span class=\"line\">img = cv2.line(img,(<span class=\"number\">0</span>,<span class=\"number\">0</span>),(<span class=\"number\">511</span>,<span class=\"number\">511</span>),(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>),<span class=\"number\">5</span>)</span><br></pre></td></tr></table></div></figure></li>\n</ul>\n</blockquote>\n<ul>\n<li>cv2.circle()</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv2.circle(img,(<span class=\"number\">447</span>,<span class=\"number\">63</span>), <span class=\"number\">63</span>, (<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>), <span class=\"number\">-1</span>)</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>cv2.rectangle()</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv2.rectangle(img,(<span class=\"number\">384</span>,<span class=\"number\">0</span>),(<span class=\"number\">510</span>,<span class=\"number\">128</span>),(<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>),<span class=\"number\">3</span>)</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>cv2.ellipse()</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = cv2.ellipse(img,(<span class=\"number\">256</span>,<span class=\"number\">256</span>),(<span class=\"number\">100</span>,<span class=\"number\">50</span>),<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">180</span>,<span class=\"number\">255</span>,<span class=\"number\">-1</span>)</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<ul>\n<li>To draw the ellipse, we need to pass several arguments. One argument is the center location (x,y). Next argument is axes lengths (major axis length, minor axis length). <figure class=\"highlight\"><figcaption><span>is the angle of rotation of ellipse in anti-clockwise direction. ```startAngle``` and ```endAngle``` denotes the starting and ending of ellipse arc measured in clockwise direction from major axis. i.e. giving values 0 and 360 gives the full ellipse. For more details, check the documentation of ```cv2.ellipse()```. Below example draws a half ellipse at the center of the image.</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">*  cv2.polylines()</span><br><span class=\"line\">``` py</span><br><span class=\"line\">pts = np.array([[10,5],[20,30],[70,20],[50,10]], np.int32)</span><br><span class=\"line\">pts = pts.reshape((-1,1,2))</span><br><span class=\"line\">img = cv2.polylines(img,[pts],True,(0,255,255))</span><br></pre></td></tr></table></div></figure></li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>To draw a polygon, first you need coordinates of vertices. Make those points into an array of shape <figure class=\"highlight\"><figcaption><span>where ROWS are number of vertices and it should be of type ```int32```. Here we draw a small polygon of with four vertices in yellow color.</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;* If third argument is False, you will get a polylines joining all the points, not a closed shape.</span><br><span class=\"line\">&gt;* ```cv2.polylines()``` can be used to draw multiple lines. Just create a list of all the lines you want to draw and pass it to the function. All lines will be drawn individually. It is more better and faster way to draw a group of lines than calling ```cv2.line()``` for each line.</span><br><span class=\"line\">* cv2.putText()</span><br><span class=\"line\">``` py</span><br><span class=\"line\">font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class=\"line\">cv2.putText(img,&apos;OpenCV&apos;,(10,500), font, 4,(255,255,255),2,cv2.LINE_AA)</span><br></pre></td></tr></table></div></figure></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>To put texts in images, you need specify following things.</p>\n<ul>\n<li>Text data that you want to write</li>\n<li>Position coordinates of where you want put it (i.e. bottom-left corner where data starts).</li>\n<li>Font type (Check cv2.putText() docs for supported fonts)</li>\n<li>Font Scale (specifies the size of font)</li>\n<li>regular things like color, thickness, lineType etc. For better look, lineType = cv2.LINE_AA is recommended.</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;Converts an image from one color space to another.</span><br><span class=\"line\">&gt;* C++: void cvtColor(InputArray src, OutputArray dst, int code, int dstCn=0 )</span><br><span class=\"line\">&gt; *  Python: cv2.cvtColor(src, code[, dst[, dstCn]]) → dst</span><br><span class=\"line\">&gt; *  C: void cvCvtColor(const CvArr* src, CvArr* dst, int code)</span><br><span class=\"line\">&gt; * s  Python: cv.CvtColor(src, dst, code) → None</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;Parameters:</span><br><span class=\"line\">&gt;* src – input image: 8-bit unsigned, 16-bit unsigned ( CV_16UC… ), or single-precision floating-point.</span><br><span class=\"line\">&gt;* dst  – output image of the same size and depth as src.</span><br><span class=\"line\">&gt;* code – color space conversion code (see the description below).</span><br><span class=\"line\">&gt;* dstCn – number of channels in the destination image; if the parameter is 0, the number of the channels is derived automatically from src and code.</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; The function converts an input image from one color space to another. In case of a transformation to-from RGB color space, the order of the channels should be specified explicitly (RGB or BGR). Note that the default color format in OpenCV is often referred to as RGB but it is actually BGR (the bytes are reversed). So the first byte in a standard (24-bit) color image will be an 8-bit Blue component, the second byte will be Green, and the third byte will be Red. The fourth, fifth, and sixth bytes would then be the second pixel (Blue, then Green, then Red), and so on.</span><br><span class=\"line\">## 3. example</span><br><span class=\"line\">``` py</span><br><span class=\"line\">import cv2 as cv2</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">img=cv2.imread(&apos;a&apos;)</span><br><span class=\"line\">img = cv2.imread(&apos;example.jpg&apos;, 1)</span><br><span class=\"line\">font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class=\"line\">cv2.putText(img, &apos;OpenCV&apos;, (10, 500), font, 4, (255, 0, 0), 2, cv2.LINE_AA)</span><br><span class=\"line\">cv2.imshow(&apos;image&apos;, img)</span><br><span class=\"line\"># Create a black image</span><br><span class=\"line\">img = np.zeros((512, 512, 3), np.uint8)</span><br><span class=\"line\">cv2.imshow(&apos;image0&apos;, img)</span><br><span class=\"line\"># Draw a diagonal blue line with thickness of 5 px</span><br><span class=\"line\">img = cv2.line(img, (0, 0), (511, 511), (255, 0, 0), 5)</span><br><span class=\"line\">cv2.imshow(&apos;image1&apos;, img)</span><br><span class=\"line\">k = cv2.waitKey(0) &amp; 0xffa</span><br><span class=\"line\">if k == 27:  # ESC</span><br><span class=\"line\">    cv2.destroyAllWindows()</span><br><span class=\"line\">elif k == ord(&apos;s&apos;):</span><br><span class=\"line\">    cv2.imwrite(&apos;Save.jpg&apos;, img)</span><br></pre></td></tr></table></div></figure></li>\n</ul>\n","prev":{"title":"OpenCV basic operations","link":"OpenCV/OpenCVBasicOperations"},"next":{"title":"Python Excel file reader","link":"python/xlrd"},"plink":"ilucia.github.io/OpenCV/OpenCVFunctionRef/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 1.图像读取","id":"1图像读取","index":"1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 3.图像写入","id":"3图像写入","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 4.SumUp","id":"4sumup","index":"3"}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2018年10月2日","updated":"2022年4月27日"}}