{"title":"生产者消费者问题解决（windows API和Pthread双解决方案）","date":"2019-05-09T00:00:00.000Z","link":"Others/boundedBuffer","tags":["Ptherad","windows API"],"updated":"2022-04-27T15:24:01.559Z","content":"<blockquote>\n<p>Ps:就是拿自己写的报告</p>\n</blockquote>\n<h3 id=\"一-实验目的\"><a class=\"markdownIt-Anchor\" href=\"Others/boundedBuffer#一-实验目的\"></a> 一、实验目的<a href=\"Others/boundedBuffer#一-实验目的\"></a></h3>\n<p>通过实验，掌握Windows 和 Linux 环境下互斥锁和信号量的实现方法，加 深对临界区问题和进程同步机制的理解，同时熟悉利用Windows API 和 Pthread API 进行多线程编程的方法</p>\n<h3 id=\"二-实验内容\"><a class=\"markdownIt-Anchor\" href=\"Others/boundedBuffer#二-实验内容\"></a> 二、实验内容<a href=\"Others/boundedBuffer#二-实验内容\"></a></h3>\n<ol>\n<li>在Windows 操作系统上，利用 Win32 API 提供的信号量机制，编写应用<br>\n程序实现生产者——消费者问题。</li>\n<li>在 Linux 操作系统上，利用 Pthread API 提供的信号量机制，编写应用程<br>\n序实现生产者——消费者问题。</li>\n<li>两种环境下，生产者和消费者均作为独立线程，并通过 empty、full、mutex 三个信号量实现对缓冲进行插入与删除。</li>\n<li>通过打印缓冲区中的内容至屏幕，来验证应用程序的正确性。</li>\n</ol>\n<h3 id=\"三-实验环境\"><a class=\"markdownIt-Anchor\" href=\"Others/boundedBuffer#三-实验环境\"></a> 三、实验环境<a href=\"Others/boundedBuffer#三-实验环境\"></a></h3>\n<ul>\n<li>\n<p>windows 10 1903</p>\n</li>\n<li>\n<p>Windows API</p>\n<ul>\n<li>Visual Studio 2019</li>\n</ul>\n</li>\n<li>\n<p>Pthread API</p>\n<ul>\n<li>\n<p>WIndows Subsystem for Linux</p>\n<ul>\n<li>\n<p>Ubuntu 4.4.0-18362-Microsoft #1-Microsoft Mon Mar 18 12:02:00 PST 2019 x86_64 x86_64 x86_64 GNU/Linux</p>\n</li>\n<li>\n<p>g++ 7.4.0</p>\n</li>\n<li>\n<p>GNU gdb 8.1.0.20180409-git</p>\n</li>\n<li>\n<p>visual studio code 1.33.1</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"四-实验步骤\"><a class=\"markdownIt-Anchor\" href=\"Others/boundedBuffer#四-实验步骤\"></a> 四、实验步骤<a href=\"Others/boundedBuffer#四-实验步骤\"></a></h3>\n<ul>\n<li>\n<p>思路</p>\n<ul>\n<li>\n<p>Shared data</p>\n<ul>\n<li>Semaphore\n<ul>\n<li>full\t//指示缓冲区中已有内容数目，防止消费者尝试从空的缓冲区中读取内容</li>\n<li>empty //指示缓冲区中可用内容数目，方式生产者尝试向已满的缓冲区中存放内容</li>\n<li>mutex //访问锁，保证同一时刻至多只有一个用户在访问buffer</li>\n</ul>\n</li>\n<li>initially\n<ul>\n<li>full=0</li>\n<li>empty = n</li>\n<li>mutex = 1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Producer Process</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Produce an item in nextp</span></span><br><span class=\"line\">  wait(empty);</span><br><span class=\"line\">  wait(mutex);</span><br><span class=\"line\">  <span class=\"comment\">// add nextp to buffer</span></span><br><span class=\"line\">  signal(mutex);</span><br><span class=\"line\">  signal(full);</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></div></figure>\n</li>\n<li>\n<p>Consumer Process</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  wait(full);</span><br><span class=\"line\">  wait(mutex);</span><br><span class=\"line\">  <span class=\"comment\">// remove nextp to buffer</span></span><br><span class=\"line\">  signal(mutex);</span><br><span class=\"line\">  signal(empty);</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五-主要数据结构及说明\"><a class=\"markdownIt-Anchor\" href=\"Others/boundedBuffer#五-主要数据结构及说明\"></a> 五、主要数据结构及说明<a href=\"Others/boundedBuffer#五-主要数据结构及说明\"></a></h3>\n<ul>\n<li>信号量\n<ul>\n<li>full\n<ul>\n<li>指示缓冲区中已有内容数目，防止消费者尝试从空的缓冲区中读取内容</li>\n</ul>\n</li>\n<li>empty\n<ul>\n<li>指示缓冲区中可用内容数目，方式生产者尝试向已满的缓冲区中存放内容</li>\n</ul>\n</li>\n<li>mutex\n<ul>\n<li>访问锁，保证同一时刻至多只有一个用户在访问buffer</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>缓冲区\n<ul>\n<li>实现结构\n<ul>\n<li>定长数组</li>\n</ul>\n</li>\n<li>逻辑结构\n<ul>\n<li>循环队列</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六-程序运行的初值和运行结果\"><a class=\"markdownIt-Anchor\" href=\"Others/boundedBuffer#六-程序运行的初值和运行结果\"></a> 六、程序运行的初值和运行结果<a href=\"Others/boundedBuffer#六-程序运行的初值和运行结果\"></a></h3>\n<ul>\n<li>\n<p>Windows API</p>\n<ul>\n<li>\n<p>初值</p>\n<p><img src=\"/Others/boundedBuffer/1557370590363.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"boundedBuffer/1557370590363.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>运行结果</p>\n<p><img src=\"/Others/boundedBuffer/1557370643235.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"boundedBuffer/1557370643235.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Pthread API</p>\n<ul>\n<li>初值</li>\n</ul>\n<p><img src=\"/Others/boundedBuffer/1557377842189.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"boundedBuffer/1557377842189.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>运行结果</p>\n<p><img src=\"/Others/boundedBuffer/1557377960491.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"boundedBuffer/1557377960491.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"七-实验体会\"><a class=\"markdownIt-Anchor\" href=\"Others/boundedBuffer#七-实验体会\"></a> 七、实验体会<a href=\"Others/boundedBuffer#七-实验体会\"></a></h3>\n<h4 id=\"问题和解决方法\"><a class=\"markdownIt-Anchor\" href=\"Others/boundedBuffer#问题和解决方法\"></a> 问题和解决方法<a href=\"Others/boundedBuffer#问题和解决方法\"></a></h4>\n<ul>\n<li>Q\n<ul>\n<li>g++编译失败，找不到Pthread链接</li>\n</ul>\n</li>\n<li>A\n<ul>\n<li>编译路径中不含Pthread,需添加-lpthread</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"体会和收获\"><a class=\"markdownIt-Anchor\" href=\"Others/boundedBuffer#体会和收获\"></a> 体会和收获<a href=\"Others/boundedBuffer#体会和收获\"></a></h4>\n<ul>\n<li>g++ gdb多线程调试经验</li>\n<li>windows API调试Pthread调试经验</li>\n</ul>\n<h3 id=\"八-源代码\"><a class=\"markdownIt-Anchor\" href=\"Others/boundedBuffer#八-源代码\"></a> 八、源代码<a href=\"Others/boundedBuffer#八-源代码\"></a></h3>\n<ul>\n<li>\n<p>source code</p>\n<ul>\n<li>\n<p>windows API</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;process.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">unsigned</span> BUFFER = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">HANDLE empty;</span><br><span class=\"line\">HANDLE full;</span><br><span class=\"line\">HANDLE mutex;</span><br><span class=\"line\"><span class=\"keyword\">int</span> in = <span class=\"number\">0</span>, out = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> buffer[BUFFER];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; BUFFER; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; buffer[i]&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">HANDLE WINAPI <span class=\"title\">producer</span><span class=\"params\">(LPVOID lpParameter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tWaitForSingleObject(empty, INFINITE);</span><br><span class=\"line\">\t\tWaitForSingleObject(mutex, INFINITE);</span><br><span class=\"line\">\t\tbuffer[in] = rand() % BUFFER;</span><br><span class=\"line\">\t\tin = (++in) % BUFFER;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"product at \"</span> &lt;&lt; in &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tprint();</span><br><span class=\"line\">\t\tReleaseSemaphore(mutex, <span class=\"number\">1</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t\tReleaseSemaphore(full, <span class=\"number\">1</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t\tSleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">HANDLE WINAPI <span class=\"title\">consumer</span><span class=\"params\">(LPVOID lpParameter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tWaitForSingleObject(full, INFINITE);</span><br><span class=\"line\">\t\tWaitForSingleObject(mutex, INFINITE);</span><br><span class=\"line\">\t\tbuffer[out] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tout = (out + <span class=\"number\">1</span>) % BUFFER;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"consume at \"</span> &lt;&lt; out &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tprint();</span><br><span class=\"line\">\t\tReleaseSemaphore(mutex, <span class=\"number\">1</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t\tReleaseSemaphore(empty, <span class=\"number\">1</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t\tSleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tsrand((<span class=\"keyword\">unsigned</span>)time);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; BUFFER; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbuffer[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDWORD\tDW;</span><br><span class=\"line\">\tempty = CreateSemaphore(<span class=\"literal\">nullptr</span>, BUFFER, BUFFER, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\tfull = CreateSemaphore(<span class=\"literal\">nullptr</span>, <span class=\"number\">0</span>, BUFFER, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\tmutex = CreateSemaphore(<span class=\"literal\">nullptr</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\tHANDLE p = CreateThread(<span class=\"literal\">nullptr</span>, <span class=\"number\">0</span>, (LPTHREAD_START_ROUTINE)producer, <span class=\"literal\">nullptr</span>, <span class=\"number\">0L</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\tHANDLE c = CreateThread(<span class=\"literal\">nullptr</span>,<span class=\"number\">0</span>, (LPTHREAD_START_ROUTINE)consumer, <span class=\"literal\">nullptr</span>, <span class=\"number\">0L</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\tHANDLE p1 = CreateThread(<span class=\"literal\">nullptr</span>, <span class=\"number\">0</span>, (LPTHREAD_START_ROUTINE)producer, <span class=\"literal\">nullptr</span>, <span class=\"number\">0L</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\tHANDLE c1 = CreateThread(<span class=\"literal\">nullptr</span>, <span class=\"number\">0</span>, (LPTHREAD_START_ROUTINE)consumer, <span class=\"literal\">nullptr</span>, <span class=\"number\">0L</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\tWaitForSingleObject(p, INFINITE);</span><br><span class=\"line\">\tWaitForSingleObject(c, INFINITE);</span><br><span class=\"line\">\tWaitForSingleObject(p1, INFINITE);</span><br><span class=\"line\">\tWaitForSingleObject(c1, INFINITE);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li>\n<p>Pthread API</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> BUFFER = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sem_t</span> empty, full;</span><br><span class=\"line\"><span class=\"keyword\">pthread_mutex_t</span> mutex;</span><br><span class=\"line\"><span class=\"keyword\">int</span> in = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> out = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> buffer[BUFFER];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; BUFFER; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, buffer[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">Lproducer</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsem_wait(&amp;empty);</span><br><span class=\"line\">\t\tpthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"product at \"</span> &lt;&lt; in&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tbuffer[in] = rand() % BUFFER;</span><br><span class=\"line\">\t\tin = (++in) % BUFFER;</span><br><span class=\"line\">\t\tprint();</span><br><span class=\"line\">\t\tpthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">\t\tsem_post(&amp;full);</span><br><span class=\"line\">\t\tsleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">Lconsumer</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsem_wait(&amp;full);</span><br><span class=\"line\">\t\tpthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"consumer at\"</span> &lt;&lt; out&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tbuffer[out] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tout = (++out) % BUFFER;</span><br><span class=\"line\">\t\tprint();</span><br><span class=\"line\">\t\tpthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">\t\tsem_post(&amp;empty);</span><br><span class=\"line\">\t\tsleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; BUFFER; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbuffer[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">pthread_t</span> c,c1;</span><br><span class=\"line\">\t<span class=\"keyword\">pthread_t</span> p,p1;</span><br><span class=\"line\">\tsem_init(&amp;full, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tsem_init(&amp;empty, <span class=\"number\">0</span>, BUFFER);</span><br><span class=\"line\">\tpthread_create(&amp;c, <span class=\"literal\">NULL</span>, Lconsumer, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tpthread_create(&amp;c, <span class=\"literal\">NULL</span>, Lconsumer, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tpthread_create(&amp;p, <span class=\"literal\">NULL</span>, Lproducer, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tpthread_create(&amp;p, <span class=\"literal\">NULL</span>, Lproducer, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tpthread_join(c, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tpthread_join(p, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tpthread_join(c1, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tpthread_join(p1, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n</ul>\n","prev":{"title":"Win32 API 银行家算法的实现","link":"Others/BankersAlgorithm"},"next":{"title":"算法分析与设计","link":"Review/Algorithm"},"plink":"ilucia.github.io/Others/boundedBuffer/","copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2019年5月9日","updated":"2022年4月27日"}}