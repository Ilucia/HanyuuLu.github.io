{"title":"数据结构小结","date":"2019-01-08T11:47:06.000Z","link":"Review/dataStructure","tags":["data sturcture"],"categories":["review"],"updated":"2022-04-27T15:24:01.715Z","content":"<h2 id=\"性能度量\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#性能度量\"></a> 性能度量<a href=\"Review/dataStructure#性能度量\"></a></h2>\n<blockquote>\n<p>算法的时间复杂度和空间复杂度合称为算法的复杂度。</p>\n</blockquote>\n<h3 id=\"时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#时间复杂度\"></a> 时间复杂度<a href=\"Review/dataStructure#时间复杂度\"></a></h3>\n<ol>\n<li>\n<p>时间频度 一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。</p>\n</li>\n<li>\n<p>时间复杂度 一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>表示，若有某个辅助函数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>,使得当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>趋近于无穷大时，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><mrow><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">{\\frac{T(n)}{f(n)}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>的极限值为不等于零的常数，则称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>的同数量级函数。记作<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)=O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>,称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>为算法的渐进时间复杂度，简称时间复杂度。<br>\n常见的时间复杂度有：常数阶<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>,对数阶<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(log_{2}n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>,线性阶<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>, 线性对数阶<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>⋅</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\cdot log_{2}n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>,平方阶<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，立方阶<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>3</mn></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{3})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>,…， k次方阶<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mi>k</mi></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{k})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> ,指数阶<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>k</mi><mi>n</mi></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(k^{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</p>\n</li>\n<li>\n<p>最坏时间复杂度和平均时间复杂度 　最坏情况下的时间复杂度称最坏时间复杂度。一般不特别说明，讨论的时间复杂度均是最坏情况下的时间复杂度。</p>\n</li>\n<li>\n<p>记号<br>\n渐进精确记号<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Θ</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\Theta(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Θ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span><br>\n渐进上界记号<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span><br>\n渐进下界记号<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Ω</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\Omega(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Ω</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n</li>\n<li>\n<p>求时间复杂度</p>\n<ol>\n<li>\n<p>如果算法的执行时间不随着问题规模n的增加而增长,此类算法的时间复杂度是O(1)。</p>\n <figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=<span class=\"number\">91</span>;</span><br><span class=\"line\">y=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(y&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    x=x<span class=\"number\">-10</span>;</span><br><span class=\"line\">    y--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>解答： <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)=O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，</p>\n</li>\n<li>\n<p>当有若干个循环语句时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。</p>\n <figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;=i;j++)</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(k=<span class=\"number\">1</span>;k&lt;=j;k++)</span><br><span class=\"line\">          x++;</span><br></pre></td></tr></table></div></figure>\n<p>该程序段中频度最大的语句是<code>x++</code>，则该程序段的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mi>n</mi><mn>3</mn><mi mathvariant=\"normal\">/</mi><mn>6</mn><mo>+</mo></mrow><annotation encoding=\"application/x-tex\">T(n)=O(n3/6+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord\">3</span><span class=\"mord\">/</span><span class=\"mord\">6</span><span class=\"mord\">+</span></span></span></span> 低次项 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mi>n</mi><mn>3</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">)=O(n3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span></p>\n</li>\n<li>\n<p>算法的时间复杂度不仅仅依赖于问题的规模，还与输入实例的初始状态有关。</p>\n</li>\n<li>\n<p>时间复杂度评价性能<br>\n一般将渐近时间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)=O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>简称为时间复杂度，其中的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>一般是算法中频度最大的语句频度。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"空间复杂度\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#空间复杂度\"></a> 空间复杂度<a href=\"Review/dataStructure#空间复杂度\"></a></h3>\n<pre><code>一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。程序执行时所需存储空间包括以下两部分。　　\n1. 固定部分。这部分空间的大小与输入/输出的数据的个数多少、数值无关。主要包括指令空间（即代码空间）、数据空间（常量、简单变量）等所占的空间。这部分属于静态空间。\n2. 可变空间，这部分空间的主要包括动态分配的空间，以及递归栈所需的空间等。这部分的空间大小与算法有关。\n\t&gt; 一个算法所需的存储空间用$f(n)$表示。$S(n)=O(f(n))　$　其中$n$为问题的规模，$S(n)$表示空间复杂度。\n</code></pre>\n<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#数组\"></a> 数组<a href=\"Review/dataStructure#数组\"></a></h2>\n<p>抽象数据类型（Abstract Data Type，ADT）</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">GeneralArray</span> &#123;</span></span><br><span class=\"line\"><span class=\"comment\">// a set of pairs &lt;index, value&gt; where for each value of</span></span><br><span class=\"line\">index in IndexSet there is a value of type <span class=\"keyword\">float</span>. IndexSet is a finite ordered <span class=\"built_in\">set</span> of one <span class=\"keyword\">or</span> more dimensions.</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    GeneralArray(<span class=\"keyword\">int</span> j, RangeList <span class=\"built_in\">list</span>, <span class=\"keyword\">float</span> initValue = defaultValue);</span><br><span class=\"line\"><span class=\"comment\">// This constructor creates a j dimensional array of floats; the range of the kth dimension is given by the kth element of list. For all i∈IndexSet, insert &lt;i, initValue&gt; into the array.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">float</span>  <span class=\"title\">Retrieve</span><span class=\"params\">(index i)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// if (i∈IndexSet) return the float associated with i in the array;else throw an exception.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Store</span><span class=\"params\">(index i, <span class=\"keyword\">float</span> x)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// if (i∈IndexSet) replace the old value associated with i by x;  else throw an exception.</span></span><br><span class=\"line\">&#125;; <span class=\"comment\">//end of GeneralArray</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"顺序表\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#顺序表\"></a> 顺序表<a href=\"Review/dataStructure#顺序表\"></a></h3>\n<ul>\n<li>多项式\n<ul>\n<li>基本操作：求长度、遍历、取数、存数、插入、删除<br>\n基本结构</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Polynomial</span>;</span> <span class=\"comment\">// forward declaration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Term</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">friend</span> Polynomial;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">     <span class=\"keyword\">float</span> coef; <span class=\"comment\">// coefficient</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> <span class=\"built_in\">exp</span>;     <span class=\"comment\">// exponent</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Polynomial</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">///...</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">   Term *termArray;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> capacity; <span class=\"comment\">// size of termArray</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> terms; <span class=\"comment\">// number of nonzero terms</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Polynomial Polynomial::Add(Polynomial b)</span><br><span class=\"line\">&#123; <span class=\"comment\">// return the sum of the polynomials *this and b.</span></span><br><span class=\"line\">\tPolynomial c;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> aPos = <span class=\"number\">0</span>, bPos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((aPos &lt; terms) &amp;&amp; (b &lt; b.terms))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (termArray[aPos].<span class=\"built_in\">exp</span> == b.termArray[bPos].<span class=\"built_in\">exp</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">float</span> t = termArray[aPos].coef + termArray[bPos].coef;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (t)</span><br><span class=\"line\">\t\t\t\tc.NewTerm(t, termArray[aPos].<span class=\"built_in\">exp</span>);</span><br><span class=\"line\">\t\t\taPos++;</span><br><span class=\"line\">\t\t\tbPos++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (termArray[aPos].<span class=\"built_in\">exp</span> &lt; b.termArray[bPos].<span class=\"built_in\">exp</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tc.NewTerm(b.termArray[bPos].coef,b.termArray[bPos].<span class=\"built_in\">exp</span>);</span><br><span class=\"line\">\t\t\tbPos++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tc.NewTerm(termArray[aPos].coef, termArray[aPos].<span class=\"built_in\">exp</span>);</span><br><span class=\"line\">\t\t\taPos++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// add in the remaining terms of *this</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; aPos &lt; terms; aPos++)</span><br><span class=\"line\">\t\tc.NewTerm(termArray[aPos].coef, termArray[aPos].<span class=\"built_in\">exp</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// add in the remaining terms of b</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; bPos &lt; b.terms; bPos++)</span><br><span class=\"line\">\t\tc.NewTerm(b.termArray[bPos].coef, b.termArray[bPos].<span class=\"built_in\">exp</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Polynomial::NewTerm(<span class=\"keyword\">const</span> <span class=\"keyword\">float</span> theCoeff,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> theExp)</span><br><span class=\"line\">&#123; <span class=\"comment\">// add a new term to the end of termArray.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (terms == capacity)</span><br><span class=\"line\">\t&#123; <span class=\"comment\">// double capacity of termArray</span></span><br><span class=\"line\">\t\tcapacity *= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tterm *temp = <span class=\"keyword\">new</span> term[capacity]; <span class=\"comment\">// new array</span></span><br><span class=\"line\">\t\tcopy(termArray, termAarry + terms, temp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[] termArray; <span class=\"comment\">// deallocate old memory</span></span><br><span class=\"line\">\t\ttermArray = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttermArray[terms].coef = theCoeff;</span><br><span class=\"line\">\ttermArray[terms++].<span class=\"built_in\">exp</span> = theExp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>时间复杂度分析：\n<ul>\n<li>插入：\n<ul>\n<li>无需翻倍时：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>翻倍时（内存不足）:<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo>+</mo></mrow><annotation encoding=\"application/x-tex\">O(m + n +</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\">+</span></span></span></span> 在数组加倍中花费的时间 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</li>\n<li>翻倍（内存扩容）：\n<ul>\n<li>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><msup><mn>2</mn><mi>i</mi></msup><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><msup><mn>2</mn><mi>k</mi></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\sum_{i=1}^{k}{2^{i}})=O(2^{k+1})=O(2^{k})\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.1137820000000005em;vertical-align:-1.277669em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8361130000000003em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.149108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.149108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n</li>\n<li>由于 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi><mi mathvariant=\"normal\">.</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>s</mi><mo>&gt;</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">c.terms&gt;2^{k-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65418em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> , <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>+</mo><mi>n</mi><mo>∈</mo><mi>c</mi><mi mathvariant=\"normal\">.</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">m+n\\in c.terms</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">s</span></span></span></span>实际使用时间为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>c</mi><mi mathvariant=\"normal\">.</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>s</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(c.terms)=O(m+n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">c</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"稀疏矩阵\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#稀疏矩阵\"></a> 稀疏矩阵<a href=\"Review/dataStructure#稀疏矩阵\"></a></h3>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SparseMatrix</span></span></span><br><span class=\"line\"><span class=\"class\"> &#123;</span> <span class=\"comment\">// a set of &lt;row, column, value&gt;, where row, column are non-negative integers and form a unique combination; value is also an integer.</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      SparseMatrix ( <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> t);</span><br><span class=\"line\">      <span class=\"comment\">// creates a r∈c SparseMatrix with a capacity of t nonzero terms</span></span><br><span class=\"line\">      <span class=\"function\">SparseMatrix <span class=\"title\">Transpose</span> <span class=\"params\">( )</span></span>;</span><br><span class=\"line\">      <span class=\"comment\">// return the SparseMatrix obtained by transposing *this</span></span><br><span class=\"line\">      <span class=\"function\">SparseMatrix  <span class=\"title\">Add</span> <span class=\"params\">( SparseMatrix b)</span></span>;</span><br><span class=\"line\">      <span class=\"function\">SparseMatrix  <span class=\"title\">Multiply</span> <span class=\"params\">( SparseMatrix b)</span></span>;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">SparseMatrix</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">MatrixTerm</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SparseMatrix</span>;</span></span><br><span class=\"line\">Private:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row, col, value;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>转置</li>\n</ul>\n <figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> SparseMatrix SparseMatrix::Transpose()</span><br><span class=\"line\">&#123; <span class=\"comment\">// return the transpose of *this</span></span><br><span class=\"line\">\t<span class=\"function\">SparseMatrix <span class=\"title\">b</span><span class=\"params\">(cols, rows, terms)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (terms &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123; <span class=\"comment\">//nonzero matrix</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> currentB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt; cols; c++)\t\t<span class=\"comment\">// transpose by columns</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; terms; i++) <span class=\"comment\">// find and move terms in column c</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (smArray[i].col == c)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tb.smArray[CurrentB].row = c;</span><br><span class=\"line\">\t\t\t\t\tb.smArray[CurrentB].col = smArray[i].row;</span><br><span class=\"line\">\t\t\t\t\tb.smArray[CurrentB++].value = smArray[i].value;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"comment\">// end of if (terms &gt; 0)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>快速转置</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> SparseMatrix SparseMatrix::FastTranspose()</span><br><span class=\"line\">&#123; <span class=\"comment\">// return the transpose of *this in O(terms+cols) time.</span></span><br><span class=\"line\">\t<span class=\"function\">SparseMatrix <span class=\"title\">b</span><span class=\"params\">(cols, rows, terms)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (terms &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123; <span class=\"comment\">// nonzero matrix</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> *rowSize = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[cols];</span><br><span class=\"line\">\t\t<span class=\"number\">7</span><span class=\"keyword\">int</span> *rowStart = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[cols];</span><br><span class=\"line\">\t\t<span class=\"comment\">// compute rowSize[i] = number of terms in row i of b</span></span><br><span class=\"line\">\t\tfill(rowSize, rowSize + cols, <span class=\"number\">0</span>); <span class=\"comment\">// initialze</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; terms; i++)</span><br><span class=\"line\">\t\t\trowSize[smArray[i].col]++;</span><br><span class=\"line\">\t\t<span class=\"comment\">// rowStart[i] = starting position of row i in b</span></span><br><span class=\"line\">\t\trowStart[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; cols; i++)</span><br><span class=\"line\">\t\t\trowStart[i] = rowStart[i - <span class=\"number\">1</span>] + rowSize[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; terms; i++)</span><br><span class=\"line\">\t\t&#123; <span class=\"comment\">// copy from *this to b</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = rowStart[smArray[i].col];</span><br><span class=\"line\">\t\t\tb.smArray[j].row = smArray[i].col;</span><br><span class=\"line\">\t\t\tb.smArray[j].col = smArray[i].row;</span><br><span class=\"line\">\t\t\tb.smArray[j].value = smArray[i].value;</span><br><span class=\"line\">\t\t\trowStart[smArray[i].col]++;</span><br><span class=\"line\">\t\t&#125; <span class=\"comment\">// end of for</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[] rowSize;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[] rowStart;</span><br><span class=\"line\">\t&#125; <span class=\"comment\">// end of if</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>时间复杂度<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>c</mi><mi>o</mi><mi>l</mi><mi>s</mi><mo>+</mo><mi>t</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>s</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(cols+terms)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h2 id=\"字符串匹配算法\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#字符串匹配算法\"></a> 字符串匹配算法<a href=\"Review/dataStructure#字符串匹配算法\"></a></h2>\n<h3 id=\"1-暴力匹配法\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#1-暴力匹配法\"></a> 1. 暴力匹配法<a href=\"Review/dataStructure#1-暴力匹配法\"></a></h3>\n<p>定义现有文本串S模式串P，假设现在文本串S匹配到i位置，模式串P匹配到j位置，则有：</p>\n<ul>\n<li>如果当前字符匹配成功（即S[i] == P[j]），则i++，j++，继续匹配下一个字符；<br>\n*如果失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0。相当于每次匹配失败时，i 回溯，j 被置为0。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ViolentMatch</span><span class=\"params\">(<span class=\"keyword\">char</span>* s, <span class=\"keyword\">char</span>* p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sLen = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pLen = <span class=\"built_in\">strlen</span>(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (s[i] == p[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//当前字符匹配成功（即S[i] == P[j]），则i++，j++</span></span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t\tj++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0</span></span><br><span class=\"line\">\t\t\ti = i - j + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tj = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//匹配成功，返回模式串p在文本串s中的位置，否则返回-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (j == pLen)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<pre><code>  暴力匹配法没有利用已经匹配过的信息，实现简单但是效率低下。\n</code></pre>\n</blockquote>\n<hr>\n<h3 id=\"2kmp算法\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#2kmp算法\"></a> 2.KMP算法<a href=\"Review/dataStructure#2kmp算法\"></a></h3>\n<ul>\n<li>算法流程\n<ul>\n<li>假设现在文本串S匹配到i位置，模式串P匹配到j位置\n<ul>\n<li>如果j=-1，或者当前字符匹配成功（S[i]==P[j]），都令i++，j++，继续匹配下一个字符；</li>\n<li>如果j!=-1，且当前字符匹配失败（S[i]!=P[j]），则令i不变，j =next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j-next[j] 位。<br>\n（当匹配失败时，模式串向右移动的位数为：失配字符所在位置 - 失配字符对应的next 值（next 数组的求解会在下文阐述），即移动的实际位数为j-next[j]，且此值大于等于1。next数组的值代表当前字符之前的字符串中，有多大长度的相同前缀后缀。例如如果next[j]=k，代表j之前的字符串中有最大长度为k 的相同前缀后缀。此也意味着在某个字符失配时，该字符对应的next值会告诉你下一步匹配中，模式串应该跳到哪个位置（跳到next[j]的位置）。如果next[j]等于0或-1，则跳到模式串的开头字符，若next[j]=k且k&gt;0，代表下次匹配跳到j之前的某个字符，而不是跳到开头，且具体跳过了k个字符。)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">KmpSearch</span><span class=\"params\">(<span class=\"keyword\">char</span>* s, <span class=\"keyword\">char</span>* p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sLen = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pLen = <span class=\"built_in\">strlen</span>(p);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (j == <span class=\"number\">-1</span> || s[i] == p[j])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t\tj++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//next[j]即为j所对应的next值</span></span><br><span class=\"line\">\t\t\tj = next[j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (j == pLen)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>步骤</li>\n</ul>\n<ol>\n<li>寻找前缀后缀最长公共元素长度<br>\n对于P = p0 p1 …pj-1 pj，寻找模式串P中长度最大且相等的前缀和后缀。如果存在p0 p1 …pk-1 pk = pj- k pj-k+1…pj-1 pj，那么在包含pj的模式串中有最大长度为k+1的相同前缀后缀。举个例子，如果给定的模式串为“abab”，那么它的各个子串的前缀后缀的公共元素的最大长度如下表格所示：</li>\n</ol>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>模式串</th>\n<th>a</th>\n<th>b</th>\n<th>a</th>\n<th>b</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最大前缀后缀公共元素长度</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n</tr>\n</tbody>\n</table></div></div>\n<blockquote>\n<p>比如对于字符串aba来说，它有长度为1的相同前缀后缀a；而对于字符串abab来说，它有长度为2的相同前缀后缀ab（相同前缀后缀的长度为k+1，k+1=2）。</p>\n</blockquote>\n<ol start=\"2\">\n<li>求next数组<br>\nnext数组考虑的是除当前字符外的最长相同前缀后缀，所以通过第①步骤求得各个前缀后缀的公共元素的最大长度后，只要稍作变形即可：将第①步骤中求得的值整体右移一位，然后初值赋为-1，如下表格所示：</li>\n</ol>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>模式串</th>\n<th>a</th>\n<th>b</th>\n<th>a</th>\n<th>b</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>next数组</td>\n<td>-1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody>\n</table></div></div>\n<ol start=\"3\">\n<li>\n<p>根据next数组进行匹配</p>\n<p>匹配失配，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>=</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">j=next[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>，模式串向右移动的位数为：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>−</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">j-next[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>。换言之，当模式串的后缀<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mi>j</mi><mo>−</mo><mi>k</mi><mi>p</mi><mi>j</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mi>p</mi><mi>j</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">pj-kpj-k+1,...,pj-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>跟文本串<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>i</mi><mo>−</mo><mi>k</mi><mi>s</mi><mi>i</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">si-ksi-k+1,...,si-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>匹配成功，但<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">pj</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span></span></span>跟<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">si</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span></span></span></span>匹配失败时，因为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>[</mo><mi>j</mi><mo>]</mo><mo>=</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">next[j]=k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>，相当于在不包含pj的模式串中有最大长度为k的相同前缀后缀，即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mn>0</mn><mi>p</mi><mn>1...</mn><mi>p</mi><mi>k</mi><mo>−</mo><mn>1</mn><mo>=</mo><mi>p</mi><mi>j</mi><mo>−</mo><mi>k</mi><mi>p</mi><mi>j</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1...</mn><mi>p</mi><mi>j</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">p0p1...pk-1=pj-kpj-k+1...pj-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord\">0</span><span class=\"mord mathdefault\">p</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，故令<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>=</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">j=next[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>，从而让模式串右移<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>−</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">j-next[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">t</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>位，使得模式串的前缀<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mn>0</mn><mi>p</mi><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mi>p</mi><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">p0p1,...,pk-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord\">0</span><span class=\"mord mathdefault\">p</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>对应着文本串<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>i</mi><mo>−</mo><mi>k</mi><mi>s</mi><mi>i</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">si-ksi-k+1,...,si-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，而后让<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">pk</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>跟<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">s</span></span></span></span>i继续匹配。如下图所示：<br>\n​\t<img src=\"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%B0%8F%E7%BB%93/0000.jpg\" alt=\"\"><img src=\"/Review/dataStructure/0000.jpg\"></p>\n</li>\n</ol>\n<h3 id=\"解释\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#解释\"></a> 解释<a href=\"Review/dataStructure#解释\"></a></h3>\n<ul>\n<li>\n<p>寻找最长前缀后缀</p>\n<ul>\n<li>如果给定的模式串是：“ABCDABD”，从左至右遍历整个模式串，其各个子串的前缀后缀分别如下表格所示： <img src=\"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%B0%8F%E7%BB%93/0001.jpg\" alt=\"\"><img src=\"/Review/dataStructure/0001.jpg\"></li>\n</ul>\n<p>也就是说，原模式串子串对应的各个前缀后缀的公共元素的最大长度表为：<br>\n<img src=\"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%B0%8F%E7%BB%93/0002.jpg\" alt=\"\"><img src=\"/Review/dataStructure/0002.jpg\"></p>\n</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GetNext</span><span class=\"params\">(<span class=\"keyword\">char</span>* p,<span class=\"keyword\">int</span> next[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pLen = <span class=\"built_in\">strlen</span>(p);</span><br><span class=\"line\">\tnext[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (j &lt; pLen - <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//p[k]表示前缀，p[j]表示后缀</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (k == <span class=\"number\">-1</span> || p[j] == p[k])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t++k;</span><br><span class=\"line\">\t\t\t++j;</span><br><span class=\"line\">\t\t\tnext[j] = k;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tk = next[k];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"波兰式-逆波兰式实现\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#波兰式-逆波兰式实现\"></a> 波兰式、逆波兰式实现<a href=\"Review/dataStructure#波兰式-逆波兰式实现\"></a></h2>\n<h3 id=\"简单技巧\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#简单技巧\"></a> 简单技巧：<a href=\"Review/dataStructure#简单技巧\"></a></h3>\n<p>中序表达式转后序表式式：</p>\n<pre><code>将中序表达式所有括号补全，然后将所有运算符向右移出无匹配的第一个右括号，去掉括号即为后序表式式\n</code></pre>\n<p>举例：<br>\n​\t原式：a+b*(c+d/e)<br>\n​\t补全括号：(a+(b*(c+(d/e))))<br>\n​\t操作符右移：(a(b(c(de)/)+)<em>)+<br>\n​\t去掉括号：abcde/+</em>+</p>\n<p>中序表达式转前序表式式：</p>\n<pre><code>将中序表达式所有括号补全，然后将所有运算符向左移出无匹配的第一个左括号，去掉括号即为前序表式式\n</code></pre>\n<p>举例：<br>\n​    原式：a+b*(c+d/e)<br>\n​    补全括号：(a+(b*(c+(d/e))))<br>\n​    操作符右移：+(a*(b+(c/(de))))<br>\n​    去掉括号：+a*b+c/de</p>\n<h3 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#算法\"></a> 算法：<a href=\"Review/dataStructure#算法\"></a></h3>\n<p>利用运算符栈(OPTR)和数据栈(OPND)将中缀表达式转化为后缀表达式。</p>\n<p>将结束标志字符’#’放入操作符栈（OPTR）；<br>\n从中缀表达式pre左端依次读取pre[i]：</p>\n<pre><code>1.若pre[i]为操作数，压入数据栈（OPND）；\n2.若pre[i]为左括号，压入操作符栈（OPTR）；\n3.若pre[i]为右括号，则将操作符栈（OPTR）中的运算符依次出栈并压入数据栈（OPND），直到遇到左括号为止，但是该左括号出栈但不压入数据栈（OPND）\n4.若pre[i]为操作符:\n（1）若操作符栈（OPTR）为空，将此操作符pre[i]压入数据栈（OPND）；\n（2）若pre[i]的优先级大于操作符栈（OPTR）顶的优先级，将此操作符pre[i]压入数据栈（OPND）；\n（3）若操作符栈（OPTR）不为空且pre[i]的优先级小于等于操作符栈（OPTR）顶的优先级，将操作符栈（OPTR）中的运算符依次出栈并压入数据栈（OPND），直到不满足条件，此操作符pre[i]压入数据栈（OPND）\n</code></pre>\n<p>直到遍历完整个中序表达式之后，操作符栈（OPTR）中仍然存在运算符，那么将这些运算符依次出栈加入到数据栈（OPND）中，直到栈为空。</p>\n<p>按照上述步骤完成后，将操作符栈（OPTR）逆序即可得到逆波兰表达式。</p>\n<h3 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#实现\"></a> 实现<a href=\"Review/dataStructure#实现\"></a></h3>\n<pre><code><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//把中缀表达式转换为后缀表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">postfix</span><span class=\"params\">(<span class=\"keyword\">char</span> pre[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">char</span>&gt; OPTR; <span class=\"comment\">//运算符栈</span></span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">char</span>&gt; OPND; <span class=\"comment\">//数据栈</span></span><br><span class=\"line\">    OPTR.push(<span class=\"string\">'#'</span>); <span class=\"comment\">// 首先把结束标志‘#’放入栈底</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pre[i]!=<span class=\"string\">'#'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((pre[i]&gt;=<span class=\"string\">'a'</span> &amp;&amp; pre[i] &lt;=<span class=\"string\">'z'</span>)) <span class=\"comment\">// 遇到点直接写入后缀表达式</span></span><br><span class=\"line\">        &#123; OPND.push(pre[i]); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pre[i]==<span class=\"string\">'('</span>) <span class=\"comment\">// 遇到“（”不用比较直接入栈</span></span><br><span class=\"line\">            OPTR.push(pre[i]); <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pre[i] ==<span class=\"string\">')'</span>) <span class=\"comment\">// 遇到右括号将其对应左括号后的操作符（操作符栈中的）全部写入后缀表达式</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(OPTR.top()!=<span class=\"string\">'('</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                OPND.push(OPTR.top()); OPTR.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            OPTR.pop(); <span class=\"comment\">// 将“（”出栈，后缀表达式中不含小括号 &#125;</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isoperator(pre[i]))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(!OPTR.empty() &amp;&amp; priority(pre[i]) &lt;= priority(OPTR.top()))</span><br><span class=\"line\">                &#123; <span class=\"comment\">// 当前的操作符小于等于栈顶操作符的优先级时，将栈顶操作符写入到后缀表达式，重复此过程</span></span><br><span class=\"line\">                    OPND.push(OPTR.top()); OPTR.pop();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                OPTR.push(pre[i]); <span class=\"comment\">// 当前操作符栈为空或者当前操作符优先级大于栈顶操作符的优先级，将该操作符入栈</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(OPTR.top() != <span class=\"string\">'#'</span>) <span class=\"comment\">// 将所有的操作符加入后缀表达式</span></span><br><span class=\"line\">        &#123; OPND.push(OPTR.top()); OPTR.pop(); &#125;</span><br><span class=\"line\">        OPTR.pop(); <span class=\"comment\">//利用操作符栈逆序即可得到后缀表达式</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!OPND.empty())</span><br><span class=\"line\">        &#123; OPTR.push(OPND.top()); OPND.pop(); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!OPTR.empty())</span><br><span class=\"line\">        &#123; <span class=\"built_in\">cout</span> &lt;&lt; OPTR.top(); OPTR.pop(); &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n</code></pre>\n<h2 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#二叉树\"></a> 二叉树<a href=\"Review/dataStructure#二叉树\"></a></h2>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    tree *root;</span><br><span class=\"line\">    Btree()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        root=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create_Btree</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Preorder</span><span class=\"params\">(tree *)</span></span>;                  <span class=\"comment\">//先序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inorder</span><span class=\"params\">(tree *)</span></span>;                   <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Postorder</span><span class=\"params\">(tree *)</span></span>;                 <span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display1</span><span class=\"params\">()</span> </span>&#123;Preorder(root); <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display2</span><span class=\"params\">()</span> </span>&#123;inorder(root);<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display3</span><span class=\"params\">()</span> </span>&#123;Postorder(root); <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(tree *)</span></span>;                      <span class=\"comment\">//计算二叉树的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findleaf</span><span class=\"params\">(tree *)</span></span>;                   <span class=\"comment\">//求二叉树叶子的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findnode</span><span class=\"params\">(tree *)</span></span>;                   <span class=\"comment\">//求二叉树中度数为1的结点数量,这是当初考数据结构时候的最后一道题目</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Btree::n=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Btree::m=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Btree::create_Btree(<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    tree *newnode=<span class=\"keyword\">new</span> tree;</span><br><span class=\"line\">    newnode-&gt;data=x;</span><br><span class=\"line\">    newnode-&gt;right=newnode-&gt;left=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        root=newnode;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree *back;</span><br><span class=\"line\">        tree *current=root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(current!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            back=current;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(current-&gt;data&gt;x)</span><br><span class=\"line\">                current=current-&gt;left;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                current=current-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(back-&gt;data&gt;x)</span><br><span class=\"line\">            back-&gt;left=newnode;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            back-&gt;right=newnode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Btree::count(tree *p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count(p-&gt;left)+count(p-&gt;right)+<span class=\"number\">1</span>;      <span class=\"comment\">//这是运用了函数嵌套即递归的方法。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Btree::Preorder(tree *temp)    <span class=\"comment\">//这是先序遍历二叉树，采用了递归的方法。</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;temp-&gt;data&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        Preorder(temp-&gt;left);</span><br><span class=\"line\">        Preorder(temp-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Btree::inorder(tree *temp)      <span class=\"comment\">//这是中序遍历二叉树，采用了递归的方法。</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        inorder(temp-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;temp-&gt;data&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        inorder(temp-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Btree::Postorder(tree *temp)     <span class=\"comment\">//这是后序遍历二叉树，采用了递归的方法。</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Postorder(temp-&gt;left);</span><br><span class=\"line\">        Postorder(temp-&gt;right);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;temp-&gt;data&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Btree::findleaf(tree *temp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp-&gt;left==<span class=\"literal\">NULL</span>&amp;&amp;temp-&gt;right==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span> n+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            findleaf(temp-&gt;left);</span><br><span class=\"line\">            findleaf(temp-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Btree::findnode(tree *temp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp-&gt;left!=<span class=\"literal\">NULL</span>&amp;&amp;temp-&gt;right!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            findnode(temp-&gt;left);</span><br><span class=\"line\">            findnode(temp-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp-&gt;left!=<span class=\"literal\">NULL</span>&amp;&amp;temp-&gt;right==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m+=<span class=\"number\">1</span>;</span><br><span class=\"line\">            findnode(temp-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp-&gt;left==<span class=\"literal\">NULL</span>&amp;&amp;temp-&gt;right!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m+=<span class=\"number\">1</span>;</span><br><span class=\"line\">            findnode(temp-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Btree A;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[]=&#123;<span class=\"number\">7</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">15</span>,<span class=\"number\">35</span>,<span class=\"number\">6</span>,<span class=\"number\">45</span>,<span class=\"number\">55</span>,<span class=\"number\">20</span>,<span class=\"number\">1</span>,<span class=\"number\">14</span>,<span class=\"number\">56</span>,<span class=\"number\">57</span>,<span class=\"number\">58</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k;</span><br><span class=\"line\">    k=<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>)/<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"建立排序二叉树顺序: \"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">array</span>[i]&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        A.create_Btree(<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"二叉树节点个数： \"</span>&lt;&lt;A.count(A.root)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"二叉树叶子个数：\"</span>&lt;&lt;A.findleaf(A.root)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"二叉树中度数为1的结点的数量为：\"</span>&lt;&lt;A.findnode(A.root)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"string\">\"先序遍历序列: \"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    A.display1();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"string\">\"中序遍历序列: \"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    A.display2();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"string\">\"后序遍历序列: \"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    A.display3();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"堆\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#堆\"></a> 堆<a href=\"Review/dataStructure#堆\"></a></h2>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"> <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxHeap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; heap;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">make_heap</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp; nums, <span class=\"keyword\">int</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; <span class=\"comment\">//构建堆</span></span><br><span class=\"line\">\t\theap.assign(nums.begin(), nums.end());</span><br><span class=\"line\">\t\tsize = s;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size / <span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t\t\tdown(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; <span class=\"comment\">//插入元素</span></span><br><span class=\"line\">\t\theap.push_back(num);</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t\tup(size - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; <span class=\"comment\">//删除元素</span></span><br><span class=\"line\">\t\tassert(size &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> result = heap[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\theap[<span class=\"number\">0</span>] = heap[size - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\theap.pop_back();</span><br><span class=\"line\">\t\tsize--;</span><br><span class=\"line\">\t\tdown(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">down</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tassert(index &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> temp = heap[index];</span><br><span class=\"line\">\t\tindex = index * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (index &lt; size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (index + <span class=\"number\">1</span> &lt; size &amp;&amp; heap[index] &lt; heap[index + <span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (heap[index] &lt; temp)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\theap[(index - <span class=\"number\">1</span>) / <span class=\"number\">2</span>] = heap[index];</span><br><span class=\"line\">\t\t\t\tindex = index * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\theap[(index - <span class=\"number\">1</span>) / <span class=\"number\">2</span>] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">up</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tassert(index &lt; size);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> temp = heap[index];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (index &gt; <span class=\"number\">0</span> &amp;&amp; temp &gt; heap[(index - <span class=\"number\">1</span>) / <span class=\"number\">2</span>])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\theap[index] = heap[(index - <span class=\"number\">1</span>) / <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t\tindex = (index - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\theap[index] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"胜者树\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#胜者树\"></a> 胜者树<a href=\"Review/dataStructure#胜者树\"></a></h2>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> K 10</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 65535</span></span><br><span class=\"line\"> <span class=\"keyword\">int</span> leaves[K+<span class=\"number\">1</span>];</span><br><span class=\"line\"> <span class=\"keyword\">int</span> successTree[K];</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* 对于单个内部节点进行调整 */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">adjust</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"number\">2</span> * i &lt; K)               <span class=\"comment\">/* 获取它的左孩子结点 */</span></span><br><span class=\"line\">         m = successTree[<span class=\"number\">2</span> * i];</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">         m = <span class=\"number\">2</span> * i - K + <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"number\">2</span>*i+<span class=\"number\">1</span>&lt;K)                 <span class=\"comment\">/* 获取它的右孩子节点 */</span></span><br><span class=\"line\">         n = successTree[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>];</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">         n = <span class=\"number\">2</span> * i + - K + <span class=\"number\">2</span>;</span><br><span class=\"line\">     successTree[i] = leaves[m] &gt; leaves[n] ? n : m; <span class=\"comment\">/* 进行胜负判定 */</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">/* 初始化叶子节点并对内部节点进行类似于堆的调整 */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initTree</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;K+<span class=\"number\">1</span>;i++)</span><br><span class=\"line\">         <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;leaves[i]);</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=K<span class=\"number\">-1</span>;i&gt;<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">         adjust(i);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">/* 自下而上对胜者树进行调整 */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">adjustToRoot</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> parent = (i + K - <span class=\"number\">1</span>) / <span class=\"number\">2</span>; <span class=\"comment\">/* 对从当前节点到根节点路径上的所有</span></span><br><span class=\"line\"><span class=\"comment\">                                    * 节点进行调整 */</span></span><br><span class=\"line\">     <span class=\"keyword\">while</span>(parent&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         adjust(parent);</span><br><span class=\"line\">         parent = parent / <span class=\"number\">2</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">     freopen(<span class=\"string\">\"in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">     initTree();</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;K+<span class=\"number\">1</span>;i++)      <span class=\"comment\">/* 每次用最大值替换掉冠军节点，并对树</span></span><br><span class=\"line\"><span class=\"comment\">                                  * 进行调整,最终得到升序排序的序列 */</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, leaves[successTree[<span class=\"number\">1</span>]]);</span><br><span class=\"line\">         leaves[successTree[<span class=\"number\">1</span>]]=MAX;</span><br><span class=\"line\">         adjustToRoot(successTree[<span class=\"number\">1</span>]);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"败者树\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#败者树\"></a> 败者树<a href=\"Review/dataStructure#败者树\"></a></h2>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> loserTree[K];               <span class=\"comment\">/* 存储中间节点值，下标0处存储冠军节点 */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> leaves[K+<span class=\"number\">1</span>];                <span class=\"comment\">/* 从下标1开始存储叶子节点值，下标0处存储一个最小值节点 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">adjust</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent=(i+K<span class=\"number\">-1</span>)/<span class=\"number\">2</span>;      <span class=\"comment\">/* 求出父节点的下标 */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(parent&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(leaves[i]&gt;leaves[loserTree[parent]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp=loserTree[parent];</span><br><span class=\"line\">            loserTree[parent]=i;</span><br><span class=\"line\">            <span class=\"comment\">/* i指向的是优胜者 */</span></span><br><span class=\"line\">            i= temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        parent = parent / <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    loserTree[<span class=\"number\">0</span>]=i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initLoserTree</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;K+<span class=\"number\">1</span>;i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;leaves[i]);</span><br><span class=\"line\">    leaves[<span class=\"number\">0</span>]=MIN;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;K;i++)</span><br><span class=\"line\">        loserTree[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=K;i&gt;<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        adjust(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"最小生成树\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#最小生成树\"></a> 最小生成树<a href=\"Review/dataStructure#最小生成树\"></a></h2>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> vertex[VertexNum];                                <span class=\"comment\">//顶点表</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> edges[VertexNum][VertexNum];                       <span class=\"comment\">//邻接矩阵,可看做边表</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,e;                                               <span class=\"comment\">//图中当前的顶点数和边数</span></span><br><span class=\"line\">&#125;MGraph;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u;                                                 <span class=\"comment\">//边的起始顶点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v;                                                 <span class=\"comment\">//边的终止顶点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> w;                                                 <span class=\"comment\">//边的权值</span></span><br><span class=\"line\">&#125;Edge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">kruskal</span><span class=\"params\">(MGraph G)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j,u1,v1,sn1,sn2,k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> vset[VertexNum];                                    <span class=\"comment\">//辅助数组，判定两个顶点是否连通</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> E[EdgeNum];                                         <span class=\"comment\">//存放所有的边</span></span><br><span class=\"line\">    k=<span class=\"number\">0</span>;                                                    <span class=\"comment\">//E数组的下标从0开始</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;G.n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;G.n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (G.edges[i][j]!=<span class=\"number\">0</span> &amp;&amp; G.edges[i][j]!=INF)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                E[k].u=i;</span><br><span class=\"line\">                E[k].v=j;</span><br><span class=\"line\">                E[k].w=G.edges[i][j];</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    heapsort(E,k,<span class=\"keyword\">sizeof</span>(E[<span class=\"number\">0</span>]));                            <span class=\"comment\">//堆排序，按权值从小到大排列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;G.n;i++)                                    <span class=\"comment\">//初始化辅助数组</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vset[i]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    k=<span class=\"number\">1</span>;                                                   <span class=\"comment\">//生成的边数，最后要刚好为总边数</span></span><br><span class=\"line\">    j=<span class=\"number\">0</span>;                                                   <span class=\"comment\">//E中的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k&lt;G.n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sn1=vset[E[j].u];</span><br><span class=\"line\">        sn2=vset[E[j].v];                                  <span class=\"comment\">//得到两顶点属于的集合编号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sn1!=sn2)                                      <span class=\"comment\">//不在同一集合编号内的话，把边加入最小生成树</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d ---&gt; %d, %d\"</span>,E[j].u,E[j].v,E[j].w);</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;G.n;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (vset[i]==sn2)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    vset[i]=sn1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单源最短路径Dijkstra算法实现.cpp : Defines the entry point for the console application.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 200</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Infinity 65535</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//边尾节点信息结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edgeNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">int</span> no;   <span class=\"comment\">//尾接点序号</span></span><br><span class=\"line\"> <span class=\"keyword\">int</span> cost;  <span class=\"comment\">//边权值</span></span><br><span class=\"line\"> edgeNode *next; <span class=\"comment\">//其下一条邻接边尾节点指针</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//节点信息结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">vexNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">char</span> info;  <span class=\"comment\">//节点名称</span></span><br><span class=\"line\"> edgeNode *link; <span class=\"comment\">//与其相连的边的尾节点链表指针</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Queue</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">int</span> no; <span class=\"comment\">//队列中节点序号</span></span><br><span class=\"line\"> <span class=\"keyword\">int</span> cost; <span class=\"comment\">//以此为尾节点的边的权值</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优先队列</span></span><br><span class=\"line\">Queue priQue[MAX];</span><br><span class=\"line\"><span class=\"comment\">//节点数组</span></span><br><span class=\"line\">vexNode adjlist[MAX];</span><br><span class=\"line\"><span class=\"comment\">//指定源点到节点i的最短路径花费</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> lowcost[MAX];</span><br><span class=\"line\"><span class=\"comment\">//指定源点到节点i路径中，节点i的前驱节点序号</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> parent[MAX];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建立图邻接表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createGraph</span><span class=\"params\">(vexNode *adjlist,<span class=\"keyword\">int</span> *parent,<span class=\"keyword\">int</span> * lowcost,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> n,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"请输入节点\"</span>&lt;&lt;i&lt;&lt;<span class=\"string\">\"的名称：\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cin</span>&gt;&gt;adjlist[i].info;</span><br><span class=\"line\">  adjlist[i].link = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  lowcost[i] = Infinity;</span><br><span class=\"line\">  parent[i] = i;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> edgeNode *p1;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> v1,v2;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=e;i++)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"请输入边\"</span>&lt;&lt;i&lt;&lt;<span class=\"string\">\"的起始节点与尾节点序号：\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cin</span>&gt;&gt;v1&gt;&gt;v2;</span><br><span class=\"line\">  p1 = (edgeNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(edgeNode));</span><br><span class=\"line\">  p1-&gt;no = v2;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"此边的权值：\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cin</span>&gt;&gt;p1-&gt;cost;</span><br><span class=\"line\">  p1-&gt;next = adjlist[v1].link;</span><br><span class=\"line\">  adjlist[v1].link = p1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//当插入节点到优先队列时，保持队列优先性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">keep_min_heap</span><span class=\"params\">(Queue *priQue,<span class=\"keyword\">int</span> &amp;num,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> l = <span class=\"number\">2</span>*k;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> r = <span class=\"number\">2</span>*k + <span class=\"number\">1</span>;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> smallest = k;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(l&lt;=num&amp;&amp;priQue[l].cost&lt;priQue[k].cost)</span><br><span class=\"line\">  smallest = l;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(r&lt;=num&amp;&amp;priQue[r].cost&lt;priQue[smallest].cost)</span><br><span class=\"line\">  smallest = r;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(smallest != k)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Queue temp = priQue[smallest];</span><br><span class=\"line\">  priQue[smallest] = priQue[k];</span><br><span class=\"line\">  priQue[k] = temp;</span><br><span class=\"line\">  keep_min_heap(priQue,num,smallest);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入节点到优先队列时并且保持队列优先性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heap_insert</span><span class=\"params\">(Queue *priQue,<span class=\"keyword\">int</span> &amp;num,<span class=\"keyword\">int</span> no,<span class=\"keyword\">int</span> cost)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> num +=<span class=\"number\">1</span>;</span><br><span class=\"line\"> priQue[num].no = no;</span><br><span class=\"line\"> priQue[num].cost = cost;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> i = num;</span><br><span class=\"line\"> <span class=\"keyword\">while</span>(i&gt;<span class=\"number\">1</span>&amp;&amp;priQue[i/<span class=\"number\">2</span>].cost&gt;priQue[i].cost)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Queue temp = priQue[i];</span><br><span class=\"line\">  priQue[i] = priQue[i/<span class=\"number\">2</span>];</span><br><span class=\"line\">  priQue[i/<span class=\"number\">2</span>] = temp;</span><br><span class=\"line\">  i = i/<span class=\"number\">2</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//取出优先队列的队头元素</span></span><br><span class=\"line\"><span class=\"function\">Queue <span class=\"title\">heap_extract_min</span><span class=\"params\">(Queue *priQue,<span class=\"keyword\">int</span> &amp;num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> priQue[<span class=\"number\">0</span>];</span><br><span class=\"line\"> Queue min = priQue[<span class=\"number\">1</span>];</span><br><span class=\"line\"> priQue[<span class=\"number\">1</span>] = priQue[num];</span><br><span class=\"line\"> num -=<span class=\"number\">1</span>;</span><br><span class=\"line\"> keep_min_heap(priQue,num,<span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印指定源点带序号为i的点的最短路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_it</span><span class=\"params\">(<span class=\"keyword\">int</span> *parent,vexNode *adjlist,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(parent[v] == v)</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"(\"</span>&lt;&lt;v&lt;&lt;<span class=\"string\">\":\"</span>&lt;&lt;adjlist[v].info&lt;&lt;<span class=\"string\">\") \"</span>;</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  print_it(parent,adjlist,parent[v]);</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"(\"</span>&lt;&lt;v&lt;&lt;<span class=\"string\">\":\"</span>&lt;&lt;adjlist[v].info&lt;&lt;<span class=\"string\">\") \"</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> _tmain(<span class=\"keyword\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cases;</span><br><span class=\"line\"> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"请输入案例的个数：\"</span>;</span><br><span class=\"line\"> <span class=\"built_in\">cin</span>&gt;&gt;cases;</span><br><span class=\"line\"> <span class=\"keyword\">while</span>(cases--)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n,e;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"请输入节点数：\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"请输入边数：\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cin</span>&gt;&gt;e;</span><br><span class=\"line\">  <span class=\"comment\">//队列中的元素，初始为0</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  <span class=\"comment\">//创建邻接表</span></span><br><span class=\"line\">  createGraph(adjlist,parent,lowcost,n,e);</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"从哪个节点开始：\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v0;</span><br><span class=\"line\">  <span class=\"built_in\">cin</span>&gt;&gt;v0;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> v =v0;</span><br><span class=\"line\">  lowcost[v0] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  Queue <span class=\"built_in\">queue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   edgeNode *p = adjlist[v0].link;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lowcost[v0] + p-&gt;cost&lt;lowcost[p-&gt;no])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     lowcost[p-&gt;no] = lowcost[v0] + p-&gt;cost;</span><br><span class=\"line\">     parent[p-&gt;no] = v0;</span><br><span class=\"line\">     heap_insert(priQue,num,p-&gt;no,lowcost[p-&gt;no]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p = p-&gt;next;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">queue</span> = heap_extract_min(priQue,num);</span><br><span class=\"line\">   v0 = <span class=\"built_in\">queue</span>.no;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   mincost = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"从点\"</span>&lt;&lt;adjlist[v].info&lt;&lt;<span class=\"string\">\"开始到\"</span>&lt;&lt;adjlist[i].info&lt;&lt;<span class=\"string\">\"的最短路径为：\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">   print_it(parent,adjlist,i);</span><br><span class=\"line\">   <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">   <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"距离为：\"</span>&lt;&lt;lowcost[i]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"aov\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#aov\"></a> AOV<a href=\"Review/dataStructure#aov\"></a></h2>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max 100</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">arcnode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> adjvex;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">arcnode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; arcnode;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertex;</span><br><span class=\"line\">\tarcnode *firstarc;</span><br><span class=\"line\">&#125; vexnode;</span><br><span class=\"line\">vexnode adjlist[max];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">creatadjlist</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tarcnode *ptr;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arcnum, vexnum, k, v1, v2;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"input vexnum and arcnum:\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d,%d\"</span>, &amp;vexnum, &amp;arcnum);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (k = <span class=\"number\">1</span>; k &lt;= vexnum; k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tadjlist[k].firstarc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tadjlist[k].vertex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (k = <span class=\"number\">1</span>; k &lt;= arcnum; k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"v1,v2=\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d,%d\"</span>, &amp;v1, &amp;v2);</span><br><span class=\"line\">\t\tptr = (arcnode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(arcnode));</span><br><span class=\"line\">\t\tptr-&gt;adjvex = v2;</span><br><span class=\"line\">\t\tptr-&gt;next = adjlist[v1].firstarc;</span><br><span class=\"line\">\t\tadjlist[v1].firstarc = ptr;</span><br><span class=\"line\">\t\tadjlist[v2].vertex++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> vexnum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">toposort(<span class=\"keyword\">int</span> n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> <span class=\"built_in\">queue</span>[max];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> front = <span class=\"number\">0</span>, rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> v, w, m;</span><br><span class=\"line\">\tarcnode *p;</span><br><span class=\"line\">\tm = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (v = <span class=\"number\">1</span>; v &lt;= n; v++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (adjlist[v].vertex == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\trear = (rear + <span class=\"number\">1</span>) % max;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">queue</span>[rear] = v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"the toposort:\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (front != rear)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfront = (front + <span class=\"number\">1</span>) % max;</span><br><span class=\"line\">\t\tv = <span class=\"built_in\">queue</span>[front];</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, v);</span><br><span class=\"line\">\t\tm++;</span><br><span class=\"line\">\t\tp = adjlist[v].firstarc;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tw = p-&gt;adjvex;</span><br><span class=\"line\">\t\t\tadjlist[w].vertex--;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (adjlist[w].vertex == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\trear = (rear + <span class=\"number\">1</span>) % max;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">queue</span>[rear] = w;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m &lt; n)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"the toposort is fail.\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tn = creatadjlist();</span><br><span class=\"line\">\ttoposort(n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"aoe\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#aoe\"></a> AOE<a href=\"Review/dataStructure#aoe\"></a></h2>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 100\t\t<span class=\"comment\">//顶点个数最大值</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXM 200\t\t<span class=\"comment\">//边数的最大值</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ArcNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> to, dur, no;\t<span class=\"comment\">//边的另一个顶点、持续时间、活动序号</span></span><br><span class=\"line\">\tArcNode *next;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;\t\t\t\t<span class=\"comment\">//顶点个数、边数</span></span><br><span class=\"line\">ArcNode *List1[MAXN];\t<span class=\"comment\">//每个顶点的边链表表头指针（出边表）</span></span><br><span class=\"line\">ArcNode *List2[MAXM];\t<span class=\"comment\">//每个顶点的边链表表头指针（入边表）</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> count1[MAXN];\t\t<span class=\"comment\">//各顶点的入度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> count2[MAXM];\t\t<span class=\"comment\">//各顶点的出度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Ee[MAXN];\t\t\t<span class=\"comment\">//各事件的最早可能开始时间</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> El[MAXN];\t\t\t<span class=\"comment\">//各事件的最迟允许开始时间</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> e[MAXM];\t\t\t<span class=\"comment\">//各活动的最早可能开始时间</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> L[MAXM];\t\t\t<span class=\"comment\">//各活动的最迟允许开始时间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">CriticalPath</span><span class=\"params\">()</span>\t\t<span class=\"comment\">//求关键路径</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//拓扑排序求Ee</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> top1 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tArcNode *temp1;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(Ee, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(Ee));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(count1[i] == <span class=\"number\">0</span>) &#123; count1[i] = top1; top1 = i; &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(top1 == <span class=\"number\">-1</span>) &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">\"Network has a cycle!\\n\"</span>); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tj = top1; top1 = count1[top1];</span><br><span class=\"line\">\t\t\ttemp1 = List1[j];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(temp1 != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tk = temp1-&gt;to;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(--count1[k] == <span class=\"number\">0</span>) &#123; count1[k] = top1; top1 = k; &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(Ee[j]+temp1-&gt;dur &gt; Ee[k]) Ee[k] = Ee[j] + temp1-&gt;dur;<span class=\"comment\">//有向边&lt;j, k&gt;</span></span><br><span class=\"line\">\t\t\t\ttemp1 = temp1-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//逆拓扑排序求El</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> top2 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tArcNode *temp2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tEl[i] = Ee[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(count2[i] == <span class=\"number\">0</span>) &#123; count2[i] = top2; top2 = i; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tj = top2; top2 = count2[top2];</span><br><span class=\"line\">\t\ttemp2 = List2[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(temp2 != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tk = temp2-&gt;to;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(--count2[k] == <span class=\"number\">0</span>) &#123; count2[k] = top2; top2 = k; &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(El[j]-temp2-&gt;dur &lt; El[k]) El[k] = El[j] - temp2-&gt;dur;<span class=\"comment\">//有向边&lt;k, j&gt;</span></span><br><span class=\"line\">\t\t\ttemp2 = temp2-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//求各活动的e[k]和L[k]</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(e, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(e)); <span class=\"built_in\">memset</span>(L, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(L));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"The Critical activities are:\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttemp1 = List1[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(temp1 != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tj = temp1-&gt;to; k = temp1-&gt;no;\t<span class=\"comment\">//有向边&lt;i, j&gt;</span></span><br><span class=\"line\">\t\t\te[k] = Ee[i]; L[k] = El[j] - temp1-&gt;dur;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(e[k] == L[k]) <span class=\"built_in\">printf</span>(<span class=\"string\">\"a%d : %d-&gt;%d\\n\"</span>, k, i, j);</span><br><span class=\"line\">\t\t\ttemp1 = temp1-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, u, v, w;\t<span class=\"comment\">//循环变量、边的起点和终点</span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;m);\t<span class=\"comment\">//读入顶点个数和边数</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(List1, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(List1)); <span class=\"built_in\">memset</span>(List2, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(List2));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(count1, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(count1)); <span class=\"built_in\">memset</span>(count2, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(count2));</span><br><span class=\"line\">\tArcNode *temp1, *temp2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; m; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;u, &amp;v, &amp;w);\t<span class=\"comment\">//读入边的起点和终点</span></span><br><span class=\"line\">\t\tcount1[v]++;</span><br><span class=\"line\">\t\ttemp1 = <span class=\"keyword\">new</span> ArcNode;\t\t\t<span class=\"comment\">//构造邻接表</span></span><br><span class=\"line\">\t\ttemp1-&gt;to = v; temp1-&gt;dur = w;</span><br><span class=\"line\">\t\ttemp1-&gt;no = i + <span class=\"number\">1</span>; temp1-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(List1[u] == <span class=\"literal\">NULL</span>) List1[u] = temp1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123; temp1-&gt;next = List1[u]; List1[u] = temp1; &#125;</span><br><span class=\"line\">\t\tcount2[u]++;</span><br><span class=\"line\">\t\ttemp2 = <span class=\"keyword\">new</span> ArcNode;\t\t\t<span class=\"comment\">//构造逆邻接表</span></span><br><span class=\"line\">\t\ttemp2-&gt;to = u; temp2-&gt;dur = w;</span><br><span class=\"line\">\t\ttemp2-&gt;no = i + <span class=\"number\">1</span>; temp2-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(List2[v] == <span class=\"literal\">NULL</span>) List2[v] = temp2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123; temp2-&gt;next = List2[v]; List2[v] = temp2; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tCriticalPath();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)\t\t\t\t<span class=\"comment\">//释放边链表上各边结点所占用的存储空间</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttemp1 = List1[i]; temp2 = List2[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(temp1 != <span class=\"literal\">NULL</span>) &#123; List1[i] = temp1-&gt;next; <span class=\"keyword\">delete</span> temp1; temp1 = List1[i]; &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(temp2 != <span class=\"literal\">NULL</span>) &#123; List2[i] = temp2-&gt;next; <span class=\"keyword\">delete</span> temp2; temp2 = List2[i]; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"图\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#图\"></a> 图<a href=\"Review/dataStructure#图\"></a></h2>\n<h3 id=\"邻接矩阵\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#邻接矩阵\"></a> 邻接矩阵<a href=\"Review/dataStructure#邻接矩阵\"></a></h3>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    邻接矩阵实现图的广搜和深搜</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> inf 1000000 <span class=\"comment\">//假设的无穷大</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> vertex_max_num 100  <span class=\"comment\">//设的最大顶点数</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v[vertex_max_num];<span class=\"comment\">//顶点名称</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> adj_matrix[vertex_max_num][vertex_max_num];<span class=\"comment\">//邻接矩阵</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v_num, arc_num;<span class=\"comment\">//顶点数，弧数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> kind;<span class=\"comment\">//图的种类,0有向图，1有向网，2无向图，3无向网</span></span><br><span class=\"line\">&#125;graph;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[vertex_max_num+<span class=\"number\">1</span>];<span class=\"comment\">//标志数组</span></span><br><span class=\"line\"><span class=\"comment\">//标志数组初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建有向图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dir_graph_create</span><span class=\"params\">(graph &amp;G)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入要创建的有向图的顶点数和弧数：\"</span>; <span class=\"built_in\">cin</span> &gt;&gt; G.v_num &gt;&gt; G.arc_num;</span><br><span class=\"line\">    <span class=\"comment\">//结点初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++) G.v[i] = i;<span class=\"comment\">//对结点编号</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= G.v_num; j++)</span><br><span class=\"line\">            G.adj_matrix[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请依次输入邻接可达的成对结点：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.arc_num; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v1, v2;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; v1 &gt;&gt; v2;</span><br><span class=\"line\">        G.adj_matrix[v1][v2] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建有向网（带权有向图）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dir_net_create</span><span class=\"params\">(graph &amp;G)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入要创建的有向网的顶点数和弧数：\"</span>; <span class=\"built_in\">cin</span> &gt;&gt; G.v_num &gt;&gt; G.arc_num;</span><br><span class=\"line\">    <span class=\"comment\">//结点初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++) G.v[i] = i;<span class=\"comment\">//对结点编号</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= G.v_num; j++)</span><br><span class=\"line\">            G.adj_matrix[i][j] = inf;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请依次输入邻接可达的成对结点及弧长：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.arc_num; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v1, v2,w;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; w;</span><br><span class=\"line\">        G.adj_matrix[v1][v2] = w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建无向图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">udir_graph_create</span><span class=\"params\">(graph &amp;G)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入要创建的无向图的顶点数和弧数：\"</span>; <span class=\"built_in\">cin</span> &gt;&gt; G.v_num &gt;&gt; G.arc_num;</span><br><span class=\"line\">    <span class=\"comment\">//结点初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++) G.v[i] = i;<span class=\"comment\">//对结点编号</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= G.v_num; j++)</span><br><span class=\"line\">            G.adj_matrix[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请依次输入邻接的成对结点：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.arc_num; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v1, v2;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; v1 &gt;&gt; v2;</span><br><span class=\"line\">        G.adj_matrix[v1][v2] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        G.adj_matrix[v2][v1] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建无向网（带权无向图）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">udir_net_create</span><span class=\"params\">(graph &amp;G)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入要创建的无向网的顶点数和弧数：\"</span>; <span class=\"built_in\">cin</span> &gt;&gt; G.v_num &gt;&gt; G.arc_num;</span><br><span class=\"line\">    <span class=\"comment\">//结点初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++) G.v[i] = i;<span class=\"comment\">//对结点编号</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= G.v_num; j++)</span><br><span class=\"line\">            G.adj_matrix[i][j] = inf;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请依次输入邻接的成对结点及弧长：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.arc_num; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v1, v2, w;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; w;</span><br><span class=\"line\">        G.adj_matrix[v1][v2] = w;</span><br><span class=\"line\">        G.adj_matrix[v2][v1] = w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">graph_create</span><span class=\"params\">(graph &amp;G)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"************\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"0-----有向图\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1-----有向网\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"2-----无向图\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"3-----无向网\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"************\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"根据上方菜单，输入相应数字，来创建你想要类型的图\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; G.kind;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (G.kind) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:dir_graph_create(G); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:dir_net_create(G); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:udir_graph_create(G); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:udir_net_create(G); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//图深度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(graph G, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!vis[v]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; G.v[v]&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!vis[i] &amp;&amp; G.adj_matrix[v][i]==<span class=\"number\">1</span>)</span><br><span class=\"line\">            dfs1(G, i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//网深度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(graph G, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!vis[v]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; G.v[v]&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!vis[i] &amp;&amp; G.adj_matrix[v][i] != inf)</span><br><span class=\"line\">            dfs2(G, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//深度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(graph G, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"深度优先遍历结果：\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (G.kind) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:dfs1(G, v); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:dfs2(G, v); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//广度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(graph G, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"广度优先遍历结果：\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;que;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!vis[v]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; G.v[v] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        que.push(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!que.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> vertex = que.front();</span><br><span class=\"line\">        que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!vis[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((G.kind == <span class=\"number\">0</span> || G.kind == <span class=\"number\">2</span>) &amp;&amp; G.adj_matrix[vertex][i] == <span class=\"number\">1</span>) ||</span><br><span class=\"line\">                    ((G.kind==<span class=\"number\">1</span> || G.kind==<span class=\"number\">3</span>) &amp;&amp; G.adj_matrix[vertex][i]!=inf)) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">cout</span> &lt;&lt; G.v[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">                    vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    que.push(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"邻接表\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#邻接表\"></a> 邻接表<a href=\"Review/dataStructure#邻接表\"></a></h3>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> vertex_max = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> vertex_type;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//边</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge_node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vertex;<span class=\"comment\">//边所指向的结点编号</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge_node</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//下一条边</span></span><br><span class=\"line\">&#125;edge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结点</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">vertex_node</span> &#123;</span></span><br><span class=\"line\">    vertex_type e;<span class=\"comment\">//结点名字</span></span><br><span class=\"line\">    edge *side;</span><br><span class=\"line\">&#125;vertex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span> &#123;</span></span><br><span class=\"line\">    vertex adj_list[vertex_max+<span class=\"number\">1</span>];<span class=\"comment\">//邻接表</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> w[vertex_max+<span class=\"number\">1</span>][vertex_max + <span class=\"number\">1</span>];<span class=\"comment\">//边权重</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v_num, e_num;<span class=\"comment\">//结点数、边数</span></span><br><span class=\"line\">&#125;graph;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[vertex_max + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建立图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">graph_create</span><span class=\"params\">(graph &amp;G)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入要创建的图的结点数和边数：\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; G.v_num &gt;&gt; G.e_num;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"========================================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"结点信息如下\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第\"</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\"个结点是\"</span>; <span class=\"built_in\">cin</span> &gt;&gt; G.adj_list[i].e;</span><br><span class=\"line\">        G.adj_list[i].side = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"========================================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"边信息如下\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.e_num; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入第\"</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\"条边相连的两个结点编号及边的权重：\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x, y,weight;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; weight;</span><br><span class=\"line\">        G.w[x][y] = G.w[y][x] = weight;</span><br><span class=\"line\">        edge *p_edge = <span class=\"keyword\">new</span> edge;</span><br><span class=\"line\">        edge *q_edge = <span class=\"keyword\">new</span> edge;</span><br><span class=\"line\">        p_edge-&gt;next = <span class=\"literal\">nullptr</span>; p_edge-&gt;vertex = y;</span><br><span class=\"line\">        q_edge-&gt;next = <span class=\"literal\">nullptr</span>; q_edge-&gt;vertex = x;</span><br><span class=\"line\">        edge *tmp1 = G.adj_list[x].side;</span><br><span class=\"line\">        edge *tmp2 = G.adj_list[y].side;</span><br><span class=\"line\">        <span class=\"comment\">//把x结点指向y结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmp1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tmp1-&gt;next == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            tmp1 = tmp1-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp1 == <span class=\"literal\">nullptr</span>) G.adj_list[x].side = p_edge;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tmp1-&gt;next = p_edge;</span><br><span class=\"line\">        <span class=\"comment\">//把y结点指向x结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmp2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tmp2-&gt;next == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            tmp2 = tmp2-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp2 == <span class=\"literal\">nullptr</span>) G.adj_list[y].side = q_edge;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tmp2-&gt;next = q_edge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印邻接表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">adj_list_print</span><span class=\"params\">(graph G)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; G.adj_list[i].e;</span><br><span class=\"line\">        edge *tmp = G.adj_list[i].side;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmp) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"→\"</span>&lt;&lt; G.adj_list[tmp-&gt;vertex].e;</span><br><span class=\"line\">            tmp = tmp-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//深搜（从某结点出发搜索）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(graph G, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!vis[v]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; G.adj_list[v].e &lt;&lt; <span class=\"string\">\" \"</span>; vis[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    edge *p = G.adj_list[v].side;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!vis[p-&gt;vertex]) dfs1(G, p-&gt;vertex);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//深搜（从各个结点出发搜索）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(graph G)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++) &#123;</span><br><span class=\"line\">        init();</span><br><span class=\"line\">        dfs1(G, i);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//广搜（从某个结点出发搜索）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs1</span><span class=\"params\">(graph G,<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        init();</span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;que;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!vis[i]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; G.adj_list[i].e &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">            que.push(i);</span><br><span class=\"line\">            vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!que.empty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ii = que.front();</span><br><span class=\"line\">            que.pop();</span><br><span class=\"line\">            edge *p = G.adj_list[ii].side;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[p-&gt;vertex]) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">cout</span> &lt;&lt; G.adj_list[p-&gt;vertex].e &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">                    que.push(p-&gt;vertex);</span><br><span class=\"line\">                    vis[p-&gt;vertex] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                p = p-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//广搜（从各个结点出发搜索）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(graph G)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= G.v_num; i++) &#123;</span><br><span class=\"line\">        bfs1(G, i);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"dijkstra算法\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#dijkstra算法\"></a> Dijkstra算法<a href=\"Review/dataStructure#dijkstra算法\"></a></h3>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatrixUDG</span> &#123;</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX    100</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF    (~(0x1&lt;&lt;31))        <span class=\"comment\">// 无穷大(即0X7FFFFFFF)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">char</span> mVexs[MAX];    <span class=\"comment\">// 顶点集合</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mVexNum;             <span class=\"comment\">// 顶点数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mEdgNum;             <span class=\"comment\">// 边数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mMatrix[MAX][MAX];   <span class=\"comment\">// 邻接矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"comment\">// 创建图(自己输入数据)</span></span><br><span class=\"line\">        MatrixUDG();</span><br><span class=\"line\">        <span class=\"comment\">// 创建图(用已提供的矩阵)</span></span><br><span class=\"line\">        <span class=\"comment\">//MatrixUDG(char vexs[], int vlen, char edges[][2], int elen);</span></span><br><span class=\"line\">        MatrixUDG(<span class=\"keyword\">char</span> vexs[], <span class=\"keyword\">int</span> vlen, <span class=\"keyword\">int</span> matrix[][<span class=\"number\">9</span>]);</span><br><span class=\"line\">        ~MatrixUDG();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 深度优先搜索遍历图</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFS</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 广度优先搜索（类似于树的层次遍历）</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// prim最小生成树(从start开始生成最小生成树)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">prim</span><span class=\"params\">(<span class=\"keyword\">int</span> start)</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 克鲁斯卡尔（Kruskal)最小生成树</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">kruskal</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// Dijkstra最短路径</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> vs, <span class=\"keyword\">int</span> vexs[], <span class=\"keyword\">int</span> dist[])</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 打印矩阵队列图</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"comment\">// 读取一个输入字符</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">readChar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 返回ch在mMatrix矩阵中的位置</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPosition</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 返回顶点v的第一个邻接顶点的索引，失败则返回-1</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">firstVertex</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 返回顶点v相对于w的下一个邻接顶点的索引，失败则返回-1</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nextVertex</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 深度优先搜索遍历图的递归实现</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFS</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> *visited)</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取图中的边</span></span><br><span class=\"line\">        <span class=\"function\">EData* <span class=\"title\">getEdges</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 对边按照权值大小进行排序(由小到大)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sortEdges</span><span class=\"params\">(EData* edges, <span class=\"keyword\">int</span> elen)</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取i的终点</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getEnd</span><span class=\"params\">(<span class=\"keyword\">int</span> vends[], <span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Dijkstra最短路径。</span></span><br><span class=\"line\"><span class=\"comment\"> * 即，统计图中\"顶点vs\"到其它各个顶点的最短路径。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\"> *       vs -- 起始顶点(start vertex)。即计算\"顶点vs\"到其它顶点的最短路径。</span></span><br><span class=\"line\"><span class=\"comment\"> *     prev -- 前驱顶点数组。即，prev[i]的值是\"顶点vs\"到\"顶点i\"的最短路径所经历的全部顶点中，位于\"顶点i\"之前的那个顶点。</span></span><br><span class=\"line\"><span class=\"comment\"> *     dist -- 长度数组。即，dist[i]是\"顶点vs\"到\"顶点i\"的最短路径的长度。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> MatrixUDG::dijkstra(<span class=\"keyword\">int</span> vs, <span class=\"keyword\">int</span> prev[], <span class=\"keyword\">int</span> dist[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j,k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag[MAX];      <span class=\"comment\">// flag[i]=1表示\"顶点vs\"到\"顶点i\"的最短路径已成功获取。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; mVexNum; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag[i] = <span class=\"number\">0</span>;              <span class=\"comment\">// 顶点i的最短路径还没获取到。</span></span><br><span class=\"line\">        prev[i] = <span class=\"number\">0</span>;              <span class=\"comment\">// 顶点i的前驱顶点为0。</span></span><br><span class=\"line\">        dist[i] = mMatrix[vs][i]; <span class=\"comment\">// 顶点i的最短路径为\"顶点vs\"到\"顶点i\"的权。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对\"顶点vs\"自身进行初始化</span></span><br><span class=\"line\">    flag[vs] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dist[vs] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历mVexNum-1次；每次找出一个顶点的最短路径。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; mVexNum; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 寻找当前最小的路径；</span></span><br><span class=\"line\">        <span class=\"comment\">// 即，在未获取最短路径的顶点中，找到离vs最近的顶点(k)。</span></span><br><span class=\"line\">        min = INF;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; mVexNum; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag[j]==<span class=\"number\">0</span> &amp;&amp; dist[j]&lt;min)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                min = dist[j];</span><br><span class=\"line\">                k = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 标记\"顶点k\"为已经获取到最短路径</span></span><br><span class=\"line\">        flag[k] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 修正当前最短路径和前驱顶点</span></span><br><span class=\"line\">        <span class=\"comment\">// 即，当已经\"顶点k的最短路径\"之后，更新\"未获取最短路径的顶点的最短路径和前驱顶点\"。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; mVexNum; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp = (mMatrix[k][j]==INF ? INF : (min + mMatrix[k][j]));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag[j] == <span class=\"number\">0</span> &amp;&amp; (tmp  &lt; dist[j]) )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dist[j] = tmp;</span><br><span class=\"line\">                prev[j] = k;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印dijkstra最短路径的结果</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"dijkstra(\"</span> &lt;&lt; mVexs[vs] &lt;&lt; <span class=\"string\">\"): \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; mVexNum; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"  shortest(\"</span> &lt;&lt; mVexs[vs] &lt;&lt; <span class=\"string\">\", \"</span> &lt;&lt; mVexs[i] &lt;&lt; <span class=\"string\">\")=\"</span> &lt;&lt; dist[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"归并排序递归\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#归并排序递归\"></a> 归并排序（递归）<a href=\"Review/dataStructure#归并排序递归\"></a></h2>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 归并排序_递归.cpp:</span></span><br><span class=\"line\"><span class=\"comment\">// 以数组为例子</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在原始数组上进行操作，将前后两个有序序列合并到一个临时数组中，并将合并后的数组复制给原始数组arr</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> middle, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, k;</span><br><span class=\"line\">\ti = low; <span class=\"comment\">// low为第一个有序区的第一个元素</span></span><br><span class=\"line\">\tj = middle + <span class=\"number\">1</span>; <span class=\"comment\">// middle+1为第二个有序区的第一个元素</span></span><br><span class=\"line\">\tk = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *temp = <span class=\"keyword\">new</span>(nothrow) <span class=\"keyword\">int</span>[high - low + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!temp)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"内存分配失败！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 依次比较两个有序序列的第一个元素，将较小的一方存放到temp数组中</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt;= middle &amp;&amp; j &lt;= high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] &lt; arr[j])</span><br><span class=\"line\">\t\t\ttemp[k++] = arr[i++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\ttemp[k++] = arr[j++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt;= middle)</span><br><span class=\"line\">\t\ttemp[k++] = arr[i++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (j &lt;= high)</span><br><span class=\"line\">\t\ttemp[k++] = arr[j++];</span><br><span class=\"line\">\t<span class=\"comment\">// 将排好序的存回arr中low到high该区间内</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = low, k = <span class=\"number\">0</span>; i &lt;= high; i++, k++)</span><br><span class=\"line\">\t\tarr[i] = temp[k];</span><br><span class=\"line\">\t<span class=\"comment\">// 删除指针，由于指向的是数组，必须用delete []</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[]temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 用递归应用二路归并函数实现排序——分治法</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (low &lt; high)  <span class=\"comment\">//（是if，不是while！，且不含等号！否则死循环！）</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tmergeSort(arr, low, mid);</span><br><span class=\"line\">\t\tmergeSort(arr, mid + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">\t\tmerge(arr, low, mid, high);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x[] = &#123; <span class=\"number\">-3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">-7</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(x) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>);</span><br><span class=\"line\">\tmergeSort(x, <span class=\"number\">0</span>, n<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">8</span>; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; x[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"k路归并\"><a class=\"markdownIt-Anchor\" href=\"Review/dataStructure#k路归并\"></a> k路归并<a href=\"Review/dataStructure#k路归并\"></a></h2>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt; <span class=\"title\">class</span> <span class=\"title\">MinHeap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    MinHeap();</span><br><span class=\"line\">    MinHeap(<span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> size);</span><br><span class=\"line\">    ~MinHeap();</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get_min</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete_min</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert_element</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; e)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">adjust_min_heap</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> i)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> get_heap_size() <span class=\"keyword\">const</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; t1,<span class=\"keyword\">const</span> T&amp; t2)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T *heap;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> heap_size;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">MinHeap</span>&lt;T&gt;:</span>:MinHeap():heap(<span class=\"literal\">NULL</span>),heap_size(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">MinHeap</span>&lt;T&gt;:</span>:MinHeap(<span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!heap)</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] heap;</span><br><span class=\"line\">    heap = <span class=\"keyword\">new</span> T[size+<span class=\"number\">1</span>];</span><br><span class=\"line\">    heap_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">MinHeap</span>&lt;T&gt;:</span>:~MinHeap()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!heap)</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] heap;</span><br><span class=\"line\">    heap_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">T</span> <span class=\"title\">MinHeap</span>&lt;T&gt;:</span>:get_min() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(heap_size &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> heap[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> T();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">MinHeap</span>&lt;T&gt;:</span>:delete_min()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(heap_size &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        heap[<span class=\"number\">1</span>] = heap[heap_size];</span><br><span class=\"line\">        heap_size = heap_size - <span class=\"number\">1</span>;</span><br><span class=\"line\">        adjust_min_heap(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Error: the min heap is empty\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">MinHeap</span>&lt;T&gt;:</span>:insert_element(<span class=\"keyword\">const</span> T&amp; e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> i,parent;</span><br><span class=\"line\">    T temp;</span><br><span class=\"line\">    heap_size = heap_size + <span class=\"number\">1</span>;</span><br><span class=\"line\">    heap[heap_size] = e;</span><br><span class=\"line\">    i = heap_size;</span><br><span class=\"line\">    parent = i/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&gt;<span class=\"number\">1</span> &amp;&amp; compare(heap[parent],heap[i]) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        temp = heap[parent];</span><br><span class=\"line\">        heap[parent] = heap[i];</span><br><span class=\"line\">        heap[i] = temp;</span><br><span class=\"line\">        i = parent;</span><br><span class=\"line\">        parent = i/<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">MinHeap</span>&lt;T&gt;:</span>:adjust_min_heap(<span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> left,right,least;</span><br><span class=\"line\">    T temp;</span><br><span class=\"line\">    left = i*<span class=\"number\">2</span>;</span><br><span class=\"line\">    right = i*<span class=\"number\">2</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left &lt;= heap_size &amp;&amp; compare(heap[left],heap[i]) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        least = left;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        least = i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(right &lt;= heap_size &amp;&amp; compare(heap[right],heap[least]) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        least = right;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(least != i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        temp = heap[least];</span><br><span class=\"line\">        heap[least] = heap[i];</span><br><span class=\"line\">        heap[i] = temp;</span><br><span class=\"line\">        adjust_min_heap(least);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">size_t</span> <span class=\"title\">MinHeap</span>&lt;T&gt;:</span>:get_heap_size() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> heap_size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">int</span> <span class=\"title\">MinHeap</span>&lt;T&gt;:</span>:compare(<span class=\"keyword\">const</span> T&amp; t1,<span class=\"keyword\">const</span> T&amp; t2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*t1-*t2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> k = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; lists[k];</span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator iters[k];</span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; retlist;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator retiter;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator iter;</span><br><span class=\"line\">    MinHeap&lt;<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator&gt; minheap(k);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//first list &lt;12,24,52&gt;</span></span><br><span class=\"line\">    lists[<span class=\"number\">0</span>].push_back(<span class=\"number\">12</span>);</span><br><span class=\"line\">    lists[<span class=\"number\">0</span>].push_back(<span class=\"number\">24</span>);</span><br><span class=\"line\">    lists[<span class=\"number\">0</span>].push_back(<span class=\"number\">52</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"First list: \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(iter=lists[<span class=\"number\">0</span>].begin();iter != lists[<span class=\"number\">0</span>].end();++iter)</span><br><span class=\"line\">          <span class=\"built_in\">cout</span>&lt;&lt;*iter&lt;&lt;<span class=\"string\">\"-&gt;\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NULL\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//second list &lt;9,32&gt;</span></span><br><span class=\"line\">    lists[<span class=\"number\">1</span>].push_back(<span class=\"number\">9</span>);</span><br><span class=\"line\">    lists[<span class=\"number\">1</span>].push_back(<span class=\"number\">32</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Second list: \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(iter=lists[<span class=\"number\">1</span>].begin();iter != lists[<span class=\"number\">1</span>].end();++iter)</span><br><span class=\"line\">          <span class=\"built_in\">cout</span>&lt;&lt;*iter&lt;&lt;<span class=\"string\">\"-&gt;\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NULL\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//third list &lt;34,42,78&gt;</span></span><br><span class=\"line\">    lists[<span class=\"number\">2</span>].push_back(<span class=\"number\">34</span>);</span><br><span class=\"line\">    lists[<span class=\"number\">2</span>].push_back(<span class=\"number\">42</span>);</span><br><span class=\"line\">    lists[<span class=\"number\">2</span>].push_back(<span class=\"number\">78</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Third list: \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(iter=lists[<span class=\"number\">2</span>].begin();iter != lists[<span class=\"number\">2</span>].end();++iter)</span><br><span class=\"line\">          <span class=\"built_in\">cout</span>&lt;&lt;*iter&lt;&lt;<span class=\"string\">\"-&gt;\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NULL\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    iters[<span class=\"number\">0</span>] = lists[<span class=\"number\">0</span>].begin();</span><br><span class=\"line\">    iters[<span class=\"number\">1</span>] = lists[<span class=\"number\">1</span>].begin();</span><br><span class=\"line\">    iters[<span class=\"number\">2</span>] = lists[<span class=\"number\">2</span>].begin();</span><br><span class=\"line\"></span><br><span class=\"line\">    minheap.insert_element(iters[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    minheap.insert_element(iters[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    minheap.insert_element(iters[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(minheap.get_heap_size())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        iter = minheap.get_min() ;</span><br><span class=\"line\">        retlist.push_back(*iter);</span><br><span class=\"line\">        minheap.delete_min();</span><br><span class=\"line\">        ++iter;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(iter != lists[<span class=\"number\">0</span>].end() &amp;&amp; iter != lists[<span class=\"number\">1</span>].end()</span><br><span class=\"line\">           &amp;&amp;iter != lists[<span class=\"number\">2</span>].end())</span><br><span class=\"line\">            minheap.insert_element(iter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Merge the there list is: \"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(retiter = retlist.begin();retiter!= retlist.end();retiter++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;*retiter&lt;&lt;<span class=\"string\">\"-&gt;\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"NULL\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>Hanyuu Furude @ 2019 all right saved.</p>\n","prev":{"title":"Java 复习提纲","link":"Review/Java"},"next":{"title":"Latex","link":"Others/Latex"},"plink":"ilucia.github.io/Review/dataStructure/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 性能度量","id":"性能度量","index":"1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 时间复杂度","id":"时间复杂度","index":"1.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 空间复杂度","id":"空间复杂度","index":"1.2"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 数组","id":"数组","index":"2","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 顺序表","id":"顺序表","index":"2.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 稀疏矩阵","id":"稀疏矩阵","index":"2.2"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 字符串匹配算法","id":"字符串匹配算法","index":"3","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 1. 暴力匹配法","id":"1-暴力匹配法","index":"3.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 2.KMP算法","id":"2kmp算法","index":"3.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 解释","id":"解释","index":"3.3"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 波兰式、逆波兰式实现","id":"波兰式-逆波兰式实现","index":"4","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 简单技巧：","id":"简单技巧","index":"4.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 算法：","id":"算法","index":"4.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 实现","id":"实现","index":"4.3"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 二叉树","id":"二叉树","index":"5"},{"title":"<a class=\"markdownIt-Anchor\"></a> 堆","id":"堆","index":"6"},{"title":"<a class=\"markdownIt-Anchor\"></a> 胜者树","id":"胜者树","index":"7"},{"title":"<a class=\"markdownIt-Anchor\"></a> 败者树","id":"败者树","index":"8"},{"title":"<a class=\"markdownIt-Anchor\"></a> 最小生成树","id":"最小生成树","index":"9"},{"title":"<a class=\"markdownIt-Anchor\"></a> AOV","id":"aov","index":"10"},{"title":"<a class=\"markdownIt-Anchor\"></a> AOE","id":"aoe","index":"11"},{"title":"<a class=\"markdownIt-Anchor\"></a> 图","id":"图","index":"12","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 邻接矩阵","id":"邻接矩阵","index":"12.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 邻接表","id":"邻接表","index":"12.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> Dijkstra算法","id":"dijkstra算法","index":"12.3"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 归并排序（递归）","id":"归并排序递归","index":"13"},{"title":"<a class=\"markdownIt-Anchor\"></a> k路归并","id":"k路归并","index":"14"}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2019年1月8日","updated":"2022年4月27日"}}