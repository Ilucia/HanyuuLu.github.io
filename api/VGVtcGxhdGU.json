{"title":"Python进程池、线程池和进程间通信实践参考","date":"2021-08-21T00:00:00.000Z","link":"Template","tags":["Python","multprocessing","multthreading"],"updated":"2022-04-27T15:24:01.715Z","content":"<h2 id=\"业务需求\"><a class=\"markdownIt-Anchor\" href=\"Template#业务需求\"></a> 业务需求<a href=\"Template#业务需求\"></a></h2>\n<p>业务中有一个计算量比较大的、可以并行执行的操作，为了提升资源利用率，故考虑多进程分配。</p>\n<p>性能：多线程&lt;线程池&lt;多进程&lt;进程池</p>\n<blockquote>\n<p>在Windows中创建一个进程耗费的时间以秒计算，故要避免频繁的进程创建销毁</p>\n</blockquote>\n<h3 id=\"业务流程\"><a class=\"markdownIt-Anchor\" href=\"Template#业务流程\"></a> 业务流程<a href=\"Template#业务流程\"></a></h3>\n<ul>\n<li>一个数据产生源，串行产生数据，速度快</li>\n<li>数据源产生的数据需要比较长的时间进行计算才能得到结果</li>\n<li>所有结果要汇总起来进行过滤和处理最终发放下游服务器</li>\n</ul>\n<h3 id=\"结构设计\"><a class=\"markdownIt-Anchor\" href=\"Template#结构设计\"></a> 结构设计<a href=\"Template#结构设计\"></a></h3>\n<ul>\n<li>每个核心分配一个处理进程、附加两个低资源占用低工作进程负责产生数据和发送数据</li>\n<li>使用阻塞式的多进程间队列\n<ul>\n<li>当任务队列满时数据产生进程阻塞暂时不产生数据（处理不及时）</li>\n<li>当结果队列满时数据处理队列阻塞不产生数据（网络问题或故障）\n<ul>\n<li>网络请求使用多线程发送，避免过多资源占用低同时保证请求异步不阻塞</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>抽离业务代码的进程池和多线程设计代码如下</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送请求地址</span></span><br><span class=\"line\">CONNECTION_URL = <span class=\"string\">'url:'</span></span><br><span class=\"line\"><span class=\"comment\"># CPU核心数</span></span><br><span class=\"line\">CPU_COUNT = os.cpu_count()</span><br><span class=\"line\"><span class=\"comment\"># 工作进程数</span></span><br><span class=\"line\">PROC_COUNT = CPU_COUNT + <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送更新数据请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload</span><span class=\"params\">(msg: dict)</span>:</span></span><br><span class=\"line\">    r = requests.post(CONNECTION_URL, json=msg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多进程任务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process</span><span class=\"params\">(i, frameQueue, resQueue)</span>:</span> </span><br><span class=\"line\">    print(<span class=\"string\">f\"[proc <span class=\"subst\">&#123;i&#125;</span>] pid <span class=\"subst\">&#123;os.getpid()&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># fetch frame and push to work queqe</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\">#.do some work</span></span><br><span class=\"line\">        frame =.work()</span><br><span class=\"line\">      \tframeQueue.put(frame)</span><br><span class=\"line\">    <span class=\"comment\"># fetch result from resQueue and post it to server by multthreading</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            res = resQueue.get()</span><br><span class=\"line\">            <span class=\"comment\"># do some work</span></span><br><span class=\"line\">            data = work2(res)</span><br><span class=\"line\">            <span class=\"comment\"># 多线程发送请求</span></span><br><span class=\"line\">            threading.Thread(target=upload, args=(data,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># data processer process, cost many resources and require multprocessing to speed up</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            frame = frameQueue.get()</span><br><span class=\"line\">            res = work3(frame)</span><br><span class=\"line\">            resQueue.put(res)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">client</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">f\"Process :<span class=\"subst\">&#123;PROC_COUNT&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 进程池创建</span></span><br><span class=\"line\">    pool = multiprocessing.Pool(PROC_COUNT)</span><br><span class=\"line\">    <span class=\"comment\"># 任务队列</span></span><br><span class=\"line\">    frameQueue = multiprocessing.Manager().Queue(PROC_COUNT)</span><br><span class=\"line\">    <span class=\"comment\"># 结果队列</span></span><br><span class=\"line\">    resQueue = multiprocessing.Manager().Queue(PROC_COUNT)</span><br><span class=\"line\">    <span class=\"comment\"># 给进程池分配函数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(PROC_COUNT):</span><br><span class=\"line\">        pool.apply_async(</span><br><span class=\"line\">            process, (i, frameQueue, resQueue))</span><br><span class=\"line\">    <span class=\"comment\"># 关闭进程池不再接受新进程</span></span><br><span class=\"line\">    pool.close()</span><br><span class=\"line\">    <span class=\"comment\"># 阻塞主进程</span></span><br><span class=\"line\">    pool.join()</span><br><span class=\"line\">    print(<span class=\"string\">\"finish\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    client()</span><br></pre></td></tr></table></div></figure>\n","prev":{"title":"Maven/生命周期","link":"Maven/生命周期"},"next":{"title":"Spring生态学习笔记","link":"springLearn"},"plink":"ilucia.github.io/Template/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 业务需求","id":"业务需求","index":"1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 业务流程","id":"业务流程","index":"1.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 结构设计","id":"结构设计","index":"1.2"}]}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2021年8月21日","updated":"2022年4月27日"}}