{"title":"Tensorflow卷积和池化","date":"2019-01-30T10:49:28.000Z","link":"Tensorflow/TensorflowConvandPool","updated":"2022-04-27T15:24:01.715Z","content":"<h3 id=\"构建基于mnsit的多层卷积网络\"><a class=\"markdownIt-Anchor\" href=\"Tensorflow/TensorflowConvandPool#构建基于mnsit的多层卷积网络\"></a> 构建基于MNSIT的多层卷积网络<a href=\"Tensorflow/TensorflowConvandPool#构建基于mnsit的多层卷积网络\"></a></h3>\n<hr>\n<ul>\n<li><a href=\"MNIST_Conv&amp;Pool.py\">演示示例</a></li>\n<li>摘录自<a href=\"http://tensorfly.cn/tfdoc/tutorials/mnist_pros.html\" target=\"_blank\" rel=\"noopener\">TensorFlow中文社区</a></li>\n</ul>\n<h2 id=\"权重初始化\"><a class=\"markdownIt-Anchor\" href=\"Tensorflow/TensorflowConvandPool#权重初始化\"></a> 权重初始化<a href=\"Tensorflow/TensorflowConvandPool#权重初始化\"></a></h2>\n<blockquote>\n<p>为了创建这个模型，我们需要创建大量的权重和偏置项。这个模型中的权重在初始化时应该加入少量的噪声来打破对称性以及避免0梯度。由于我们使用的是ReLU神经元，因此比较好的做法是用一个较小的正数来初始化偏置项，以避免神经元节点输出恒为0的问题（dead neurons）。为了不在建立模型的时候反复做初始化操作，我们定义两个函数用于初始化。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">weight_variable</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">  initial = tf.truncated_normal(shape, stddev=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.Variable(initial)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bias_variable</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">  initial = tf.constant(<span class=\"number\">0.1</span>, shape=shape)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.Variable(initial)</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>【Ps】：tf.truncated_normal(shape, mean, stddev) :shape表示生成张量的维度，mean是均值，stddev是标准差。这个函数产生正太分布，均值和标准差自己设定。这是一个截断的产生正太分布的函数，就是说产生正太分布的值如果与均值的差值大于两倍的标准差，那就重新生成。和一般的正太分布的产生随机数据比起来，这个函数产生的随机数与均值的差距不会超过两倍的标准差，但是一般的别的函数是可能的。</li>\n<li>【From】：<a href=\"https://blog.csdn.net/UESTC_C2_403/article/details/72235565?utm_source=copy\" target=\"_blank\" rel=\"noopener\">CSDN</a></li>\n</ul>\n<h2 id=\"卷积和池化\"><a class=\"markdownIt-Anchor\" href=\"Tensorflow/TensorflowConvandPool#卷积和池化\"></a> 卷积和池化<a href=\"Tensorflow/TensorflowConvandPool#卷积和池化\"></a></h2>\n<blockquote>\n<p>TensorFlow在卷积和池化上有很强的灵活性。我们怎么处理边界？步长应该设多大？在这个实例里，我们会一直使用vanilla版本。我们的卷积使用1步长（stride size），0边距（padding size）的模板，保证输出和输入是同一个大小。我们的池化用简单传统的2x2大小的模板做max pooling。为了代码更简洁，我们把这部分抽象成一个函数。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">conv2d</span><span class=\"params\">(x, W)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.nn.conv2d(x, W, strides=[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], padding=<span class=\"string\">'SAME'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_pool_2x2</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tf.nn.max_pool(x, ksize=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>],strides=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], padding=<span class=\"string\">'SAME'</span>)</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"第一层卷积\"><a class=\"markdownIt-Anchor\" href=\"Tensorflow/TensorflowConvandPool#第一层卷积\"></a> 第一层卷积<a href=\"Tensorflow/TensorflowConvandPool#第一层卷积\"></a></h2>\n<blockquote>\n<p>现在我们可以开始实现第一层了。它由一个卷积接一个max pooling完成。卷积在每个5x5的patch中算出32个特征。卷积的权重张量形状是[5, 5, 1, 32]，前两个维度是patch的大小，接着是输入的通道数目，最后是输出的通道数目。 而对于每一个输出通道都有一个对应的偏置量。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W_conv1 = weight_variable([<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">32</span>])</span><br><span class=\"line\">b_conv1 = bias_variable([<span class=\"number\">32</span>])</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>为了用这一层，我们把x变成一个4d向量，其第2、第3维对应图片的宽、高，最后一维代表图片的颜色通道数(因为是灰度图所以这里的通道数为1，如果是rgb彩色图，则为3)。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_image = tf.reshape(x, [<span class=\"number\">-1</span>,<span class=\"number\">28</span>,<span class=\"number\">28</span>,<span class=\"number\">1</span>])</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>We then convolve x_image with the weight tensor, add the bias, apply the ReLU function, and finally max pool. 我们把x_image和权值向量进行卷积，加上偏置项，然后应用ReLU激活函数，最后进行max pooling。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</span><br><span class=\"line\">h_pool1 = max_pool_2x2(h_conv1)</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"第二层卷积\"><a class=\"markdownIt-Anchor\" href=\"Tensorflow/TensorflowConvandPool#第二层卷积\"></a> 第二层卷积<a href=\"Tensorflow/TensorflowConvandPool#第二层卷积\"></a></h2>\n<blockquote>\n<p>为了构建一个更深的网络，我们会把几个类似的层堆叠起来。第二层中，每个5x5的patch会得到64个特征。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W_conv2 = weight_variable([<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">64</span>])</span><br><span class=\"line\">b_conv2 = bias_variable([<span class=\"number\">64</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</span><br><span class=\"line\">h_pool2 = max_pool_2x2(h_conv2)</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"密集连接层\"><a class=\"markdownIt-Anchor\" href=\"Tensorflow/TensorflowConvandPool#密集连接层\"></a> 密集连接层<a href=\"Tensorflow/TensorflowConvandPool#密集连接层\"></a></h3>\n<p>现在，图片尺寸减小到7x7，我们加入一个有1024个神经元的全连接层，用于处理整个图片。我们把池化层输出的张量reshape成一些向量，乘上权重矩阵，加上偏置，然后对其使用ReLU。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W_fc1 = weight_variable([<span class=\"number\">7</span> * <span class=\"number\">7</span> * <span class=\"number\">64</span>, <span class=\"number\">1024</span>])</span><br><span class=\"line\">b_fc1 = bias_variable([<span class=\"number\">1024</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">h_pool2_flat = tf.reshape(h_pool2, [<span class=\"number\">-1</span>, <span class=\"number\">7</span>*<span class=\"number\">7</span>*<span class=\"number\">64</span>])</span><br><span class=\"line\">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"dropout\"><a class=\"markdownIt-Anchor\" href=\"Tensorflow/TensorflowConvandPool#dropout\"></a> Dropout<a href=\"Tensorflow/TensorflowConvandPool#dropout\"></a></h2>\n<blockquote>\n<p>为了减少过拟合，我们在输出层之前加入dropout。我们用一个placeholder来代表一个神经元的输出在dropout中保持不变的概率。这样我们可以在训练过程中启用dropout，在测试过程中关闭dropout。 TensorFlow的tf.nn.dropout操作除了可以屏蔽神经元的输出外，还会自动处理神经元输出值的scale。所以用dropout的时候可以不用考虑scale。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keep_prob = tf.placeholder(<span class=\"string\">\"float\"</span>)</span><br><span class=\"line\">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"输出层\"><a class=\"markdownIt-Anchor\" href=\"Tensorflow/TensorflowConvandPool#输出层\"></a> 输出层<a href=\"Tensorflow/TensorflowConvandPool#输出层\"></a></h2>\n<blockquote>\n<p>最后，我们添加一个softmax层，就像前面的单层softmax regression一样。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">W_fc2 = weight_variable([<span class=\"number\">1024</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">b_fc2 = bias_variable([<span class=\"number\">10</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"训练和评估模型\"><a class=\"markdownIt-Anchor\" href=\"Tensorflow/TensorflowConvandPool#训练和评估模型\"></a> 训练和评估模型<a href=\"Tensorflow/TensorflowConvandPool#训练和评估模型\"></a></h2>\n<blockquote>\n<p>为了进行训练和评估，我们使用与之前简单的单层SoftMax神经网络模型几乎相同的一套代码，只是我们会用更加复杂的ADAM优化器来做梯度最速下降，在feed_dict中加入额外的参数keep_prob来控制dropout比例。然后每100次迭代输出一次日志。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))</span><br><span class=\"line\">train_step = tf.train.AdamOptimizer(<span class=\"number\">1e-4</span>).minimize(cross_entropy)</span><br><span class=\"line\">correct_prediction = tf.equal(tf.argmax(y_conv,<span class=\"number\">1</span>), tf.argmax(y_,<span class=\"number\">1</span>))</span><br><span class=\"line\">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class=\"string\">\"float\"</span>))</span><br><span class=\"line\">sess.run(tf.initialize_all_variables())</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">20000</span>):</span><br><span class=\"line\">  batch = mnist.train.next_batch(<span class=\"number\">50</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> i%<span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">    train_accuracy = accuracy.eval(feed_dict=&#123;</span><br><span class=\"line\">        x:batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"step %d, training accuracy %g\"</span>%(i, train_accuracy)</span><br><span class=\"line\">  train_step.run(feed_dict=&#123;x: batch[<span class=\"number\">0</span>], y_: batch[<span class=\"number\">1</span>], keep_prob: <span class=\"number\">0.5</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"test accuracy %g\"</span>%accuracy.eval(feed_dict=&#123;</span><br><span class=\"line\">    x: mnist.test.images, y_: mnist.test.labels, keep_prob: <span class=\"number\">1.0</span>&#125;)</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>以上代码，在最终测试集上的准确率大概是99.2%。</p>\n</blockquote>\n","prev":{"title":"Python炼丹炉（maching learning）环境搭建常见问题","link":"python/Conda"},"next":{"title":"Tensorflow入坑试水","link":"Tensorflow/TensorflowLeadin"},"plink":"ilucia.github.io/Tensorflow/TensorflowConvandPool/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 权重初始化","id":"权重初始化","index":"1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 卷积和池化","id":"卷积和池化","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 第一层卷积","id":"第一层卷积","index":"3"},{"title":"<a class=\"markdownIt-Anchor\"></a> 第二层卷积","id":"第二层卷积","index":"4","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 密集连接层","id":"密集连接层","index":"4.1"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> Dropout","id":"dropout","index":"5"},{"title":"<a class=\"markdownIt-Anchor\"></a> 输出层","id":"输出层","index":"6"},{"title":"<a class=\"markdownIt-Anchor\"></a> 训练和评估模型","id":"训练和评估模型","index":"7"}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2019年1月30日","updated":"2022年4月27日"}}