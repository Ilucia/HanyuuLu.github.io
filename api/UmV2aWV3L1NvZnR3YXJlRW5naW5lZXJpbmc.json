{"title":"Software Engineering Review","date":"2019-01-13T13:16:18.000Z","link":"Review/SoftwareEngineering","tags":["review","software engineering"],"categories":["review"],"updated":"2022-04-27T15:24:01.659Z","content":"<h1 id=\"chapter-00-intorduction\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-00-intorduction\"></a> Chapter 00 Intorduction<a href=\"Review/SoftwareEngineering#chapter-00-intorduction\"></a></h1>\n<ul>\n<li>软件工程的概念、方法和技术：\n<ul>\n<li>软件工程基本概念（软件产品、软件过程、软件开发模型）</li>\n<li>软件工程开发方法和技术\n<ul>\n<li>传统的软件工程方法与技术</li>\n<li>面向对象的软件工程方法与技术</li>\n</ul>\n</li>\n<li>软件测试策略和技术</li>\n<li>软件项目管理</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-01-software-and-software-engineering\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-01-software-and-software-engineering\"></a> Chapter 01 Software and Software Engineering<a href=\"Review/SoftwareEngineering#chapter-01-software-and-software-engineering\"></a></h1>\n<ul>\n<li>\n<p>Software’s dual role</p>\n<ul>\n<li>Software is a <strong>product</strong> (软件即产品（服务）)\n<ul>\n<li>Transforms information - produces, manages, acquires, modifies, displays or transmits information;</li>\n<li>Delivers computing potential of hardwora and networks.</li>\n</ul>\n</li>\n<li>Software is a <strong>vehicle(载体)</strong> for delivering a product.</li>\n</ul>\n</li>\n<li>\n<p>Hardware &amp; Software</p>\n</li>\n<li>\n<p>wear out vs. Deterioration 软件老化和变质</p>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareEngineering/1547359380593.png\" alt=\"1547359380593\" class=\"article-img\"></p>\n</li>\n<li>\n<p>Component Based &amp; Custom Built</p>\n<ul>\n<li>The software industry dose seem to be moving (slowly) toward component-based construction.\\</li>\n</ul>\n</li>\n<li>\n<p>Software Complexity</p>\n<ul>\n<li><font color=\"red\"><strong>No Silver Bullet</strong> </font>(智力密集型没有最优解不可预估bug不可避免)</li>\n</ul>\n</li>\n<li>\n<blockquote>\n<p>Software changeability 软件可更改性</p>\n<ul>\n<li>It must be fixed to eliminate errors. 必须对其进行修复以消除错误。</li>\n<li>It must be enhanced to implement new functional and non-functional requirements 必须对其进行改进, 以实现新的功能和非功能要求</li>\n<li>Software must be adapted to meet the needs of new computing environments or technology.软件必须进行调整, 以满足新的计算环境或技术的需要。</li>\n<li>Software must be enhanced to implement new business requirements.必须增强软件以实现新的业务需求。</li>\n<li>Software must be extended to make it interoperable with other more modern systems or databases.软件必须进行扩展, 以使其可与其他更现代的系统或数据库进行互操作。</li>\n<li>Software must be re-architected to make it viable(切实可行的) within a network environment.必须重新构建软件, 使其在网络环境中可行。</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p>Software Evolution[Lehman定律]（记标题就行）</p>\n<ul>\n<li>The Law of Continuing Change [持续变化规律] (1974):  E-type systems must be continually adapted else they become progressively less satisfactory.</li>\n<li>The Law of Increasing Complexity [复杂性增长规律] (1974):  As an E-type system evolves its complexity increases unless work is done to maintain or reduce it.</li>\n<li>The Law of Self Regulation [自我调控规律] (1974):  The E-type system evolution process is self-regulating with distribution of product and process measures close to normal.</li>\n<li>The Law of Conservation of Organizational Stability [组织稳定性守恒规律] (1980):  The average effective global activity rate in an evolving E-type system is invariant over product lifetime.</li>\n<li>The Law of Conservation of Familiarity [保证通晓性规律] (1980): As an E-type system evolves all associated with it, developers, sales personnel, users, for example, must maintain mastery of(熟悉) its content and behavior to achieve satisfactory evolution.</li>\n<li>The Law of Continuing Growth [持续增长规律] (1980):  The functional content of E-type systems must be continually increased to maintain user satisfaction over their lifetime.</li>\n<li>The Law of Declining Quality [质量衰减规律] (1996): The quality of E-type systems will appear to be declining unless they are rigorously maintained and adapted to operational environment changes.</li>\n<li>The Feedback System Law [反馈系统规律] (1996):  E-type evolution processes constitute multi-level, multi-loop, multi-agent feedback systems and must be treated as such to achieve significant improvement over any reasonable base.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>Software <strong>Myths</strong> 软件谬论</p>\n<ul>\n<li>\n<p>Software Myths affect managers, customers (and other non-technical stakeholders) and practitioners</p>\n</li>\n<li>\n<p>Software Myths are believable because they often have elements of truth,</p>\n<ul>\n<li>but …\n<ul>\n<li>Invariably lead to bad decisions,</li>\n</ul>\n</li>\n<li>therefore …\n<ul>\n<li>Insist on reality as you navigate your way through software engineering</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>If we get behind schedule, we can <strong>add more programmers</strong> and catch up.</p>\n</li>\n<li>\n<p><strong>A general statement about objectives</strong> is sufficient to begin building programs.</p>\n</li>\n<li>\n<p>Change in project requirements can be <strong>easily accommodated</strong> because software is flexible.</p>\n</li>\n<li>\n<p><strong>Management Myths</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>“We already have a book of standards and procedures for building software. It does provide my people with <strong>everything</strong> they need to know …”</p>\n<p>“If my project is behind the schedule, I always can add more programmers to it and catch up …”</p>\n<p>“If I decide to <strong>outsource</strong> the software project to a third party, I can just relax: Let them build it, and I will just pocket my profits …”</p>\n</blockquote>\n<ul>\n<li><strong>Customer Myths</strong></li>\n</ul>\n<blockquote>\n<p>“A general statement of objectives is sufficient to begin writing programs - we can fill in the details later …”</p>\n<p>“Project requirements continually change but this change can easily be accommodated because software is flexible …”</p>\n</blockquote>\n<ul>\n<li><strong>Practitioner’s Myths</strong></li>\n</ul>\n<blockquote>\n<p>“Let’s start coding ASAP, because once we write the program and get it to work, our job is done …”</p>\n<p>“Until I get the program running, I have no way of assessing its quality …”</p>\n<p>“The only deliverable work product for a successful project is the working program …”</p>\n<p>“Software engineering is baloney[胡扯]. It makes us create tons of paperwork, only to slow us down …”</p>\n</blockquote>\n<h1 id=\"chapter-02-process-软件过程综述\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-02-process-软件过程综述\"></a> Chapter 02 Process 软件过程（综述）<a href=\"Review/SoftwareEngineering#chapter-02-process-软件过程综述\"></a></h1>\n<ul>\n<li>\n<p>Overview</p>\n</li>\n<li>\n<p>What? 过程是什么？当开发产品或构件系统时，遵循一系列可预测的步骤（即路线图）是非常重要的，它有助于及时交付高质量的产品。</p>\n</li>\n<li>\n<p>Who? 相关人员？管理人员、软件工程师和客户均应该参与过程的定义、建立和测试。</p>\n</li>\n<li>\n<p>Why?重要性？提高了软件开发活动的稳定性、可控性和有组织性；否则软件活动会失控并变得混乱。</p>\n</li>\n<li>\n<p>Steps?有哪些步骤？ 具体步骤随着所构造的软件类型不同在细节方面有所变化，但对所有过程来讲有很多活动是相同的。</p>\n</li>\n<li>\n<p>Work product?有哪些工作产品？ 是指过程中定义的一系列活动和任务的结果，包括Programs, documents, and data.</p>\n</li>\n<li>\n<p>Correct process?什么是正确的过程？ Assessment, quality deliverable.</p>\n</li>\n<li>\n<p>IEEE Definition</p>\n<blockquote>\n<p>Software Engineering: (1) The application of a systematic, disciplined, quantifiable[系统的、规范的和可量化的] approach to the development, operation, and maintenance of software; that is, the application of engineering to software. (2) The study of approaches as in (1).</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/Review/SoftwareEngineering/1547363766241.png\" alt=\"1547363766241\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>软件过程</p>\n<ul>\n<li>软件过程是一个为建造高质量软件所需完成的任务的框架，即形成软件产品的一系列步骤。包括中间产品、资源、角色及过程中采取的方法、工具等范畴。</li>\n</ul>\n</li>\n<li>\n<p>Software process model</p>\n<ul>\n<li>Attempt to organize the software life cycle by\n<ul>\n<li>defining activities involved in software production[软件生产]</li>\n<li>defining order of activities and their relationships</li>\n</ul>\n</li>\n<li>Goals of a software process\n<ul>\n<li>standardization, predictability, productivity, high product quality, ability to plan time and budget requirements</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>早期做法： Code &amp; Fix</p>\n<pre><code>&gt;The earliest approach\n&gt;\n&gt;*   Write code\n&gt;\n&gt;*   Fix it (修复) to eliminate any errors that have been detected, to enhance existing functionality, or to add new features\n&gt;\n&gt;*   Source of difficulties and deficiencies\n&gt;    *   impossible to predict（不可预测性）\n&gt;    *   impossible to manage\n</code></pre>\n</li>\n<li>\n<p>软件危机 Symptoms of inadequacy: <strong>the software crisis</strong></p>\n<ul>\n<li>\n<p><strong>scheduled time and cost exceeded</strong></p>\n</li>\n<li>\n<p><strong>user expectations not met</strong></p>\n</li>\n<li>\n<p><strong>poor quality</strong></p>\n</li>\n</ul>\n<p>The <strong>size</strong> and <strong>economic value</strong> of software applications require appropriate “<strong>process models</strong>”</p>\n</li>\n<li>\n<p>Process model goals (B.Boehm 1988)</p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>\n<p>determine the order of stages involved in software development and evolution, and to establish the <strong>transition criteria（标准尺度）</strong> for progressing from one stage to the next.  These include completion criteria for the current stage plus choice criteria and entrance criteria for the next stage. Thus a process model addresses the following software project questions:确定软件开发和进化所涉及的阶段的顺序, 并建立从一个阶段到下一个阶段的过渡标准。 其中包括当前阶段的完成标准加上选择标准和下一阶段的标准。因此, 流程模型解决了以下软件项目问题:</p>\n</li>\n<li>\n<p>What shall we do next?</p>\n</li>\n<li>\n<p>How long shall we continue to do it?</p>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>软件过程</p>\n<ul>\n<li>\n<p>黑盒观点</p>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareEngineering/1547365114325.png\" alt=\"1547365114325\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>Problems</p>\n<ul>\n<li>\n<p>The assumption is that requirements <strong>can be fully understood</strong> prior to development</p>\n</li>\n<li>\n<p>Interaction with the customer occurs <strong>only</strong> at the beginning (requirements) and end (after delivery)</p>\n</li>\n<li>\n<p>Unfortunately the assumption almost <strong>never holds</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>白盒观点</p>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareEngineering/1547365404494.png\" alt=\"1547365404494\" class=\"article-img\"></p>\n<ul>\n<li>Advantages\n<ul>\n<li>Reduce risks by improving visibility</li>\n<li>Allow project changes as the project progresses\n<ul>\n<li>based on feedback from the customer</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>软件开发活动</p>\n<ul>\n<li>线性过程模型</li>\n<li>非线性模型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>过程框架</p>\n<p><img src=\"/Review/SoftwareEngineering/1547365505796.png\" alt=\"1547365505796\" class=\"article-img\"></p>\n</li>\n<li>\n<p><font color=\"red\"><strong>通用活动框架（非常重要）</strong></font></p>\n<p><img src=\"/Review/SoftwareEngineering/1547365900978.png\" alt=\"1547365900978\" class=\"article-img\"><img src=\"/Review/SoftwareEngineering/1547367400287.png\" alt=\"img\" class=\"article-img\"><img src=\"/Review/SoftwareEngineering/1547367504297.png\" alt=\"1547367504297\" class=\"article-img\"></p>\n<p><img src=\"/Review/SoftwareEngineering/1039166-20170321200512502-745718093-1547367531435.png\" alt=\"img\" class=\"article-img\"></p>\n</li>\n<li>\n<p>普适性活动 Umbrella Activities</p>\n<ul>\n<li>Software project management</li>\n<li>Formal technical reviews</li>\n<li>Software quality assurance</li>\n<li>Software configuration management</li>\n<li>Work product preparation and production</li>\n<li>Reusability management</li>\n<li>Measurement</li>\n<li>Risk management</li>\n</ul>\n</li>\n<li>\n<p>能力成熟度模型集成**(CMMI)</p>\n</li>\n<li>\n<p>过程评估 Process Assessment</p>\n<ul>\n<li>评估软件过程以确认满足了成功软件工程所必需的基本过程标准(basic<br>\nprocess criteria**)**要求.The process should be assessed to ensure that it meets a set of basic process criteria that have been shown to be essential for a successful software engineering.</li>\n<li><img src=\"/Review/SoftwareEngineering/1547367730629.png\" alt=\"1547367730629\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-03-process-models\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-03-process-models\"></a> Chapter 03 Process Models<a href=\"Review/SoftwareEngineering#chapter-03-process-models\"></a></h1>\n<ul>\n<li>软件生命周期、概念、阶段</li>\n<li>软件过程模型</li>\n</ul>\n<p><img src=\"/Review/SoftwareEngineering/1547451466048.png\" alt=\"1547451466048\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>Prescriptive Models[惯例模型]</p>\n<ul>\n<li>\n<p>Prescriptive process models advocate an orderly approach to software engineering.</p>\n<ul>\n<li>question\n<ul>\n<li>If prescriptive process models strive for structure and order, are they inappropriate for a software world that thrives on change?</li>\n<li>Yet, if we reject traditional process models (and the order they imply) and replace them with something less structured, do we make it impossible to achieve coordination and coherence in software work?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>The waterfall Model 瀑布模型</p>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareEngineering/1547451662260.png\" alt=\"1547451662260\" class=\"article-img\"></p>\n</li>\n<li>\n<blockquote>\n<p>(适用于需求较为固定和明确的场景、不适应大量、频繁的更改)</p>\n<ol>\n<li>The requirements are <strong>knowable</strong> in advance of implementation.</li>\n<li>The requirements have <strong>no unresolved, high-risk implications.</strong></li>\n</ol>\n<ul>\n<li>risks due to COTS choices, cost, schedule, performance, safety, security, user interfaces, organizational impacts.</li>\n</ul>\n<ol start=\"3\">\n<li>The nature of  the requirements will <strong>not change very much.</strong></li>\n</ol>\n<ul>\n<li>During development; during evolution.</li>\n</ul>\n<ol start=\"4\">\n<li>The requirements are <strong>compatible with</strong> all the key system stakeholders’ expectations.\n<ul>\n<li>e.g., users, customer, developers, maintainers, investors.</li>\n</ul>\n</li>\n<li>The <strong>right architecture</strong> for implementing the requirements is well understood.</li>\n<li>There is <strong>enough calendar time</strong> to proceed sequentially.~</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>The V Model V模型</p>\n<ul>\n<li><img src=\"/Review/SoftwareEngineering/1547454083297.png\" alt=\"1547454083297\"></li>\n</ul>\n</li>\n<li>\n<p>Incremental Models 增量模型</p>\n</li>\n<li>\n<ul>\n<li><img src=\"/Review/SoftwareEngineering/1547454772132.png\" alt=\"1547454772132\"></li>\n<li>RAD 模型</li>\n<li><img src=\"/Review/SoftwareEngineering/1547454814108.png\" alt=\"1547454814108\"></li>\n</ul>\n</li>\n<li>\n<p>Evolutionary Models 演化模型</p>\n</li>\n<li>\n<blockquote>\n<p>客户不确定要求 工程师对算法效率 可用性不确定</p>\n<p>帮助客户和工程师了解要构建的内容快速设计和实现</p>\n</blockquote>\n</li>\n<li>\n<p>Prototyping 原型</p>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareEngineering/1547455509874.png\" alt=\"1547455509874\" class=\"article-img\"></p>\n</li>\n<li>\n<blockquote>\n<p>原型范式中的问题<br>\nsw 工程师尝试修改原型以用作工作版本<br>\n一旦客户看到工作原型, 她希望很快就能得到工作产品</p>\n</blockquote>\n</li>\n<li>\n<p>The Spiral 螺旋形</p>\n<ul>\n<li><img src=\"/Review/SoftwareEngineering/1547455726118.png\" alt=\"1547455726118\"></li>\n</ul>\n</li>\n<li>\n<p>Full Spiral Model</p>\n<ul>\n<li>Radial dimension[按射线方向]: cumulative cost to date</li>\n<li>Angular dimension[按螺旋方向]: progress through the spiral</li>\n<li><img src=\"/Review/SoftwareEngineering/1547455837090.png\" alt=\"1547455837090\"></li>\n</ul>\n</li>\n<li>\n<p>UP Unified Process Model 统一过程模型</p>\n<ul>\n<li>用例驱动</li>\n<li>以体系结构为中心</li>\n<li>迭代和增量</li>\n<li>jia’gou</li>\n<li><img src=\"/Review/SoftwareEngineering/1547455977324.png\" alt=\"1547455977324\"></li>\n<li>Life cycle<img src=\"/Review/SoftwareEngineering/1547455998301.png\" alt=\"1547455998301\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-04-agile-development\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-04-agile-development\"></a> Chapter 04 Agile Development<a href=\"Review/SoftwareEngineering#chapter-04-agile-development\"></a></h1>\n<ul>\n<li>\n<p>敏捷开发</p>\n<ul>\n<li>适应变更</li>\n<li>交流通畅</li>\n<li>客户参与</li>\n<li>有效控制</li>\n<li>原则\n<ul>\n<li>尽早交付、持续交付</li>\n<li>欢迎变更、创造优势</li>\n<li>经常交付、间隔紧凑</li>\n<li>开发期间业务人员和开发人员在一起工作</li>\n<li>围绕受激励的个人、提供环境和支持并信任</li>\n<li>团队内部面对面交谈最有效率效果</li>\n<li>可持续开发、赞助人开发者用户长期稳定的开发速度</li>\n<li>关注优秀技能提升敏捷能力</li>\n<li>保持简单</li>\n<li>好的架构、需求、设计出自组织团队</li>\n<li>定时反省、及时调整</li>\n</ul>\n</li>\n<li><img src=\"/Review/SoftwareEngineering/1547470424903.png\" alt=\"1547470424903\"></li>\n</ul>\n<blockquote>\n<p><strong>Individuals and interactions</strong>(交互) over processes and tools</p>\n<p><strong>Working software</strong> over comprehensive documentation</p>\n<p><strong>Customer collaboration</strong> over contract negotiation (谈判)</p>\n<p><strong>Responding to change</strong> over following a plan</p>\n<p>​\t(No sliver bullet 自相矛盾而无可奈何)</p>\n<p>增量发布\\多生命周期</p>\n<p>交付产品</p>\n<ul>\n<li>可运行软件</li>\n<li>源代码\n<ul>\n<li>使用权</li>\n<li>销售权</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>极限编程 XP</p>\n</li>\n<li>\n<p>Begins with the creation of user stories</p>\n</li>\n<li>\n<p>Agile team assesses each story and assigns a cost</p>\n</li>\n<li>\n<p>Stories are grouped to for a deliverable increment</p>\n</li>\n<li>\n<p>A commitment[承担义务] is made on delivery date[交货日期]</p>\n</li>\n<li>\n<p>After the first increment, project velocity is used to help define subsequent delivery dates for other                                                increments</p>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareEngineering/1547471247252.png\" alt=\"1547471247252\" class=\"article-img\"></p>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareEngineering/1547472622915.png\" alt=\"1547472622915\" class=\"article-img\"></p>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareEngineering/1547473560970.png\" alt=\"1547473560970\" class=\"article-img\"></p>\n</li>\n</ul>\n<h1 id=\"chapter-06-系统工程\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-06-系统工程\"></a> Chapter 06 系统工程<a href=\"Review/SoftwareEngineering#chapter-06-系统工程\"></a></h1>\n<ul>\n<li><font color=\"red\">系统工程中的概念</font>\n<ul>\n<li>元素    （软件生态系统）\n<ul>\n<li>软件</li>\n<li>硬件</li>\n<li><strong>人</strong></li>\n<li>数据库（数据）</li>\n<li>文档</li>\n<li>规程</li>\n</ul>\n</li>\n<li>层次体系\n<ul>\n<li><img src=\"/Review/SoftwareEngineering/1547474495591.png\" alt=\"1547474492979\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>系统建模\n<ul>\n<li>定义在所考虑视图中满足需要的过程</li>\n<li>描述过程行为和该行为所依据的假设</li>\n<li>明确定义模型的外在和内在输入</li>\n<li>描述有助于工程师理解视图的全部联系</li>\n</ul>\n</li>\n<li>系统建模分类\n<ul>\n<li>Business Process Engineering(PBE)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-07-需求工程\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-07-需求工程\"></a> Chapter 07 需求工程<a href=\"Review/SoftwareEngineering#chapter-07-需求工程\"></a></h1>\n<ul>\n<li>\n<p>需求工程任务</p>\n<ul>\n<li>\n<p>初启Inception—Establish a basic understanding of the problem and the nature of the solution.</p>\n</li>\n<li>\n<p>启发Elicitation—Draw out the requirements from stakeholders.</p>\n</li>\n<li>\n<p>细化Elaboration—Create an analysis model that represents information, functional, and behavioral</p>\n<p>aspects of the requirements.</p>\n</li>\n<li>\n<p>协商Negotiation—Agree on a deliverable system that is realistic for developers and customers.</p>\n</li>\n<li>\n<p>规范Specification—Describe the requirements formally or informally.</p>\n</li>\n<li>\n<p>验证Validation—Review the requirement specification for errors, ambiguities, omissions, and conflicts.</p>\n</li>\n<li>\n<p>需求管理Requirements management—Manage changing requirements.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>需求工程工作产品</p>\n<ul>\n<li>可行性和必要描述</li>\n<li>系统或产品的范围说明</li>\n<li>参与需求导出的客户、用户和其他利益共同者的列表</li>\n<li>系统技术环境的说明</li>\n<li>需求列表（含领域限制）</li>\n<li>一系列使用场景</li>\n<li>任何能更好的定义需求的原型</li>\n</ul>\n</li>\n<li>\n<p><font color=\"red\">需求开发方法</font></p>\n<ul>\n<li>需求获取：1 开始过程：与客户建立初步交流。2 导出过程：通过访问和调查，获得需求的描述</li>\n<li>需求分析：精化过程，通过分析建模，建立精确的技术模型，说明软件功能，特征和约束。</li>\n<li>需求处理：1 协商过程 2 形成规格说明 3 需求确认</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-08-模型分析\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-08-模型分析\"></a> Chapter 08 模型分析<a href=\"Review/SoftwareEngineering#chapter-08-模型分析\"></a></h1>\n<ul>\n<li>分析模型的作用\n<ul>\n<li>specifies software’s operational characteristics</li>\n<li>indicates software’s interface with other system elements</li>\n<li>establishes constraints that software must meet</li>\n</ul>\n</li>\n<li>分析模型的构建原则（经验原则）\n<ul>\n<li>The model should focus on requirements that are visible within the problem or business domain. The level of abstraction should be relatively high.</li>\n<li>Each element of the analysis model should add to an overall understanding of software requirements and provide insight into the information domain, function and behavior of the system.</li>\n<li>Delay consideration of infrastructure and other non-functional models until design.</li>\n<li>Minimize coupling throughout the system.</li>\n<li>Be certain that the analysis model provides value to all stakeholders.</li>\n<li>Keep the model as simple as it can be.</li>\n</ul>\n</li>\n<li><font color=\"red\">方法</font>\n<ul>\n<li><strong>场景建模</strong>\n<ul>\n<li>用况use-case</li>\n<li>部署图</li>\n<li>……</li>\n</ul>\n</li>\n<li><strong>类建模</strong>\n<ul>\n<li><strong>class图</strong></li>\n<li><strong>协作图</strong></li>\n<li>……</li>\n</ul>\n</li>\n<li>行为建模\n<ul>\n<li>状态转换图</li>\n<li>活动图</li>\n<li>顺序图</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-09-设计工程\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-09-设计工程\"></a> Chapter 09 设计工程<a href=\"Review/SoftwareEngineering#chapter-09-设计工程\"></a></h1>\n<ul>\n<li>设计概念\n<ul>\n<li>抽象abstraction</li>\n<li>体系结构architecture</li>\n<li>模式patterns</li>\n<li>逐步求精refinement</li>\n<li>模块化modularity</li>\n<li>信息隐藏information hiding</li>\n<li>模块独立functional independence</li>\n<li>Refactoring（重构）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-10-架构设计\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-10-架构设计\"></a> Chapter 10 架构设计<a href=\"Review/SoftwareEngineering#chapter-10-架构设计\"></a></h1>\n<ul>\n<li>\n<p>为何进行体系结构设计</p>\n<ul>\n<li>体系结构是系统的表示形式, 使软件工程师能够:\n<ul>\n<li>分析设计在满足其规定要求方面的有效性,</li>\n<li>在设计更改仍然相对容易的阶段考虑体系结构替代方案, 并且降低与软件建设相关的风险。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>体系结构风格（style）</strong></p>\n<ul>\n<li>Data-centered architecture</li>\n<li>Data flow architecture</li>\n<li>Call and return architecture</li>\n<li>Object-oriented architecture</li>\n<li>Layered architecture</li>\n<li>Each style describes a system category that encompasses:\n<ul>\n<li>a set of components (e.g., a database, computational modules) that perform a function required by a system,</li>\n<li>a set of connectors that enable “communication, coordination, and cooperation” among components</li>\n<li>constraints that define how components can be integrated to form the system, and</li>\n<li>semantic models that enable a designer to understand the overall properties of a system.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>Each style describes a system category that encompasses:\n<ul>\n<li>a set of components (e.g., a database, computational modules) that perform a function required by a system,</li>\n<li>a set of connectors that enable “communication, coordination, and cooperation” among components,</li>\n<li>constraints that define how components can be integrated to form the system, and</li>\n</ul>\n</li>\n</ul>\n<p>usemantic models that enable a designer to understand the overall properties of a system.</p>\n</li>\n</ul>\n<h1 id=\"chapter-11-组件设计\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-11-组件设计\"></a> Chapter 11 组件设计<a href=\"Review/SoftwareEngineering#chapter-11-组件设计\"></a></h1>\n<ul>\n<li>构件\n<ul>\n<li>A complete set of software components is defined during architectural design</li>\n<li>But the internal <strong>data structures</strong> and <strong>processing details</strong> of each component are not represented at a level of abstraction that is close to code</li>\n<li>Component-level design defines the <strong>data structures</strong>, <strong>algorithms</strong>, <strong>interface characteristics</strong>, and <strong>communication mechanisms</strong> allocated to each component</li>\n</ul>\n</li>\n<li>构建设计原则：开关、替换、依赖倒置、接口分离、内聚性、耦合性</li>\n<li>构建设计方法：DPL、程序流程图、决策表</li>\n</ul>\n<h1 id=\"chapter-13~14-软件测试技术\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-13~14-软件测试技术\"></a> Chapter 13~14 软件测试技术<a href=\"Review/SoftwareEngineering#chapter-13~14-软件测试技术\"></a></h1>\n<ul>\n<li>\n<p>Verification 确保软件正确实现功能</p>\n</li>\n<li>\n<p>Validation 确保软件可追溯需求</p>\n</li>\n<li>\n<p>测试策略</p>\n<ul>\n<li><strong>单元测试</strong></li>\n<li><strong>集成测试</strong>：big bang, top down, bottom up</li>\n<li>确认测试</li>\n<li>系统测试</li>\n</ul>\n</li>\n<li>\n<p>测试用例</p>\n</li>\n<li>\n<p>测试技术</p>\n<ul>\n<li>白盒、黑盒</li>\n<li>手工测试、自动化测试</li>\n</ul>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareEngineering/1547480427569.png\" alt=\"1547480427569\" class=\"article-img\"></p>\n</li>\n</ul>\n<h1 id=\"chapter-15-软件产品度量\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-15-软件产品度量\"></a> Chapter 15 软件产品度量<a href=\"Review/SoftwareEngineering#chapter-15-软件产品度量\"></a></h1>\n<blockquote>\n<ol>\n<li>\n<p>软件质量</p>\n</li>\n<li>\n<p>一般来讲，<strong>软件质量</strong>是对明确陈述的功能和性能需求、明确记录的开发标准以及对所有专业化软件开发应具备的隐含特征的符合度。</p>\n<ul>\n<li>软件需求是质量测量的基础，不符合需求就是没有质量。</li>\n<li>若未能遵守开发准则，则肯定质量有问题。</li>\n<li>若软件符合显示需求，但未能满足其隐式需求，则软件质量仍然值得怀疑。</li>\n</ul>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareEngineering/1547480657659.png\" alt=\"1547480657659\" class=\"article-img\"></p>\n</li>\n<li>\n<p>度量框架</p>\n</li>\n<li>\n<p><strong>软件产品</strong>：文档、代码、软件等</p>\n<p><strong>度量手段</strong>:</p>\n<p>测度（measures）</p>\n<p>度量（metrics）</p>\n<p>指标（Indicators）</p>\n<p><strong>度量原则</strong></p>\n<blockquote>\n<p>•设定度量目标：The objectives of measurement should be established before data collection begins;</p>\n<p>•定义要明确：Each technical metric should be defined in an unambiguous manner;</p>\n<p>•有效理论支持：Metrics should be derived based on a theory that is valid for the domain of application (e.g., metrics for design should draw upon [利用] basic design concepts and principles and attempt to provide an indication of the presence of an attribute that is deemed desirable);</p>\n<p>•度量指标的选择要是最合适的：Metrics should be tailored to best accommodate specific products and processes.</p>\n</blockquote>\n<p><strong>度量过程</strong></p>\n<blockquote>\n<p>•Formulation【公式化】. The derivation of software measures and metrics appropriate for the representation of the software that is being considered.</p>\n<p>•Collection【收集数据】. The mechanism used to accumulate data required to derive the formulated metrics.</p>\n<p>•Analysis【分析结果】. The computation of metrics and the application of mathematical tools.</p>\n<p>•Interpretation【解释评估】. The evaluation of metrics results in an effort to gain insight into the quality of the representation.</p>\n<p>•Feedback【反馈】 Recommendations derived from the interpretation of product metrics transmitted to the software team.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>过程度量作用：提供能够引导长期的软件过程改进的一组过程指标。<br>\n项目度量作用：使得软件管理者能够（1）评估正在进行中的项目的状态（2）跟踪潜在的分险（3） 在问题造成不良影响前发现他们（4）调整工作流程或任务（5）评估项目团队控制软件工作产品质 量的能力<br>\n产品度量作用：为分析、设计、编码和测试能更客观的执行和更定量的评估提供基础</li>\n</ul>\n<h1 id=\"chapter-21-软件工程管理\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-21-软件工程管理\"></a> Chapter 21 软件工程管理<a href=\"Review/SoftwareEngineering#chapter-21-软件工程管理\"></a></h1>\n<ul>\n<li>4P模型\n<ul>\n<li>People — the most important element of a successful project</li>\n<li>Product — the software to be built</li>\n<li>Process — the set of framework activities and software engineering tasks to get the job done</li>\n<li>Project — all work required to make the product a reality</li>\n</ul>\n</li>\n</ul>\n<p>W5HH</p>\n<p><img src=\"/Review/SoftwareEngineering/1547480963514.png\" alt=\"1547480963514\" class=\"article-img\"></p>\n<h1 id=\"chapter-1522-过程和项目度量\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-1522-过程和项目度量\"></a> Chapter 15，22 过程和项目度量<a href=\"Review/SoftwareEngineering#chapter-1522-过程和项目度量\"></a></h1>\n<p><img src=\"/Review/SoftwareEngineering/1547484904576.png\" alt=\"1547484904576\" class=\"article-img\"></p>\n<ul>\n<li>\n<p><strong>McCall质量因素</strong></p>\n</li>\n<li>\n<blockquote>\n<p>Why measure</p>\n<ol>\n<li>assess the status of an ongoing project</li>\n<li>track potential risks</li>\n<li>uncover problem areas before they go “critical”</li>\n<li>adjust work flow or tasks</li>\n<li>evaluate the project team’s ability to control quality of software work products.</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>Measures,Metrics,Indicators</p>\n<ul>\n<li>\n<p>process</p>\n</li>\n<li>\n<p>process product</p>\n</li>\n<li>\n<p>project</p>\n</li>\n<li>\n<ol>\n<li>\n<p>measures of <strong>errors</strong> uncovered before release of the software</p>\n</li>\n<li>\n<p><strong>defects</strong> delivered to and reported by end-users</p>\n</li>\n<li>\n<p>work products delivered (<strong>productivity</strong>)</p>\n</li>\n<li>\n<p>human <strong>effort</strong> expended</p>\n</li>\n<li>\n<p>calendar <strong>time</strong> expended</p>\n</li>\n<li>\n<p><strong>schedule</strong> conformance</p>\n</li>\n<li>\n<p><strong>other</strong> measures.</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>度量的作用</strong></p>\n</li>\n</ul>\n<h1 id=\"chapter-23-软件项目预算\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-23-软件项目预算\"></a> Chapter 23 软件项目预算<a href=\"Review/SoftwareEngineering#chapter-23-软件项目预算\"></a></h1>\n<ul>\n<li>\n<p><strong>项目计划任务和内容</strong></p>\n<ul>\n<li>\n<p>软件项目计划</p>\n<ul>\n<li>建立一套务实的策略控制跟踪监视一个复杂的技术项目</li>\n<li>目的：保证最终结果按时高质量。</li>\n</ul>\n</li>\n<li>\n<p>属性</p>\n<ul>\n<li>\n<p>项目规模</p>\n</li>\n<li>\n<p>项目工作量（人月）</p>\n</li>\n<li>\n<p>项目所需资源</p>\n</li>\n<li>\n<p>项目成本</p>\n<p><img src=\"/Review/SoftwareEngineering/1547485353292.png\" alt=\"1547485353292\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>LOC&amp;FP</p>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareEngineering/1547485572230.png\" alt=\"1547485572230\" class=\"article-img\"></p>\n</li>\n<li>\n<p>FP:Function Point 功能点</p>\n</li>\n</ul>\n<h1 id=\"chapter-24-项目进度安排和跟踪\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-24-项目进度安排和跟踪\"></a> Chapter 24 项目进度安排和跟踪<a href=\"Review/SoftwareEngineering#chapter-24-项目进度安排和跟踪\"></a></h1>\n<p><img src=\"/Review/SoftwareEngineering/1547485832089.png\" alt=\"1547485832089\" class=\"article-img\"></p>\n<p><img src=\"/Review/SoftwareEngineering/1547485902823.png\" alt=\"1547485902823\" class=\"article-img\"></p>\n<p><img src=\"/Review/SoftwareEngineering/1547485933135.png\" alt=\"1547485933135\" class=\"article-img\"></p>\n<ul>\n<li>任务网络、关键路径的作用</li>\n<li><img src=\"/Review/SoftwareEngineering/1547486016026.png\" alt=\"1547486016026\"></li>\n<li><img src=\"/Review/SoftwareEngineering/1547486047194.png\" alt=\"1547486047194\"></li>\n<li><strong>里程碑</strong></li>\n</ul>\n<h1 id=\"chapter-25-风险管理\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-25-风险管理\"></a> Chapter 25 风险管理<a href=\"Review/SoftwareEngineering#chapter-25-风险管理\"></a></h1>\n<blockquote>\n<p>风险具有不确定性和造成损失的特点</p>\n</blockquote>\n<ul>\n<li>被动风险和主动风险管理</li>\n<li><img src=\"/Review/SoftwareEngineering/1547486476184.png\" alt=\"1547486476184\"></li>\n<li>Risk Management Paradigm（风险过程管理）</li>\n<li><img src=\"/Review/SoftwareEngineering/1547486503200.png\" alt=\"1547486503200\"></li>\n<li><img src=\"/Review/SoftwareEngineering/1547486575631.png\" alt=\"1547486575631\"></li>\n<li><img src=\"/Review/SoftwareEngineering/1547486606647.png\" alt=\"1547486606647\"></li>\n<li><strong>RMMM（Risk,Mitigation,Moritoring and Management）</strong>\n<ul>\n<li>mitigation:如何避免/转移风险</li>\n<li>monitoring:监视</li>\n<li>management:管理</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-26-质量管理\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-26-质量管理\"></a> Chapter 26 质量管理<a href=\"Review/SoftwareEngineering#chapter-26-质量管理\"></a></h1>\n<p><img src=\"/Review/SoftwareEngineering/1547488587407.png\" alt=\"1547488587407\" class=\"article-img\"></p>\n<ul>\n<li><strong>McCall软件质量模型</strong></li>\n<li>软件质量保证活动</li>\n<li><img src=\"/Review/SoftwareEngineering/1547488616231.png\" alt=\"1547488616231\"></li>\n<li><img src=\"/Review/SoftwareEngineering/1547488508862.png\" alt=\"1547488508862\"></li>\n<li><strong>正式技术评审</strong></li>\n<li><img src=\"/Review/SoftwareEngineering/1547488739234.png\" alt=\"1547488739234\"></li>\n<li><img src=\"/Review/SoftwareEngineering/1547488769582.png\" alt=\"1547488769582\"></li>\n<li><img src=\"/Review/SoftwareEngineering/1547488790605.png\" alt=\"1547488790605\"></li>\n<li><img src=\"/Review/SoftwareEngineering/1547488807766.png\" alt=\"1547488807766\"></li>\n<li>软件质量的成本</li>\n</ul>\n<h1 id=\"chapter-27-变更管理\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareEngineering#chapter-27-变更管理\"></a> Chapter 27 变更管理<a href=\"Review/SoftwareEngineering#chapter-27-变更管理\"></a></h1>\n<p><img src=\"/Review/SoftwareEngineering/1547488863963.png\" alt=\"1547488863963\" class=\"article-img\"></p>\n<ul>\n<li>软件配置项、版本、基线etc.</li>\n<li><img src=\"/Review/SoftwareEngineering/1547488886270.png\" alt=\"1547488886270\"></li>\n<li><img src=\"/Review/SoftwareEngineering/1547488903866.png\" alt=\"1547488903866\"></li>\n<li><strong>软件配置管理流程</strong></li>\n<li><img src=\"/Review/SoftwareEngineering/1547488975691.png\" alt=\"1547488975691\"></li>\n</ul>\n","prev":{"title":"工具链和工具索引","link":"Link"},"next":{"title":"Java 复习提纲","link":"Review/Java"},"plink":"ilucia.github.io/Review/SoftwareEngineering/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 00 Intorduction","id":"chapter-00-intorduction","index":"1"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 01 Software and Software Engineering","id":"chapter-01-software-and-software-engineering","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 02 Process 软件过程（综述）","id":"chapter-02-process-软件过程综述","index":"3"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 03 Process Models","id":"chapter-03-process-models","index":"4"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 04 Agile Development","id":"chapter-04-agile-development","index":"5"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 06 系统工程","id":"chapter-06-系统工程","index":"6"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 07 需求工程","id":"chapter-07-需求工程","index":"7"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 08 模型分析","id":"chapter-08-模型分析","index":"8"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 09 设计工程","id":"chapter-09-设计工程","index":"9"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 10 架构设计","id":"chapter-10-架构设计","index":"10"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 11 组件设计","id":"chapter-11-组件设计","index":"11"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 13~14 软件测试技术","id":"chapter-13~14-软件测试技术","index":"12"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 15 软件产品度量","id":"chapter-15-软件产品度量","index":"13"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 21 软件工程管理","id":"chapter-21-软件工程管理","index":"14"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 15，22 过程和项目度量","id":"chapter-1522-过程和项目度量","index":"15"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 23 软件项目预算","id":"chapter-23-软件项目预算","index":"16"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 24 项目进度安排和跟踪","id":"chapter-24-项目进度安排和跟踪","index":"17"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 25 风险管理","id":"chapter-25-风险管理","index":"18"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 26 质量管理","id":"chapter-26-质量管理","index":"19"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 27 变更管理","id":"chapter-27-变更管理","index":"20"}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2019年1月13日","updated":"2022年4月27日"}}