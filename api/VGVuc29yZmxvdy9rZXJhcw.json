{"title":"Keras简单样例代码","date":"2019-02-26T20:30:33.000Z","link":"Tensorflow/keras","updated":"2022-04-27T15:24:01.715Z","content":"<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://tensorflow.google.cn/guide/keras</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras <span class=\"keyword\">import</span> layers</span><br><span class=\"line\">print(<span class=\"string\">'[tensorflow.version]:'</span>, tf.VERSION)</span><br><span class=\"line\">print(<span class=\"string\">'[tensorflow.keras.version]:'</span>, tf.keras.__version__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 序列模型</span></span><br><span class=\"line\"><span class=\"comment\"># 在 Keras 中，您可以通过组合层来构建模型。模型（通常）是由层构成的图。最常见的模型类型是层的堆叠：tf.keras.Sequential 模型。</span></span><br><span class=\"line\">model = tf.keras.Sequential()</span><br><span class=\"line\"><span class=\"comment\"># adds a densely-connected layer with 64 units to the model</span></span><br><span class=\"line\">model.add(layers.Dense(<span class=\"number\">64</span>, activation=<span class=\"string\">'relu'</span>))</span><br><span class=\"line\"><span class=\"comment\"># add another</span></span><br><span class=\"line\">model.add(layers.Dense(<span class=\"number\">64</span>, activation=<span class=\"string\">'relu'</span>))</span><br><span class=\"line\"><span class=\"comment\"># add a softmax layer with 10 output units</span></span><br><span class=\"line\">model.add(layers.Dense(<span class=\"number\">10</span>, activation=<span class=\"string\">'softmax'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置层</span></span><br><span class=\"line\"><span class=\"comment\"># 我们可以使用很多 tf.keras.layers，它们具有一些相同的构造函数参数：</span></span><br><span class=\"line\"><span class=\"comment\"># activation：设置层的激活函数。此参数由内置函数的名称指定，或指定为可调用对象。默认情况下，系统不会应用任何激活函数。</span></span><br><span class=\"line\"><span class=\"comment\"># kernel_initializer 和 bias_initializer：创建层权重（核和偏差）的初始化方案。此参数是一个名称或可调用对象，默认为 \"Glorot uniform\" 初始化器。</span></span><br><span class=\"line\"><span class=\"comment\"># kernel_regularizer 和 bias_regularizer：应用层权重（核和偏差）的正则化方案，例如 L1 或 L2 正则化。默认情况下，系统不会应用正则化函数。</span></span><br><span class=\"line\"><span class=\"comment\"># Create a sigmoid layer</span></span><br><span class=\"line\">layers.Dense(<span class=\"number\">64</span>, activation=<span class=\"string\">'sigmoid'</span>)</span><br><span class=\"line\"><span class=\"comment\"># Or</span></span><br><span class=\"line\">layers.Dense(<span class=\"number\">64</span>, activation=tf.sigmoid)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># a liner layer with L1 regularization of factor 0.01 applied to the kernal matrix</span></span><br><span class=\"line\">layers.Dense(<span class=\"number\">64</span>, kernel_regularizer=tf.keras.regularizers.l1(<span class=\"number\">0.01</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A linear layer with L2 regularization of factor 0.01 applied to the bias vector</span></span><br><span class=\"line\">layers.Dense(<span class=\"number\">64</span>, bias_regularizer=tf.keras.regularizers.l2(<span class=\"number\">0.01</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A linear layer with a kernel initialized to a random orthogonal matrix</span></span><br><span class=\"line\">layers.Dense(<span class=\"number\">64</span>, kernel_initializer=<span class=\"string\">'orthogonal'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A linear layer with a bias vector initialized to 2.0s:</span></span><br><span class=\"line\">layers.Dense(<span class=\"number\">64</span>, bias_initializer=tf.keras.initializers.constant(<span class=\"number\">2.0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 训练和评估</span></span><br><span class=\"line\"><span class=\"comment\"># 设置训练流程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建好模型后，通过调用 compile 方法配置该模型的学习流程：</span></span><br><span class=\"line\"></span><br><span class=\"line\">model = tf.keras.Sequential([</span><br><span class=\"line\">    <span class=\"comment\"># Adds a densely-connected layer with 64 units to the model:</span></span><br><span class=\"line\">    layers.Dense(<span class=\"number\">64</span>, activation=<span class=\"string\">'relu'</span>),</span><br><span class=\"line\">    <span class=\"comment\"># Add another:</span></span><br><span class=\"line\">    layers.Dense(<span class=\"number\">64</span>, activation=<span class=\"string\">'relu'</span>),</span><br><span class=\"line\">    <span class=\"comment\"># Add a softmax layer with 10 output units:</span></span><br><span class=\"line\">    layers.Dense(<span class=\"number\">10</span>, activation=<span class=\"string\">'softmax'</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">model.compile(optimizer=tf.train.AdamOptimizer(<span class=\"number\">0.001</span>),</span><br><span class=\"line\">              loss=<span class=\"string\">'categorical_crossentropy'</span>,</span><br><span class=\"line\">              metrics=[<span class=\"string\">'accuracy'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tf.keras.Model.compile 采用三个重要参数：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># optimizer：此对象会指定训练过程。从 tf.train 模块向其传递优化器实例，例如 tf.train.AdamOptimizer、tf.train.RMSPropOptimizer 或 tf.train.GradientDescentOptimizer。</span></span><br><span class=\"line\"><span class=\"comment\"># loss：要在优化期间最小化的函数。常见选择包括均方误差(mse)、categorical_crossentropy 和 binary_crossentropy。损失函数由名称或通过从 tf.keras.losses 模块传递可调用对象来指定。</span></span><br><span class=\"line\"><span class=\"comment\"># metrics：用于监控训练。它们是 tf.keras.metrics 模块中的字符串名称或可调用对象。</span></span><br><span class=\"line\"><span class=\"comment\"># Configure a model for mean-squared error regression.</span></span><br><span class=\"line\">model.compile(optimizer=tf.train.AdamOptimizer(<span class=\"number\">0.01</span>),</span><br><span class=\"line\">              loss=<span class=\"string\">'mse'</span>,       <span class=\"comment\"># mean squared error</span></span><br><span class=\"line\">              metrics=[<span class=\"string\">'mae'</span>])  <span class=\"comment\"># mean absolute error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure a model for categorical classification.</span></span><br><span class=\"line\">model.compile(optimizer=tf.train.RMSPropOptimizer(<span class=\"number\">0.01</span>),</span><br><span class=\"line\">              loss=tf.keras.losses.categorical_crossentropy,</span><br><span class=\"line\">              metrics=[tf.keras.metrics.categorical_accuracy])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">data = np.random.random((<span class=\"number\">1000</span>, <span class=\"number\">32</span>))</span><br><span class=\"line\">labels = np.random.random((<span class=\"number\">1000</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">model.fit(data, labels, epochs=<span class=\"number\">10</span>, batch_size=<span class=\"number\">32</span>)</span><br><span class=\"line\"><span class=\"comment\"># tf.keras.Model.fit 采用三个重要参数：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># epochs：以周期为单位进行训练。一个周期是对整个输入数据的一次迭代（以较小的批次完成迭代）。</span></span><br><span class=\"line\"><span class=\"comment\"># batch_size：当传递 NumPy 数据时，模型将数据分成较小的批次，并在训练期间迭代这些批次。此整数指定每个批次的大小。请注意，如果样本总数不能被批次大小整除，则最后一个批次可能更小。</span></span><br><span class=\"line\"><span class=\"comment\"># validation_data：在对模型进行原型设计时，您需要轻松监控该模型在某些验证数据上达到的效果。传递此参数（输入和标签元组）可以让该模型在每个周期结束时以推理模式显示所传递数据的损失和指标。</span></span><br><span class=\"line\"></span><br><span class=\"line\">data = np.random.random((<span class=\"number\">1000</span>, <span class=\"number\">32</span>))</span><br><span class=\"line\">labels = np.random.random((<span class=\"number\">1000</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">val_data = np.random.random((<span class=\"number\">100</span>, <span class=\"number\">32</span>))</span><br><span class=\"line\">val_labels = np.random.random((<span class=\"number\">100</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">model.fit(data, labels, epochs=<span class=\"number\">10</span>, batch_size=<span class=\"number\">32</span>,</span><br><span class=\"line\">          validation_data=(val_data, val_labels))</span><br></pre></td></tr></table></div></figure>","prev":{"title":"vim Reference","link":"Others/vim"},"next":{"title":"Anaconda导出环境/从外部安装环境","link":"python/envIO"},"plink":"ilucia.github.io/Tensorflow/keras/","copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2019年2月26日","updated":"2022年4月27日"}}