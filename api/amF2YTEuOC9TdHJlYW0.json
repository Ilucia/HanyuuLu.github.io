{"title":"java1.8/Stream","date":"2022-04-27T15:24:01.719Z","link":"java1.8/Stream","updated":"2022-04-27T15:24:01.719Z","content":"<h3 id=\"stream-简介\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#stream-简介\"></a> Stream 简介<a href=\"java1.8/Stream#stream-简介\"></a></h3>\n<ul>\n<li>Java 8 中，引入了流（Stream）的概念，这个流和以前我们使用的 IO 中的流并不太相同</li>\n<li>所有继承自 <code>Collection</code> 的接口都可以转换为 <code>Stream</code></li>\n</ul>\n<h4 id=\"例\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#例\"></a> 例<a href=\"java1.8/Stream#例\"></a></h4>\n<p>假设我们有一个 <code>List</code> 包含一系列的 <code>Person</code>，<code>Person</code> 有姓名 <code>name</code> 和年龄 <code>age</code> 连个字段。现要求这个列表中年龄大于 20 的人数</p>\n<p>通常按照以前我们可能会这么写：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Person p : persons) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p.getAge() &gt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">\t\tcount ++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>但如果使用 <code>stream</code> 的话，则会简单很多:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> count = persons.stream()</span><br><span class=\"line\">\t\t\t\t\t.filter(person -&gt; person.getAge() &gt; <span class=\"number\">20</span>)</span><br><span class=\"line\"> \t\t\t\t\t.count();</span><br></pre></td></tr></table></div></figure>\n<p>这只是 <code>stream</code> 的很简单的一个用法。现在链式调用方法算是一个主流，这样写也更利于阅读和理解编写者的意图，一步方法做一件事</p>\n<h3 id=\"stream-常用操作\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#stream-常用操作\"></a> Stream 常用操作<a href=\"java1.8/Stream#stream-常用操作\"></a></h3>\n<ul>\n<li><code>Stream</code> 的方法分为两类。一类叫惰性求值，一类叫及早求值。</li>\n<li>如果返回值是 Stream，那么是惰性求值\n<ul>\n<li>如果调用惰性求值方法，<code>Stream</code> 只是记录下了这个惰性求值方法的过程，并没有去计算，等到调用及早求值方法后，就连同前面的一系列惰性求值方法顺序进行计算，返回结果</li>\n</ul>\n</li>\n</ul>\n<p>通用形式为：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream.惰性求值.惰性求值. ... .惰性求值.及早求值</span><br></pre></td></tr></table></div></figure>\n<p>整个过程和建造者模式有共通之处。建造者模式使用一系列操作设置属性和配置，最后调 用一个 build 方法，这时，对象才被真正创建</p>\n<h4 id=\"collecttolist\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#collecttolist\"></a> collect(toList())<a href=\"java1.8/Stream#collecttolist\"></a></h4>\n<p><code>collect(toList())</code> 方法由 <code>Stream</code> 里的值生成一个列表，是一个及早求值操作，可以理解为 <code>Stream</code> 向 <code>Collection</code> 的转换</p>\n<blockquote>\n<p>注意这边的 <code>toList()</code> 其实是 <code>Collectors.toList()</code>，因为采用了静态倒入，看起来显得简洁。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; collected = Stream.of(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\t   .collect(Collectors.toList());</span><br><span class=\"line\">assertEquals(Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>), collected);</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#map\"></a> map<a href=\"java1.8/Stream#map\"></a></h4>\n<p>如果有一个函数可以将一种类型的值转换成另外一种类型，<code>map</code> 操作就可以使用该函数，将一个流中的值转换成一个新的流。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1046505/201610/1046505-20161020160120326-1422995090.png\" alt=\"img\" class=\"article-img\"></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; collected = Stream.of(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\t   .map(string -&gt; string.toUpperCase())</span><br><span class=\"line\">\t\t\t\t\t\t\t   .collect(toList());</span><br><span class=\"line\">assertEquals(asList(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"HELLO\"</span>), collected);</span><br></pre></td></tr></table></div></figure>\n<p><code>map</code> 方法就是接受的一个 <code>Function</code> 的匿名函数类，进行的转换。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1046505/201610/1046505-20161020160134904-1768291565.png\" alt=\"img\" class=\"article-img\"></p>\n<h4 id=\"filter\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#filter\"></a> filter<a href=\"java1.8/Stream#filter\"></a></h4>\n<p>遍历数据并检查其中的元素时，可尝试使用 <code>Stream</code> 中提供的新方法 <code>filter</code>。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1046505/201610/1046505-20161020160150935-2057482897.png\" alt=\"img\" class=\"article-img\"></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; beginningWithNumbers = </span><br><span class=\"line\">\t\tStream.of(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"1abc\"</span>, <span class=\"string\">\"abc1\"</span>)</span><br><span class=\"line\">\t\t\t  .filter(value -&gt; isDigit(value.charAt(<span class=\"number\">0</span>)))</span><br><span class=\"line\">\t\t\t  .collect(toList());</span><br><span class=\"line\">assertEquals(asList(<span class=\"string\">\"1abc\"</span>), beginningWithNumbers);</span><br></pre></td></tr></table></div></figure>\n<p><code>filter</code> 方法就是接受的一个 <code>Predicate</code> 的匿名函数类，判断对象是否符合条件，符合条件的才保留下来。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1046505/201610/1046505-20161020160211779-1658294349.png\" alt=\"img\" class=\"article-img\"></p>\n<h4 id=\"flatmap\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#flatmap\"></a> flatMap<a href=\"java1.8/Stream#flatmap\"></a></h4>\n<p><code>flatMap</code> 方法可用 <code>Stream</code> 替换值，然后将多个 <code>Stream</code> 连接成一个 <code>Stream</code>。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1046505/201610/1046505-20161020160225482-436563893.png\" alt=\"img\" class=\"article-img\"></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; together = Stream.of(asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>), asList(<span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">\t\t\t\t\t\t\t   .flatMap(numbers -&gt; numbers.stream())</span><br><span class=\"line\">\t\t\t\t\t\t\t   .collect(toList());</span><br><span class=\"line\">assertEquals(asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>), together);</span><br></pre></td></tr></table></div></figure>\n<p><code>flatMap</code> 最常用的操作就是合并多个 <code>Collection</code>。</p>\n<h4 id=\"max和min\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#max和min\"></a> max和min<a href=\"java1.8/Stream#max和min\"></a></h4>\n<p><code>Stream</code> 上常用的操作之一是求最大值和最小值。Stream API 中的 <code>max</code> 和 <code>min</code> 操作足以解决这一问题。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Lists.newArrayList(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> maxInt = list.stream()</span><br><span class=\"line\">\t\t\t\t .max(Integer::compareTo)</span><br><span class=\"line\">\t\t\t\t .get();</span><br><span class=\"line\"><span class=\"keyword\">int</span> minInt = list.stream()</span><br><span class=\"line\">\t\t\t\t .min(Integer::compareTo)</span><br><span class=\"line\">\t\t\t\t .get();</span><br><span class=\"line\">assertEquals(maxInt, <span class=\"number\">9</span>);</span><br><span class=\"line\">assertEquals(minInt, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></div></figure>\n<p>这里有 2 个要点需要注意：</p>\n<ol>\n<li><code>max</code> 和 <code>min</code> 方法返回的是一个 <code>Optional</code> 对象（和 Google Guava 里的 Optional 对象是一样的）。<code>Optional</code> 对象封装的就是实际的值，可能为空，所以保险起见，可以先用 <code>isPresent()</code> 方法判断一下。<code>Optional</code> 的引入就是为了解决方法返回 <code>null</code> 的问题。</li>\n<li><code>Integer::compareTo</code> 也是属于 Java 8 引入的新特性，叫做 <strong>方法引用（Method References）</strong>。在这边，其实就是 <code>(int1, int2) -&gt; int1.compareTo(int2)</code> 的简写，可以自己查阅了解，这里不再多做赘述。</li>\n</ol>\n<h4 id=\"reduce\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#reduce\"></a> reduce<a href=\"java1.8/Stream#reduce\"></a></h4>\n<p><code>reduce</code> 操作可以实现从一组值中生成一个值。在上述例子中用到的 <code>count</code>、<code>min</code> 和 <code>max</code> 方法,因为常用而被纳入标准库中。事实上，这些方法都是 <code>reduce</code> 操作。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1046505/201610/1046505-20161020160243217-1836446247.png\" alt=\"img\" class=\"article-img\"></p>\n<p>上图展示了 <code>reduce</code> 进行累加的一个过程。具体的代码如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> result = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t\t\t   .reduce(<span class=\"number\">0</span>, (acc, element) -&gt; acc + element);</span><br><span class=\"line\">assertEquals(<span class=\"number\">10</span>, result);</span><br></pre></td></tr></table></div></figure>\n<p>注意 <code>reduce</code> 的第一个参数，这是一个初始值。<code>0 + 1 + 2 + 3 + 4 = 10</code>。</p>\n<p>如果是累乘，则为：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> result = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t\t\t   .reduce(<span class=\"number\">1</span>, (acc, element) -&gt; acc * element);</span><br><span class=\"line\">assertEquals(<span class=\"number\">24</span>, result);</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"数据并行化操作\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#数据并行化操作\"></a> 数据并行化操作<a href=\"java1.8/Stream#数据并行化操作\"></a></h3>\n<p><code>Stream</code> 的并行化也是 Java 8 的一大亮点。数据并行化是指将数据分成块，为每块数据分配单独的处理单元。这样可以充分利用多核 CPU 的优势。</p>\n<p>并行化操作流只需改变一个方法调用。如果已经有一个 <code>Stream</code> 对象，调用它的 <code>parallel()</code> 方法就能让其拥有并行操作的能力。如果想从一个集合类创建一个流，调用 <code>parallelStream()</code> 就能立即获得一个拥有并行能力的流。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sumSize = Stream.of(<span class=\"string\">\"Apple\"</span>, <span class=\"string\">\"Banana\"</span>, <span class=\"string\">\"Orange\"</span>, <span class=\"string\">\"Pear\"</span>)</span><br><span class=\"line\">\t\t\t\t\t.parallel()</span><br><span class=\"line\">\t\t\t\t\t.map(s -&gt; s.length())</span><br><span class=\"line\">\t\t\t\t\t.reduce(Integer::sum)</span><br><span class=\"line\">\t\t\t\t\t.get();</span><br><span class=\"line\">assertEquals(sumSize, <span class=\"number\">21</span>);</span><br></pre></td></tr></table></div></figure>\n<p>这里求的是一个字符串列表中各个字符串长度总和。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1046505/201610/1046505-20161020160307935-1086007264.png\" alt=\"img\" class=\"article-img\"></p>\n<p>如果你去计算这段代码所花的时间，很可能比不加上 <code>parallel()</code> 方法花的时间更长。这是因为数据并行化会先对数据进行分块，然后对每块数据开辟线程进行运算，这些地方会花费额外的时间。并行化操作只有在 <strong>数据规模比较大</strong> 或者 <strong>数据的处理时间比较长</strong> 的时候才能体现出有事，所以并不是每个地方都需要让数据并行化，应该具体问题具体分析。</p>\n<h3 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#其他\"></a> 其他<a href=\"java1.8/Stream#其他\"></a></h3>\n<h4 id=\"收集器\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#收集器\"></a> 收集器<a href=\"java1.8/Stream#收集器\"></a></h4>\n<p><code>Stream</code> 转换为 <code>List</code> 是很常用的操作，其他 <code>Collectors</code> 还有很多方法，可以将 <code>Stream</code> 转换为 <code>Set</code>, 或者将数据分组并转换为 <code>Map</code>，并对数据进行处理。也可以指定转换为具体类型，如 <code>ArrayList</code>, <code>LinkedList</code> 或者 <code>HashMap</code>。甚至可以自定义 <code>Collectors</code>，编写自己的收集器。</p>\n<h4 id=\"元素顺序\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#元素顺序\"></a> 元素顺序<a href=\"java1.8/Stream#元素顺序\"></a></h4>\n<p>另外一个尚未提及的关于集合类的内容是流中的元素以何种顺序排列。一些集合类型中的元素是按顺序排列的，比如 List；而另一些则是无序的，比如 HashSet。增加了流操作后，顺序问题变得更加复杂。</p>\n<p>总之记住。如果集合本身就是无序的，由此生成的流也是无序的。一些中间操作会产生顺序，比如对值做映射时，映射后的值是有序的，这种顺序就会保留 下来。如果进来的流是无序的，出去的流也是无序的。</p>\n<p>如果我们需要对流中的数据进行排序，可以调用 <code>sorted</code> 方法：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Lists.newArrayList(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">List&lt;Integer&gt; sortedList = list.stream()</span><br><span class=\"line\">\t\t\t\t\t\t\t   .sorted(Integer::compareTo)</span><br><span class=\"line\">\t\t\t\t\t\t\t   .collect(Collectors.toList());</span><br><span class=\"line\">assertEquals(sortedList, Lists.newArrayList(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>));</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"functionalinterface\"><a class=\"markdownIt-Anchor\" href=\"java1.8/Stream#functionalinterface\"></a> @FunctionalInterface<a href=\"java1.8/Stream#functionalinterface\"></a></h4>\n<p>我们讨论过函数接口定义的标准，但未提及 @FunctionalInterface 注释。事实上，每个用作函数接口的接口都应该添加这个注释。</p>\n<p>但 Java 中有一些接口，虽然只含一个方法，但并不是为了使用 Lambda 表达式来实现的。比如，有些对象内部可能保存着某种状态，使用带有一个方法的接口可能纯属巧合。</p>\n<p>该注释会强制 javac 检查一个接口是否符合函数接口的标准。如果该注释添加给一个枚举类型、类或另一个注释，或者接口包含不止一个抽象方法，javac 就会报错。重构代码时，使用它能很容易发现问题。</p>\n","prev":{"title":"java1.8/IO-NIO","link":"java1.8/IO-NIO"},"next":{"title":"Redis","link":"Redis"},"plink":"ilucia.github.io/java1.8/Stream/","copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2022年4月27日","updated":"2022年4月27日"}}