{"title":"操作系统原理总结","date":"2019-06-18T23:03:06.000Z","link":"Review/OS","tags":["os","review"],"categories":["review"],"updated":"2022-04-27T15:24:01.619Z","content":"<p>[TOC]</p>\n<h1 id=\"chapter-1-introduction\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-1-introduction\"></a> Chapter 1 Introduction<a href=\"Review/OS#chapter-1-introduction\"></a></h1>\n<ul>\n<li>\n<p>System view<br>\n_ Resource allocator<br>\n_ Control program</p>\n</li>\n<li>\n<p>Dual-Mode Operation<br>\n_ User mode<br>\n_ Kernel mode<br>\n_ privileged instruction<br>\n_ <img src=\"/Review/OS/1555051141346.png\" alt=\"\"><br>\n_ <img src=\"/OS/1555051141346.png\" alt=\"\"><br>\n_ Hardware<br>\n_ <strong>CPU protection</strong><br>\n_ <strong>timer</strong><br>\n_ <strong>time sharing</strong><br>\n_ <strong>memory protection</strong><br>\n_ <strong>Base register</strong><br>\n_ <strong>Limit register</strong><br>\n_ <strong>I/O protection</strong><br>\n_ <strong>all I/O instruction are privilege instructions</strong></p>\n</li>\n<li>\n<p>Development of OS * mainframe systems</p>\n<pre><code>\t\t*   NO OS\n\t\t*   **batch systems**\n\t\t*   **multiprogramming systems**\n\t\t*   **time sharing systems**\n\n\t*   desktop systems\n\n\t*   multiprocessor systems\n\n\t*   distributed systems\n\n\t*   clustered systems\n\n\t*   real-time systems\n\n\t*   handheld systems\n\n\t*   现代操作系统的特征\n\n\t\t*   **并发性Concurrence**\n\t\t*   **共享性Sharing**\n\t\t*   **虚拟性Virtual**\n\t\t*   **异步性Asynchronism**\n\t\t*   提高CPU利用率，充分发挥并发性：**程序之间、设备之间、设备与CPU之间**均**并发**\n\n\t*   Pr：\n\n\t\t批处理系统、多道程序系统和分时系统的技术特性\n</code></pre>\n</li>\n</ul>\n<h1 id=\"chapter-2-operating-system-structures\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-2-operating-system-structures\"></a> Chapter 2 Operating-System Structures<a href=\"Review/OS#chapter-2-operating-system-structures\"></a></h1>\n<ul>\n<li>功能和服务的差别：\n<ul>\n<li>功能对内：自行实现</li>\n<li>服务对外：可以调用其他功能代为实现</li>\n</ul>\n</li>\n<li>common function of OS\n<ul>\n<li>process management\n<ul>\n<li>process synchronization</li>\n<li>process communication</li>\n<li>deadlock handling</li>\n<li>(分布式)</li>\n</ul>\n</li>\n<li>main memory management</li>\n<li>secondary-storage management</li>\n<li>file management</li>\n<li>I/O system management</li>\n</ul>\n</li>\n<li>Operating System Services(Services for <strong>helping users</strong>)\n<ul>\n<li>Program execution</li>\n<li>I/O operations</li>\n<li>File-system manipulation</li>\n<li>Communications</li>\n<li>Error detection</li>\n<li>Resource allocation</li>\n<li>Accounting(审计)</li>\n<li>Protection</li>\n</ul>\n</li>\n<li>Operating System Interface\n<ul>\n<li>Interface to programs\n<ul>\n<li><strong>System calls</strong>\n<ul>\n<li>System-call interface(SCI)</li>\n<li>Application Programming Interface(API)\n<ul>\n<li>managed by runtime support library</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><img src=\"/Review/OS/1555145491705.png\" alt=\"\"></li>\n<li><img src=\"/OS/1555145491705.png\" alt=\"\">\n<ul>\n<li>Types of System calls\n<ul>\n<li>Process control</li>\n<li>File management</li>\n<li>Device management</li>\n<li>Information maintenance</li>\n<li>Communications</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>PR. Why do user use APIs rather than system calls directory?</strong></li>\n<li><strong>Ans</strong>\n<ol>\n<li>跨平台能力（提供相同的 API 封装）移植性好</li>\n<li>模块化封装，可维护性好</li>\n<li>简化了程序编写</li>\n<li>提高了执行效率</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Operating System Structure\n<ul>\n<li>Simple structure</li>\n<li>Layered structure\n<ul>\n<li>virtual machines</li>\n</ul>\n</li>\n<li>Microkernel structure\n<ul>\n<li>Benefis\n<ul>\n<li>easier to extend</li>\n<li>easier to port</li>\n<li>more reliable</li>\n<li>more secure</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Modules</li>\n<li>PR:设计操作系统时采用的模块化内核方法和分层方法在那些方面类似？那些方面不同？</li>\n</ul>\n</li>\n<li>Operating system design and implementation</li>\n<li>小结\n<ul>\n<li>操作系统概念（管理资源、支持程序运行、方便用户使用的<strong>程序集</strong>）</li>\n<li>操作系统的基本目标：<strong>方便性和高效性</strong></li>\n<li>引导程序：<strong>中断、中断处理程序、中断向量</strong></li>\n<li>储存结构：内存（<strong>小、易失</strong>）二级储存（<strong>大、非易失</strong>）、分层结构</li>\n<li>I/O 结构：设备控制器（本地缓冲）、DMA</li>\n<li>硬件保护：<strong>双重模式操作、特权指令、I/O 保护、内存保护、CPU 保护</strong></li>\n<li>操作系统的发展：e.g: 多道程序设计</li>\n<li>操作系统的功能：进程（CPU）管理、内存管理、磁盘管理、文件管理、I/O 管理、<strong>用户接口</strong></li>\n<li>操作系统服务：<strong>程序执行、I/O 操作、文件系统操作、通信、错误检测与处理</strong>、资源分配、统计、保护</li>\n<li>操作系统接口：用户接口（CLI、GUI）、程序接口（<strong>系统调用（参数传递、类型）</strong>）、SCI、API</li>\n<li>操作系统结构</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-3-process\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-3-process\"></a> Chapter 3 Process<a href=\"Review/OS#chapter-3-process\"></a></h1>\n<ul>\n<li>\n<p>Process</p>\n<ul>\n<li>test section(program code)</li>\n<li><strong>program counter</strong></li>\n<li><strong>contents of the processer’s registers</strong></li>\n<li>Heap-stack</li>\n<li>data section</li>\n<li><img src=\"/Review/OS/1555171608763.png\" alt=\"\"></li>\n<li><img src=\"OS/1555171608763.png\" alt=\"\"></li>\n<li><strong>Characteristic of process</strong>\n<ul>\n<li><strong>Dynamic 动态性</strong></li>\n<li><strong>Independency 独立性</strong></li>\n<li><strong>Concurrence 并发性</strong></li>\n<li><strong>Structure 结构化</strong></li>\n</ul>\n</li>\n<li>PR.进程和程序是两个密切相关的概念，请阐述他们之间的区别和联系</li>\n<li>Process state</li>\n<li><img src=\"/Review/OS/1555173365887.png\" alt=\"\"></li>\n<li><img src=\"OS/1555173365887.png\" alt=\"\"></li>\n<li>Process control block(PCB)</li>\n<li><img src=\"/Review/OS/1555173537094.png\" alt=\"\"></li>\n<li><img src=\"OS/1555173537094.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>\n<p>Process scheduling queues</p>\n<ul>\n<li>Job queue (in main memory)\n<ul>\n<li>Ready queue</li>\n<li>device queues\n<ul>\n<li>process migration between the various queues</li>\n<li><img src=\"/Review/OS/1555217568804.png\" alt=\"\"></li>\n<li><img src=\"OS/1555217568804.png\" alt=\"\"></li>\n<li><img src=\"/Review/OS/1555217608602.png\" alt=\"\"></li>\n<li><img src=\"OS/1555217608602.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>Schedulers\n<ul>\n<li>Long-term scheduler(秒级、分钟级，作业调度)</li>\n<li>Short-term scheduler(毫秒级，CPU 调度)</li>\n<li>Medium-term scheduler(swapping)</li>\n</ul>\n</li>\n<li>I/O bound process</li>\n<li>CPU bound process</li>\n<li>Context switch\n<ul>\n<li>The <strong>context</strong> of a process is represented in <strong>PCB</strong> of the process and includes the values of CPU registers.</li>\n<li>保存执行后的上下文信息</li>\n<li>上下文切换会带来开销</li>\n<li>尽量减少上下文切换以减少开销</li>\n<li><img src=\"/Review/OS/1555685657476.png\" alt=\"\"></li>\n<li><img src=\"OS/1555685657476.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Operation on Process</p>\n<ul>\n<li>\n<p>Process creation</p>\n<ul>\n<li>\n<p>child process(unique process identifier(int)), tree of process</p>\n</li>\n<li>\n<p>resource sharing</p>\n<ul>\n<li>parent and children shall all resources</li>\n<li>children share subset of parent’s resources</li>\n<li>parent and child share no resources</li>\n</ul>\n</li>\n<li>\n<p>Execution</p>\n<ul>\n<li>Parent and children execute concurrently</li>\n<li>Parent waits until children terminate</li>\n</ul>\n</li>\n<li>\n<p>Address space</p>\n<ul>\n<li>\n<p>child duplicate of parent</p>\n</li>\n<li>\n<p>child has a program loaded into it (new text section)</p>\n</li>\n<li>\n<p>UNIX examples</p>\n<ul>\n<li>\n<p>fork() :create new process</p>\n</li>\n<li>\n<p>exec() :used after a fork to replace the process’s memory space with a new program</p>\n<p><img src=\"/Review/OS/1555737064290.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p><img src=\"OS/1555737064290.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pid = fork();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(pid&lt;<span class=\"number\">0</span>)\t<span class=\"comment\">/* error occured */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"Fork failed\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pid==<span class=\"number\">0</span>)\t<span class=\"comment\">/* child process */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    execlp(<span class=\"string\">\"/bin/ls\"</span>,<span class=\"string\">\"ls\"</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>\t<span class=\"comment\">/* parent process */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wait(<span class=\"literal\">NULL</span>);\t<span class=\"comment\">/* wait for child process to finish */</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Child complete\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>Process Termination</p>\n<ul>\n<li>exit() process executes last statement and asks the operating system to delete it\n<ul>\n<li>output data from child to parent (via wait)</li>\n<li>Process’s resources are deallocated by OS</li>\n</ul>\n</li>\n<li>abort() parent may terminate execution of children process\n<ul>\n<li>child has exceeded allocated resources</li>\n<li>task assigned to child is no longer required</li>\n<li>parent is exiting <small><sup>*</sup>not all of the operation system supports <strong>Cascading termination(级联终止)</strong></small></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Inter-process Communication(<strong>IPC</strong>)</p>\n<ul>\n<li>\n<p><strong>Independent</strong> process cannot affect or be effected by the execution of another process</p>\n</li>\n<li>\n<p><strong>Cooperating</strong> process can affect or be effected by the execution of another process</p>\n<ul>\n<li>\n<p>Advantages</p>\n<ol>\n<li>\n<p>Information sharing</p>\n</li>\n<li>\n<p>Computation speed-up</p>\n</li>\n<li>\n<p>Modularity</p>\n</li>\n<li>\n<p>Convenience</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Shared memory &amp; Message passing</strong></p>\n<p><img src=\"/Review/OS/1555742278383.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1555742278383.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>Shared-memory Systems</p>\n<pre><code>\t- requiring communication process to establish a region of shared memory\n\t- a shared memory region resides in the address space of the process creating the shared memory segment\n\t- the processes are responsible for ensuring that they are not writing to the **same location simultaneously**\n\t\t- Producer-Consumer Problem\n</code></pre>\n</li>\n<li>\n<p>Message-passing Systems</p>\n<pre><code>\t- MPS has two operations\n\n\t\t- send()\n\t\t- receive()\n\n\t- communication link\n\n\t\t1. link may be unidirectional or bidirectional (双向)\n\n\t\t2. a link may be associated with many processes\n\n\t\t- direct communication\n\n\t\t\t- send(P,message) send a message to process P\n\t\t\t- receive(Q,message)  receive a message from process Q\n\n\t\t- indirect communication\n\n\t\t\t- mailboxes\n\n\t\t\t\t- each mailbox has a unique id\n\n\t\t\t\t- two processes can communicate only if the share a mailbox\n\n\t\t\t\t- Operations\n\n\t\t\t\t\t&gt; 1. create a new mailbox\n\t\t\t\t\t&gt; 2. send and receive messages through mailbox\n\t\t\t\t\t&gt; 3. destroy a mail box\n</code></pre>\n</li>\n<li>\n<p>Synchronization</p>\n<pre><code>\t- Blocking: synchronous\n\t- Non-blocking: asynchronous\n</code></pre>\n</li>\n<li>\n<p>Buffering</p>\n<pre><code>\t- **Zero capacity** sender must wait for receiver\n\t- **Bounded capacity** finite length of $n$ messages, sender must wait if link full\n\t- **Unbounded capacity** infinite length, sender never blocks\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Communication in Client-Server System</p>\n<ul>\n<li><strong>Sockets</strong></li>\n<li><strong>Remote Procedure Calls</strong></li>\n<li><strong>Remote Method Invocation (Java)</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-4-threads\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-4-threads\"></a> Chapter 4 Threads<a href=\"Review/OS#chapter-4-threads\"></a></h1>\n<ul>\n<li>\n<p>Multithreading Models</p>\n<ul>\n<li>\n<p>A thread is a flow of control within a process</p>\n</li>\n<li>\n<p>thread is a <strong>basic</strong> unit of CPU execution (known as light weight Process(LWP))</p>\n</li>\n<li>\n<p>process (heavy weight process(HWP)) has a <strong>single</strong> thread of control</p>\n</li>\n<li>\n<p>multithreaded process contains several <strong>different</strong> flows of control within the <strong>same</strong> address space</p>\n</li>\n<li>\n<p>Thread</p>\n<ul>\n<li>\n<p>has</p>\n<ul>\n<li>thread ID</li>\n<li>program counter</li>\n<li>register set</li>\n<li>stack</li>\n</ul>\n</li>\n<li>\n<p>share</p>\n<ul>\n<li>\n<p>code section</p>\n</li>\n<li>\n<p>data section</p>\n</li>\n<li>\n<p>other OS resources(file and signals)</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n</li>\n<li>\n<p>Benefits</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- resource sharing</span><br><span class=\"line\">- economy(low cost in overhead of creating and context-switch)</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>User Threads</p>\n<ul>\n<li>\n<p>user threads are supported above the kernel. The kernel is <strong>not</strong> aware of user threads</p>\n</li>\n<li>\n<p>Library provides all support for thread creation, termination, joining and scheduling</p>\n</li>\n<li>\n<p>more efficient(no kernel intervention)</p>\n</li>\n<li>\n<p>if one thread is blocked, every other threads of the same process are also blocked(containing process is blocked)</p>\n<p><img src=\"/Review/OS/1555764073008.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1555764073008.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>Kernel Threads</p>\n<ul>\n<li>\n<p>kernel threads are usually <strong>slower</strong> than the user threads</p>\n</li>\n<li>\n<p>blocking one thread will <strong>not</strong> cause other threads of the same process to block</p>\n</li>\n<li>\n<p>the kernel can schedule threads on different processors(in a multiprocessor environment)</p>\n<p><img src=\"/Review/OS/1555764320920.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1555764320920.png\" alt=\"\" class=\"article-img\"></p>\n<p><strong>Pr.</strong></p>\n<ol>\n<li>进程和线程之间的区别和联系</li>\n<li>用户级线程和内核级线程的区别</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Multithreading models</p>\n<ul>\n<li>\n<p>many to one</p>\n<ul>\n<li>only one thread in the one process can access the kernel at a time</li>\n<li>true concurrency is not gained</li>\n</ul>\n<p><img src=\"/Review/OS/1555767057845.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1555767057845.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>one to one</p>\n<ul>\n<li>\n<p>each user-level thread maps to kernel thread</p>\n</li>\n<li>\n<p>providing more concurrency</p>\n</li>\n<li>\n<p>restricting the number of threads supported by the system</p>\n<p><img src=\"/Review/OS/1555767300046.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1555767300046.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>many to many</p>\n<ul>\n<li>\n<p>allow many user level threads to be mapped to many kernel threads</p>\n<p><img src=\"/Review/OS/1555767517744.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1555767517744.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Thread Libraries</p>\n<ul>\n<li>status</li>\n<li></li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_create</span><span class=\"params\">(tid,attr,function,arg)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * pthread_t *tid</span></span><br><span class=\"line\"><span class=\"comment\"> \thandle of created thread</span></span><br><span class=\"line\"><span class=\"comment\"> * const pthread_attr_t *attr</span></span><br><span class=\"line\"><span class=\"comment\"> \tattribes of thread to be created</span></span><br><span class=\"line\"><span class=\"comment\"> * void *(*function)(void)</span></span><br><span class=\"line\"><span class=\"comment\"> \tfunction to be mapped to thread</span></span><br><span class=\"line\"><span class=\"comment\"> * void * arg</span></span><br><span class=\"line\"><span class=\"comment\"> \tsingle argument to function</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_join</span><span class=\"params\">(tid,val_ptr)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * pthread_t *tid</span></span><br><span class=\"line\"><span class=\"comment\"> \thandle of joinable thread</span></span><br><span class=\"line\"><span class=\"comment\"> * void ** var_ptr</span></span><br><span class=\"line\"><span class=\"comment\"> \texit value rturn by joined thread</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pthread_exit</span><span class=\"params\">(<span class=\"keyword\">void</span> *status)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_cancel</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span> thread)</span></span>;\t<span class=\"comment\">//terminated immediately</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_kill</span><span class=\"params\">(<span class=\"keyword\">pthread_t</span> thread,<span class=\"keyword\">int</span> sig)</span></span>;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>CreateThread</li>\n<li>GetCurrentThreadId</li>\n<li>GetCurrentThread</li>\n<li>SuspendThread/ResumeTread</li>\n<li>ExitThread</li>\n<li>TerminateThread</li>\n<li>GetExitCodeThread</li>\n<li>GetThreadTimes</li>\n</ul>\n</li>\n<li>\n<p>Threading Issues</p>\n</li>\n<li>\n<p>Operating System Examples</p>\n</li>\n<li>\n<p>//TODO 关于线程的实现</p>\n</li>\n<li>\n<p><strong>Pr.</strong></p>\n<ul>\n<li>信号机制和中断机制的异同</li>\n</ul>\n</li>\n<li>\n<p>Thread Pools</p>\n<ul>\n<li>advantages - faster to service a request(save the time to create new thread) - allow the number of threads in the application to be bound to the size of the pool</li>\n</ul>\n</li>\n<li>\n<p>Thread specific data</p>\n<ul>\n<li>threads belonging to a process share the data of the process</li>\n<li>allows each thread to have its own copy of data</li>\n<li>when using a thread pool, each thread may be assigned a unique identifier</li>\n</ul>\n</li>\n<li>\n<p>Scheduler activations</p>\n</li>\n<li>\n<p><strong>upcalls</strong></p>\n</li>\n</ul>\n<h1 id=\"chapter-5-cpu-scheduling\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-5-cpu-scheduling\"></a> Chapter 5 CPU Scheduling<a href=\"Review/OS#chapter-5-cpu-scheduling\"></a></h1>\n<ul>\n<li>\n<p>Maximum CPU utilization obtained with multiprogramming</p>\n</li>\n<li>\n<p>The success of CPU scheduling depends on an property of processes:<strong>CPU-I/O Burst Cycle</strong></p>\n<ul>\n<li>process execution consists of a <strong>cycle</strong> of CPU execution and I/O wait.</li>\n</ul>\n</li>\n<li>\n<p>CPU-bound</p>\n<ul>\n<li>a few very long CPU bursts</li>\n</ul>\n</li>\n<li>\n<p>I/O-bound</p>\n<ul>\n<li>many short CPU bursts</li>\n</ul>\n<p><img src=\"/Review/OS/1555849707110.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1555849707110.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>When the CPU is idle, the OS must select another ready process to run</p>\n</li>\n<li>\n<p>This selection process is carried out by the <strong>short-term scheduler</strong></p>\n</li>\n<li>\n<p>The CPU scheduler selects a process from <strong>the ready queue</strong> and allocates the CPU to it</p>\n</li>\n<li>\n<p>There are many ways to organize the ready queue<small>(e.g. FIFO)</small></p>\n<p><img src=\"/Review/OS/1555850618923.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1555850618923.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>Circumstances that scheduling may take place</p>\n<ul>\n<li>\n<p>A process switches from the running state to the terminated state(finished)</p>\n</li>\n<li>\n<p>A process switches from the running state to the wait state(e.g. IO operation)</p>\n<p>↑ 主动操作 ↑ 非抢占式调度</p>\n<hr>\n<p>↓ 被动中止 ↓ 抢占式调度 → 同步机制</p>\n</li>\n<li>\n<p>A process switched from the running state to the ready state(e.g. a interrupt occurs)</p>\n</li>\n<li>\n<p>A process switches from the wait state to the ready state(e.g. I/O completion)</p>\n</li>\n<li>\n<p>A process switches from the new state to ready state(e.g. a higher priority process ready)</p>\n</li>\n<li>\n<p>Preemptive(抢占式)</p>\n<ul>\n<li>cost associated with access to <strong>shared data</strong></li>\n<li>When the kernel is in its <strong>critical</strong> section modifying some important data .</li>\n<li>special attention to situation</li>\n</ul>\n</li>\n<li>\n<p>Non-preemptive</p>\n<ul>\n<li>scheduling occurs when a process <strong>voluntarily terminates</strong>(主动结束) (case1)or enters the wait state(case2)</li>\n<li>simple but very inefficient</li>\n</ul>\n</li>\n</ul>\n<p><strong>Pr.</strong></p>\n<p>​ 对于计算中心，抢占式调度和非抢占式调度哪一种比较适合</p>\n<ul>\n<li>Dispatcher(调度) module\n<ul>\n<li>switching context</li>\n<li>switching to user mode</li>\n<li>jumping to the proper location in the user program to restart that program</li>\n</ul>\n</li>\n<li>Dispatch latency\n<ul>\n<li>the dispatcher should be as fast as possible</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Scheduling criteria</p>\n<ul>\n<li>\n<p>CPU utilization</p>\n<ul>\n<li>keep the CPU as busy as possible</li>\n<li>lightly|40%|-|90%|heavily</li>\n</ul>\n</li>\n<li>\n<p>Throughput(吞吐)</p>\n<ul>\n<li>higher throughput means more jobs get done</li>\n</ul>\n<p><small>吞吐量和 CPU 利用率有相关性但并没有直接关系</small></p>\n</li>\n<li>\n<p>Turnaround time</p>\n<ul>\n<li>The time period from job submission to completion is the turnaround time</li>\n</ul>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi></mrow></msub><mo>=</mo><mspace linebreak=\"newline\"></mspace><msub><mi>t</mi><mrow><mi>w</mi><mi>a</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>B</mi><mi>e</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>e</mi><mi>E</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>T</mi><mi>h</mi><mi>e</mi><mi>S</mi><mi>y</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>m</mi></mrow></msub><mo>+</mo><mspace linebreak=\"newline\"></mspace><msub><mi>t</mi><mrow><mi>w</mi><mi>a</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>T</mi><mi>I</mi><mi>m</mi><mi>e</mi><mi>I</mi><mi>n</mi><mi>T</mi><mi>h</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>y</mi><mi>Q</mi><mi>u</mi><mi>e</mi><mi>u</mi><mi>e</mi></mrow></msub><mo>+</mo><mspace linebreak=\"newline\"></mspace><msub><mi>t</mi><mrow><mi>w</mi><mi>a</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>T</mi><mi>I</mi><mi>m</mi><mi>e</mi><mi>I</mi><mi>n</mi><mi>A</mi><mi>l</mi><mi>l</mi><mi>O</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>E</mi><mi>v</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi></mrow></msub><mo>+</mo><mspace linebreak=\"newline\"></mspace><msub><mi>t</mi><mrow><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>T</mi><mi>h</mi><mi>e</mi><mi>P</mi><mi>r</mi><mi>o</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>A</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>y</mi><mi>R</mi><mi>u</mi><mi>n</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>O</mi><mi>n</mi><mi>T</mi><mi>h</mi><mi>e</mi><mi>C</mi><mi>P</mi><mi>U</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">t_{turnaround}=\\\\t_{waitingTimeBeforeEnteringTheSystem}+\\\\ t_{waitingTImeInTheReadyQueue}+\\\\t_{waitingTImeInAllOtherEvents}+\\\\t_{timeTheProcessActuallyRunningOnTheCPU}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">u</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">u</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace newline\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9011879999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault mtight\">h</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault mtight\">s</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mspace newline\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9011879999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault mtight\">h</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault mtight\">Q</span><span class=\"mord mathdefault mtight\">u</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\">u</span><span class=\"mord mathdefault mtight\">e</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mspace newline\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9011879999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\">A</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">h</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mspace newline\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9011879999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault mtight\">h</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">c</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\">s</span><span class=\"mord mathdefault mtight\">s</span><span class=\"mord mathdefault mtight\">A</span><span class=\"mord mathdefault mtight\">c</span><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">u</span><span class=\"mord mathdefault mtight\">a</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathdefault mtight\">u</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault mtight\">h</span><span class=\"mord mathdefault mtight\">e</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">U</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Waiting time</p>\n<ul>\n<li>time in ready queue</li>\n</ul>\n</li>\n<li>\n<p>Response time</p>\n<ul>\n<li>the time form the submission of a request</li>\n</ul>\n</li>\n<li>\n<p>Optimization Criteria</p>\n<ul>\n<li>MAX CPU utilization</li>\n<li>MAX throughtput</li>\n<li>MIN turnaround time(average)</li>\n<li>MIN waiting time</li>\n<li>MIN response time</li>\n</ul>\n</li>\n<li>\n<p>为什么需要 CPU 调度</p>\n<p>大多数任务是CPU和I/O交替使用，</p>\n<p>导致CPU和I/O至少有一个空闲，</p>\n<p>通过调度让需要执行I/O的任务去执行I/O。</p>\n<p>把CPU给需要CPU的任务运行。</p>\n</li>\n<li>\n<p><strong>Scheduling Algorithms</strong></p>\n<ul>\n<li>\n<p>First-Come-First-Served Scheduling (FCFS)</p>\n<ul>\n<li>can easily implemented using a queue</li>\n<li>not preemptive</li>\n<li>convoy effect (护航效应)</li>\n<li>troublesome for time-sharing systems</li>\n</ul>\n</li>\n<li>\n<p>Short-Job-First Scheduling (SJF)</p>\n<ul>\n<li>sorted in next CPU burst length</li>\n<li>can be nonpreemptive and preemptive</li>\n<li><strong>minimum average waiting time for a given set of process</strong></li>\n<li>predict CPU burst: exponential averaging</li>\n<li>long jobs may meet <strong>starvation</strong>!!!</li>\n</ul>\n</li>\n<li>\n<p>Priority Scheduling</p>\n<ul>\n<li>\n<p>each process has a <strong>priority</strong></p>\n</li>\n<li>\n<p>priority may be determined internally or externally</p>\n<ul>\n<li>internal priority\n<ul>\n<li>time limits</li>\n<li>memory requirement</li>\n<li>number of files</li>\n<li>etc.</li>\n</ul>\n</li>\n<li>external priority\n<ul>\n<li>importance of the process (not controlled by the OS)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>starvation/Indefinite block</p>\n<p>a lower priority may never have a chance to run</p>\n<ul>\n<li>Aging\n<ul>\n<li>gradually increase the priority of process what wait in the system for a long time</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Round_Robin Scheduling (RR)(轮询)</p>\n<ul>\n<li>designed for time-sharing systems</li>\n<li>each process is assigned a time quantum/slice</li>\n<li>If the process uses CPU for less than one time quantum, it will release the CPU voluntarily (主动退出)</li>\n<li>when one time quantum is up , that process is preempted by the scheduler and moved to the tail of the list</li>\n<li>Typically, higher average time than SJF, better response time</li>\n<li>time quantum is too large → FCFS</li>\n<li>time quantum is to small → processor sharing (并发)\n<ul>\n<li><em>shorter time quantum means more context switches</em></li>\n</ul>\n</li>\n<li>in general, 80% of the CPU bursts should be shorter than the time quantum</li>\n<li></li>\n</ul>\n</li>\n<li>\n<p>Multilevel Queue Scheduling (多级队列)</p>\n<ul>\n<li>\n<p>partitioned into separate queues</p>\n<ul>\n<li>foreground (interactive)</li>\n<li>background (batch)</li>\n</ul>\n</li>\n<li>\n<p>Each process is assigned permanently to one queue based on some properties of the process</p>\n</li>\n<li>\n<p>Each queue has its own scheduling algorithm</p>\n<ul>\n<li>\n<p>foreground - RR</p>\n</li>\n<li>\n<p>background -FCFS</p>\n<p><img src=\"/Review/OS/1555906275098.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n<p><img src=\"OS/1555906275098.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>Scheduling must be done between the queues\n<ul>\n<li>Fixed priority scheduling (possibility of starvation)</li>\n<li>Time slice\n<ul>\n<li>each queue gets a certain amount of CPU time which it can schedule amongst its processes</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Multilevel Feedback Queue Scheduling</p>\n<ul>\n<li>\n<p>allows process to move between queues</p>\n</li>\n<li>\n<p>aging can be implemented this way</p>\n</li>\n<li>\n<p>If a process use more/less CPU time, it is moved to a queue of lower/higher priority → I/O/CPU-bound process will be in higher/lower priority queues</p>\n</li>\n<li>\n<p>exp</p>\n<p><img src=\"/Review/OS/1555907839535.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1555907839535.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n<ul>\n<li>number of queues</li>\n<li>scheduling algorithms for each queue</li>\n<li>method used to determine when to upgrade a process</li>\n<li>method used to determine when to demote a process</li>\n<li>method used to determine which queue a process will enter when that process needs service</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Multiple-Processor Scheduling</p>\n<ul>\n<li>Homogeneous(同构) processors</li>\n<li>Load balancing\n<ul>\n<li>push migration</li>\n<li>pull migration</li>\n</ul>\n</li>\n<li>Asymmetric multiprocessing (非平衡处理)\n<ul>\n<li>only on processor accesses the system data\n<ul>\n<li>alleviating(降低) the need for data shring</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Symmetric multiprocessing (SMP)\n<ul>\n<li>two processors do <strong>not</strong> choose the same process</li>\n</ul>\n</li>\n<li>Processor Affinity (侵核)\n<ul>\n<li>most SMP systems <strong>try</strong> to avoid migration of processes from one processor to another\n<ul>\n<li>Soft/Hard Affinity (执行过程中可以/不可以侵核)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Real-Time Scheduling</p>\n<ul>\n<li>Hard real-time systems</li>\n<li>the scheduler either <strong>admits</strong> a process and guarantees that the process will complete on-time, or <strong>reject</strong> the request (resource reservation)</li>\n<li>secondary storage and virtual memory will cause unavoidable delay</li>\n<li>Hard real-time systems usually have special software on special hardware</li>\n</ul>\n</li>\n<li>\n<p>Soft real-time systems</p>\n<ul>\n<li>easily doable(可行) within a general system</li>\n<li>may cause unfair resource allocation and longer delay(starvation) for noncritical tasks.</li>\n<li>the CPU scheduler must <strong>prevent aging</strong> to occur(critical tasks may have lower priority)</li>\n<li><strong>The dispatch latency must be small</strong></li>\n</ul>\n</li>\n<li>\n<p>Priority Inversion</p>\n<ul>\n<li>a high-priority process needs to access the data that is currently being accessed by a low-priority process → The high-priority process is blocked by the low-priority process</li>\n<li>priority-inheritance protocol</li>\n</ul>\n</li>\n<li>\n<p>Thread Scheduling</p>\n<ul>\n<li>User-level threads\n<ul>\n<li>thread library</li>\n</ul>\n</li>\n<li>Kernel-level threads\n<ul>\n<li>scheduled by OS</li>\n</ul>\n</li>\n<li>user-level threads must ultimately be mapped to an associated kernel-level thread</li>\n<li>Local scheduling → User-level Thread\n<ul>\n<li>Process-contention Scope (PCS)</li>\n</ul>\n</li>\n<li>Global Scheduling → Kernel-level Thread\n<ul>\n<li>System-contention Scope (SCS)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Algorithm Evaluation</p>\n<ul>\n<li>\n<p>Deterministic modeling (Analytic evaluation) 确定情况下 的情形证明</p>\n</li>\n<li>\n<p>Queueing models 队列模型</p>\n</li>\n<li>\n<p>Simulations 仿真</p>\n</li>\n<li>\n<p>Implementation 证明</p>\n<p><small>从上往下证明力越强，越难证明</small></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Operating System</p>\n<ul>\n<li>Scheduling threads using <strong>preemptive</strong> and <strong>priority-based</strong> scheduling algorithms (Real time, system, time sharing, interactive)</li>\n<li>The default scheduling class for a process is time sharing (multilevel feedback queue)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-6-process-synchronization\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-6-process-synchronization\"></a> Chapter 6 Process Synchronization<a href=\"Review/OS#chapter-6-process-synchronization\"></a></h1>\n<ul>\n<li>\n<p>Bounded-buffer</p>\n<pre><code>\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Shared data</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFFER_SIZE 10</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125; item;</span><br><span class=\"line\">item buffer[BUFFER_SIZE];</span><br><span class=\"line\"><span class=\"keyword\">int</span> in = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> out = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Producer process</span></span><br><span class=\"line\">item nextProduced;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(counter == BUFFER_SIZE);</span><br><span class=\"line\">    \t<span class=\"comment\">//do nothing</span></span><br><span class=\"line\">    buffer[in] = nextProduced;</span><br><span class=\"line\">    in = (in + <span class=\"number\">1</span>) % BUFFER_SIZE;</span><br><span class=\"line\">    counter++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Consumer process</span></span><br><span class=\"line\">item nextConsumed;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(counter == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">    nextConsumed = buffer[out];</span><br><span class=\"line\">    out = (out + <span class=\"number\">1</span>) % BUFFER_SIZE;</span><br><span class=\"line\">    counter--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</code></pre>\n</li>\n<li>\n<p><strong>Atomic operation</strong></p>\n<pre><code>\t- counter++\n\t- counter—\n</code></pre>\n</li>\n<li>\n<p>Race condition</p>\n<pre><code>\t- two or more processes/thread access and manipulate the same data concurrently\n\t- the outcome of the execution depends on the particular order in which the access takes place\n\t- To prevent race conditions, concurrent processes must be synchronized\n</code></pre>\n</li>\n<li>\n<p>The Critical-Section Problem</p>\n<pre><code>\t- Each process has a code segment, called critical section\n\n\t- **Problem**: ensure that when one process is executing in its critical section, no other process is allowed to execute in its critical section\n\n\t- The critical-section problem is to design a protocol that processes can use to cooperate\n\n\t\t┌────────────┐\n\n\t\t|    entry section      |\n\n\t\t├────────────┤\n\n\t\t|    critical section    |\n\n\t\t├────────────┤\n\n\t\t|       exit section      |\n\n\t\t├────────────┤\n\n\t\t|remainder section |\n\n\t\t└────────────┘\n\n\t\t**critical section must run in a mutually exclusive way.**\n</code></pre>\n</li>\n<li>\n<p>Solution to Critical-Section Problem</p>\n<pre><code>\t- Mutual Exclusion (互斥、忙等) → 防止冲突\n\t- Progress (空闲让进) → 进展性\n\t- Bounded Waiting (有限等待) → 进展性\n\t\t- &lt;small&gt;防止饥饿，让权等待，多CPU：死锁&lt;/small&gt;\n\t- **the solution cannot depend on relative speed of processes and scheduling policy**\n\t- Mutual Exclusion\n</code></pre>\n</li>\n<li>\n<p>Bakery Algorithm</p>\n<pre><code>\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//shared data</span></span><br><span class=\"line\">boolean choosing[n];\t<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> number[n];\t\t\t<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    choosing[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    number[i] = max(number[<span class=\"number\">0</span>],number[<span class=\"number\">1</span>],...,number[n<span class=\"number\">-1</span>])+<span class=\"number\">1</span>;</span><br><span class=\"line\">    choosing[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(choosing[j]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((number[j] != <span class=\"number\">0</span>)&amp;&amp;((number[j],j)&lt;(number[i],i)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//critical section</span></span><br><span class=\"line\">    number[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//remainder section</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></div></figure>\n</code></pre>\n</li>\n<li>\n<p>Interrupt Disabling</p>\n<pre><code>\t- disable interrupts → critical section → enable interrupts\n\t- When interrupts are disabled, no context switch will occur in a critical section\n\t- Infeasible in a multiprocessor system because all CPUs must be informed\n\t- Some feature that depend on interrupts (e.g. clock) may not work properly\n</code></pre>\n</li>\n<li>\n<p>Mutual Exclusion (互斥锁)</p>\n<pre><code>\t- TestAndSet\n\n\t\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">boolean <span class=\"title\">TestAndSet</span><span class=\"params\">(boolean &amp;target)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tbooean rv = &amp;target;</span><br><span class=\"line\">    &amp;target = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\t\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//shared data</span></span><br><span class=\"line\">boolean lock = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">//Process P</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(TestAndSet(lock));</span><br><span class=\"line\">    <span class=\"comment\">//critical section</span></span><br><span class=\"line\">    lock = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//remainder section</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</code></pre>\n</li>\n<li>\n<p>Swap</p>\n<pre><code>\t- **atomically** swap two variables\n\n\t\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(boolean &amp;a,boolean &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    boolean temp = &amp;a;</span><br><span class=\"line\">    &amp;a = &amp;b;</span><br><span class=\"line\">    &amp;b = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\t\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Global shared data</span></span><br><span class=\"line\">boolean lock;\t<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//Local variable for each process</span></span><br><span class=\"line\">boolean key;</span><br><span class=\"line\">Process Pi</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tkey = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(key == <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \tSwap(lock,key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//critical section</span></span><br><span class=\"line\">    lock = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//remainder section</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</code></pre>\n</li>\n<li>\n<p>Semaphores</p>\n<pre><code>\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wait(S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(S &lt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t--S;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signal(S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ++S:</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\t- Count semaphore\n\t- Binary semaphore (mutex locks)\n</code></pre>\n</li>\n<li>\n<p>busy waiting (Spinlock)</p>\n</li>\n<li>\n<p>block itself (阻塞方法，使用 PCB 唤醒)</p>\n<pre><code>\t- Define a semaphore as a record\n\n\t\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int value;</span><br><span class=\"line\">    struct process *L;\t//waiting queue</span><br><span class=\"line\">&#125;semaphore;</span><br></pre></td></tr></table></div></figure>\n\n\t\t- block()\n\t\t- wakeup(P)\n\n\t\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wait(S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    S.value--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.value &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//add this process to S.L;</span></span><br><span class=\"line\">        block();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">signal(S)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tS.value++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.value &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//remove a process P from S.L;</span></span><br><span class=\"line\">        wakeup(P);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n  - if the semaphore is negative, its magnitude is the number of process waiting on that semaphore\n  - Busy waiting has not been **completely** eliminated\n  - furthermore, we have limited busy waiting to the critical sections of the wait() and signal() operations\n</code></pre>\n</li>\n<li>\n<p>Deadlock and Starvation</p>\n<pre><code>\t&lt;small&gt;临界资源、同步关系&lt;/small&gt;\n\n\t- Bounded-Buffer Problem\n\n\t\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Shared data</span></span><br><span class=\"line\">Semaphore full = <span class=\"number\">0</span>,empty = n,mutex = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span>\t<span class=\"comment\">//Producer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//produce an item in nextP</span></span><br><span class=\"line\">    wait(empty);</span><br><span class=\"line\">    wait(mutex);</span><br><span class=\"line\">    <span class=\"comment\">//add nextP to buffer</span></span><br><span class=\"line\">    signal(mutex);</span><br><span class=\"line\">    signal(full);</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span>\t<span class=\"comment\">//Consumer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wait(full);</span><br><span class=\"line\">    wait(mutex);</span><br><span class=\"line\">    <span class=\"comment\">//remove an item from buffer to nextC</span></span><br><span class=\"line\">    signal(mutex);</span><br><span class=\"line\">    signal(empty);</span><br><span class=\"line\">    <span class=\"comment\">//consume the item in nextC</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></div></figure>\n\n\t- Readers and Writers Problem\n\n\t\t- Reader first\n\t\t- Writer first\n\n\t\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Shared data</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> readcount;</span><br><span class=\"line\">semaphore wrt = <span class=\"number\">1</span>,mutex = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> readcount = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wait(wrt);</span><br><span class=\"line\">    <span class=\"comment\">//writing</span></span><br><span class=\"line\">    signal(wrt);</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">do</span>\t\t<span class=\"comment\">//Error: 写者饥饿问题</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wait(mutex);</span><br><span class=\"line\">    readcount++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(readcount == <span class=\"number\">1</span>)</span><br><span class=\"line\">        wait(wrt);</span><br><span class=\"line\">    signal(mutex);</span><br><span class=\"line\">    <span class=\"comment\">//reading</span></span><br><span class=\"line\">    wait(mutex);</span><br><span class=\"line\">    readcount--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(readcount == <span class=\"number\">0</span>)</span><br><span class=\"line\">        signal(wrt);</span><br><span class=\"line\">    signal(mutex);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\t- Dining-Philosophers Problem\n\n\t- 过独木桥问题\n\n\t\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Shared data</span><br><span class=\"line\">int countA = 0;\t//A方向上已在独木桥上的行人数目</span><br><span class=\"line\">int countB = 0;\t//B方向上已在独木桥上的新人数目</span><br><span class=\"line\">semaphore MA = 1;\t//countA的互斥锁</span><br><span class=\"line\">semaphore MB = 1;\t//countB的互斥锁</span><br><span class=\"line\">semaphore mutex = 1;\t//实现互斥使用</span><br></pre></td></tr></table></div></figure>\n\n\t\t- A方向过桥\n\n\t\t\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wait(MA);</span><br><span class=\"line\">    countA++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        wait(mutex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    signal(MA);</span><br><span class=\"line\">    <span class=\"comment\">//过桥</span></span><br><span class=\"line\">    wait(MA);</span><br><span class=\"line\">    countA--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(countA == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        signal(mutex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    signal(MA);</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></div></figure>\n</code></pre>\n</li>\n<li>\n<p>Monitors (管程)</p>\n<pre><code>\t- High-level synchronization construct that allows the safe sharing of an abstract data type among concurrent processes\n\n\t\t<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">monitor monitor-name</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tshared variable declarations</span><br><span class=\"line\">\t<span class=\"function\">proceudre body <span class=\"title\">P1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    \t<span class=\"function\">proceudre body <span class=\"title\">P2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#123;<span class=\"comment\">//initialization code&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\t- no more than one process can be executing within a monitor\n\n\t- when a process calls a monitor procedure and the monitor has a process running, the caller will be blocked outside the monitor\n\n\t- Mutual exclusion is guaranteed with in a monitor\n\n\t\t![](/Review/OS/1555948188580.png)\n\n\t\t![](OS/1555948188580.png)\n</code></pre>\n</li>\n<li>\n<p>Condition variables</p>\n<pre><code>- x,y\n\n\t- x.wait() means that the process invoking this operation is suspended until another process invokes x.signal();\n\t- x.signal() operation resumes exactly one suspended process. If no process is suspended, the signal() operation has no effect\n\n\t![](/Review/OS/1555948399247.png)\n\n\t![](OS/1555948399247.png)\n\n\n\t|                          Semaphores                          |                     Condition Variables                      |\n\t| :----------------------------------------------------------: | :----------------------------------------------------------: |\n</code></pre>\n</li>\n</ul>\n<p>| Can be used anywhere, but not in a monitor | Can only be used in monitors |<br>\n| wait() does <strong>not</strong> always block its caller | wait() <strong>always</strong> blocks its caller |<br>\n| signal() either releases a process, or increase the semaphore counter | signal() either releases a process ,or the signal is <strong>lost</strong> as if it never occurs |<br>\n| If signal() release a process, the caller and the release <strong>both</strong> continue | If signal() release a process, either the caller or the released continues, but <strong>not</strong> both | - 管程是公用数据结构，进程是私有数据结构 - 管程集中管理共享变量上的同步操作，临界区分散在每个进程中 - 管程管理共享资源，进程占用系统资源和实现系统并发性 - 管程被欲使用的共享资源的进程调用，管程和调用它的进程不能并发工作，进程之间能并发工作 - 管程是语言或操作系统的成分，不必创建或撤销，进程有生命周期，有创建有消亡</p>\n<h1 id=\"chapter-7-deadlocks\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-7-deadlocks\"></a> Chapter 7 Deadlocks<a href=\"Review/OS#chapter-7-deadlocks\"></a></h1>\n<ul>\n<li>\n<p>system model</p>\n<ul>\n<li>Deadlock\n<ul>\n<li>Resources types R<sub>1</sub> ,R<sub>2</sub> …,R<sub>m</sub></li>\n<li>CPU cycles, memory space, I/O devices, files and so on</li>\n<li>each resource type R<sub>i</sub> has W<sub>i</sub> instances</li>\n<li>request → use → release</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>deadlock characterization</p>\n<ul>\n<li>\n<p>The conditions for deadlock</p>\n<ul>\n<li><strong>mutual exclusion</strong></li>\n<li><strong>hold and wait</strong></li>\n<li><strong>no preemption</strong></li>\n<li><strong>circular wait</strong></li>\n</ul>\n</li>\n<li>\n<p>resource allocation graph</p>\n<ul>\n<li>\n<p>edges E,process P,resource R</p>\n<ul>\n<li>\n<p>request edge P<sub>i</sub>→R<sub>j</sub></p>\n</li>\n<li>\n<p>assignment edge R<sub>j</sub>→P<sub>i</sub></p>\n<p><img src=\"/Review/OS/1560864366616.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560864366616.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"/Review/OS/1560864436908.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560864436908.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"/Review/OS/1560864539855.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560864539855.png\" alt=\"\" class=\"article-img\"></p>\n<blockquote>\n<p>死锁一定循环，循环未必死锁</p>\n<p>当实例只有一个资源时，有循环就会死锁</p>\n<p>但是当实例有多个资源时，循环可能导致死锁（如上图）</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>\n<p>Methods for handling deadlocks</p>\n<ul>\n<li><strong>Ensure</strong> that the system will never enter a deadlock state\n<ul>\n<li>Prevention\n<ul>\n<li>break conditions</li>\n</ul>\n</li>\n<li>Avoidance\n<ul>\n<li>the OS needs more information to determine whether the current request can be satisfied of delayed</li>\n</ul>\n</li>\n<li>Allow the deadlock, detect it, and recover.</li>\n<li>Just ignore it and pretend deadlocks will never happened. 😃</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>deadlock prevention</p>\n<ul>\n<li><s>Mutual Exclusion</s></li>\n<li>hold and wait\n<ul>\n<li>a process must acquire all resources before it runs</li>\n<li>when a process requests for resources, it must hold none\n<ul>\n<li>Resource utilization might be low, since many resources will be held and unused for a long time</li>\n<li>starvation is possible. A process that needs some popular resources may have to wait indefinitely</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>No preemption\n<ul>\n<li>if a process that is holding some resources requests another resource that cannot be immediately allocated to it , then all resources currently being held are <strong>preempted</strong>(抢占)\n<ul>\n<li>if the requested resources are not available\n<ul>\n<li>if they are being held by process that are waiting for additional resources, these resources are preempted and given to the requesting process.</li>\n<li>else, the requesting process waits until the requested resources become available. When it is waiting. its resources may be preempted</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Circular wait\n<ul>\n<li>a process can only request higher than the resources types it holds</li>\n<li>a process must release some higher order resources to request a lower resource</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>deadlock avoidance</p>\n<ul>\n<li>\n<p>all of the process declare the maximum number of resources of each type that it may need</p>\n</li>\n<li>\n<p>the deadlock-avoidance algorithm dynamically exam the resource-allocation state to ensure that there can never be a circular-wait condition</p>\n</li>\n<li>\n<p>Resource-allocation state is defined by the number of available and allocated resources, and the maxium demands of the process</p>\n</li>\n<li>\n<p>Safe state</p>\n</li>\n<li>\n<p>single instance of a resource type</p>\n<ul>\n<li>resource-allocation-graph algorithm\n<ul>\n<li>claim edge p<sub>i</sub>→p<sub>j</sub> indicated that process p<sub>i</sub> may request resource r<sub>j</sub>; represented by a dashed line</li>\n<li>claim edge converts to request edge when a process requests a resource</li>\n<li>when a resource is released by a process, assignment edge reconverts to a claim edge</li>\n<li>resource must be claimed a prior in the system</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>multiple instances of a resource type</p>\n<ul>\n<li>\n<p>banker’s algorithm</p>\n<pre><code>| process | max  | allocation | need |\n| ------- | ---- | ---------- | ---- |\n| P~0~ | [7,5,3] | [0,1,0] |[7,4,3]|\n</code></pre>\n<p>| P<sub>1</sub> | [3,2,2] | [2,0,0] |[1,2,2]|</p>\n<p>available[3,3,2]</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>deadlock detection</p>\n<ul>\n<li>\n<p>maintain wait-for-graph and search for a cycle in the graph</p>\n<ul>\n<li>\n<p>nodes are process</p>\n</li>\n<li>\n<p>P<sub>i</sub>→P<sub>j</sub> is waiting for P<sub>j</sub></p>\n</li>\n<li>\n<p>search for a cycle</p>\n<p><img src=\"Review/OS/1560882859963.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560882859963.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>recovery form deadlock</p>\n<ul>\n<li>Pross termination\n<ul>\n<li>About all deadlocked process</li>\n<li>About one process at a time until the deadlock cycle is established</li>\n</ul>\n</li>\n<li>Resource preemption\n<ul>\n<li>selecting a victim (minimize cost if possible)</li>\n<li>rollback\n<ul>\n<li>return to some safe state restart process for that state</li>\n</ul>\n</li>\n<li>starvation\n<ul>\n<li>same process may always be picked as victim (aging)</li>\n<li>include the number of rollback in the cost factor</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-8-memory-management\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-8-memory-management\"></a> Chapter 8 Memory Management<a href=\"Review/OS#chapter-8-memory-management\"></a></h1>\n<ul>\n<li>\n<p>backgroud</p>\n<ul>\n<li>\n<p>Main memory and register are only storage CPU can access directly</p>\n<ul>\n<li>\n<p>a register access per CPU clock</p>\n</li>\n<li>\n<p>a main memory access many CPU clcok</p>\n</li>\n<li>\n<p>cache sites between main memory and CPU registers</p>\n<ul>\n<li>memory protect</li>\n<li>base and limit registers</li>\n<li>hardware address protection</li>\n<li>multistep processing of a user program\n<ul>\n<li>symbolic address\n<ul>\n<li>source program</li>\n</ul>\n</li>\n<li>relocatable address\n<ul>\n<li>object program</li>\n</ul>\n</li>\n<li>absolute address</li>\n</ul>\n</li>\n<li>complie time\n<ul>\n<li>absolute code</li>\n<li>os, drive</li>\n</ul>\n</li>\n<li>load time\n<ul>\n<li>relocatable code</li>\n</ul>\n</li>\n<li>execution time\n<ul>\n<li>need hardware support</li>\n</ul>\n</li>\n<li>Logical &amp; Physical address space\n<ul>\n<li>logical address\n<ul>\n<li>generated by the CPU; referred to as virtual address</li>\n</ul>\n</li>\n<li>physical address\n<ul>\n<li>seen by the memory unit</li>\n</ul>\n</li>\n<li>logical and physical addresses are the same in compile-time and load-time address-binding schemes and differ in execution</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/Review/OS/1560924916695.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560924916695.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>Memory-Management Unit(MMU)</p>\n<ul>\n<li>\n<p>maps logical address to physical address</p>\n</li>\n<li>\n<p>the value in relocation(base) register is added to every address generated by a user process at the time it is sent to memory</p>\n</li>\n<li>\n<p>The user program deals with logical addresses</p>\n<p><img src=\"/Review/OS/1560926018233.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560926018233.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Dynamic loading</p>\n<ul>\n<li>linking and loading postponed until execution time</li>\n</ul>\n</li>\n<li>\n<p>swapping</p>\n<ul>\n<li>\n<p>backing store: fast disk</p>\n</li>\n<li>\n<p>ready queue</p>\n<ul>\n<li>consisting of all processes on the backing store or in memory and are ready to run</li>\n<li>major part of swap time is transfer time; total transfer time is directly proportional to the amount of memory swapped</li>\n</ul>\n<p><img src=\"/Review/OS/1560926880623.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560926880623.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>contiguous allocation</p>\n<ul>\n<li>\n<p>main memory is usually divided into two partitions</p>\n<ul>\n<li>resident operation system</li>\n<li>user processes</li>\n</ul>\n</li>\n<li>\n<p>relocation register scheme used to protect user process from each other, and from changing operating system code and data</p>\n</li>\n<li>\n<p>allocation types</p>\n<ul>\n<li>\n<p>fixed partitions</p>\n<ul>\n<li>\n<p>memory is divided into n partitions at the startup time and altered later on</p>\n</li>\n<li>\n<p>each partition may contain exactly only one process</p>\n</li>\n<li>\n<p>each partition may have a job queue. Or, all partitions share the same job queue</p>\n<p><img src=\"/Review/OS/1560927344026.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560927344026.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>variable partitions</p>\n<ul>\n<li>\n<p>hole</p>\n</li>\n<li>\n<p>when a process arrives, it is allocated memory from a hole large enough to accommodate it</p>\n</li>\n<li>\n<p>the partition sized are not fixed</p>\n</li>\n<li>\n<p>os maintains maintains information about</p>\n<ul>\n<li>\n<p>allocated partitions</p>\n</li>\n<li>\n<p>free partitions</p>\n<p><img src=\"/Review/OS/1560927492717.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560927492717.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n<ul>\n<li>\n<p>First fit</p>\n<ul>\n<li>性能较好</li>\n</ul>\n</li>\n<li>\n<p>Best fit</p>\n<ul>\n<li>使用率最优</li>\n</ul>\n</li>\n<li>\n<p>worst fit</p>\n<ul>\n<li>烂差</li>\n</ul>\n</li>\n<li>\n<p>external fragmentation: hole</p>\n<ul>\n<li>external fragmentation problem exists when there is enough total free memory space to satisfy a request, but the available spaces are not contiguous</li>\n<li>compaction(一般不用 ,开销较大)</li>\n<li>permitting the physical address space of the processes to be noncontiguous\n<ul>\n<li>paging and segmentation</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>internal fragmentation</p>\n<p><img src=\"/Review/OS/1560928806181.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560928806181.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>paging</p>\n<ul>\n<li>\n<p>physical memory: pages</p>\n</li>\n<li>\n<p>logical memory: frames</p>\n</li>\n<li>\n<p>page table</p>\n<ul>\n<li>keep track of all free frames</li>\n<li>to run a program of size n pages, need to find n free frames and load program</li>\n<li><strong>Still have internal Fragmentation</strong></li>\n</ul>\n</li>\n<li>\n<p>address generated by CPU can be divided into</p>\n<ul>\n<li>\n<p>Page number§</p>\n<ul>\n<li>base address of each page</li>\n</ul>\n</li>\n<li>\n<p>Page offset(d)</p>\n</li>\n<li>\n<p>a 2<sup>m</sup> space logical address</p>\n<table>\n<thead>\n<tr>\n<th>page number</th>\n<th>page offset</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>p</td>\n<td>d</td>\n</tr>\n<tr>\n<td>m-n</td>\n<td>n</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><img src=\"/Review/OS/1560929566375.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560929566375.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"/Review/OS/1560929607948.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560929607948.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>most allocate a page table for each process</li>\n<li>in the simplest case, the page table is implemented as a set of dedicated registers</li>\n<li>The use of registers is fit for the small page tables and not is fit for the large page tables</li>\n<li>page table is kept in main memory</li>\n<li>page-table base register(PTBR) points to the page table</li>\n<li>require two memory accesses, one for page table and another for memory</li>\n</ul>\n</li>\n<li>\n<p>Implementation of page table(TLB)</p>\n</li>\n<li>\n<p>the two memory access problem can be solved by the use of special fast-lookup hardware</p>\n<ul>\n<li>associative memory or translation look-aside buffer</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>page#</th>\n<th>frame#</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>xxx</td>\n<td>xxx</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>if page# is in associative register, get frame# out. Else, get frame# from page table</p>\n<p><img src=\"/Review/OS/1560931623674.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560931623674.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>\n<p>some TLBs store address-space identifiers (ASIDs) in each TLB entry to provide address space protection for process</p>\n</li>\n<li>\n<p>Effective Access Time</p>\n<ul>\n<li>\n<p>Hit ratio(命中率)(assume memory cycle time is 1 microsecond)</p>\n<table>\n<thead>\n<tr>\n<th><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span></th>\n<th>hit ratio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ε</span></span></span></span> time unit</td>\n<td>TLB lookup</td>\n</tr>\n<tr>\n<td>effective access time(EAT)</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mn>1</mn><mo>+</mo><mi>ε</mi><mo>)</mo><mi>α</mi><mo>+</mo><mo>(</mo><mn>2</mn><mo>+</mo><mi>ε</mi><mo>)</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo>)</mo><mo>=</mo><mn>2</mn><mo>+</mo><mi>ε</mi><mo>−</mo><mo>−</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">(1+\\varepsilon)\\alpha+(2+\\varepsilon)(1-\\alpha)=2+\\varepsilon--\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">ε</span><span class=\"mclose\">)</span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">ε</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">ε</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n<li>\n<p>Memory protection</p>\n<ul>\n<li>page table length register(PTLR) stores the length of a process’s page table</li>\n<li>read-only,read-write,or execute bits(r-w-e permission)</li>\n</ul>\n</li>\n<li>\n<p>Shared pages</p>\n<ul>\n<li>\n<p>share common code</p>\n</li>\n<li>\n<p>one copy of read-only code for many process they need</p>\n<p><img src=\"/Review/OS/1560932427115.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560932427115.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>structure of page table</p>\n<ul>\n<li>\n<p>Hierarchical paging(分层)</p>\n<ul>\n<li>\n<p>common in 32 bits</p>\n</li>\n<li>\n<p>two-level page table</p>\n</li>\n<li>\n<p>a logical address is as follows</p>\n<p><img src=\"/Review/OS/1560932599492.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"/OS/1560932599492.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>p<sub>1</sub> is an index into the outer page table, and p<sub>2</sub> is the displacement within the page of the outer page table(页目录表)</p>\n<p><img src=\"/Review/OS/1560932755687.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560932755687.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"/Review/OS/1560932806472.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560932806472.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>three-level paging scheme</p>\n<p><img src=\"/Review/OS/1560932861276.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560932861276.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>hashed page tables</p>\n<ul>\n<li>\n<p>common in address spaces &gt; 32 bits</p>\n</li>\n<li>\n<p>The virtual page number is hashed into a page table.</p>\n<p><img src=\"/Review/OS/1560932969364.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560932969364.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>inverted page tables</p>\n<ul>\n<li>\n<p>One entry for each real frame of memory.</p>\n</li>\n<li>\n<p>Entry consists of the virtual address of the page stored in that real memory location, with information about the process that owns that page.</p>\n</li>\n<li>\n<p>Decreases memory needed not to store each page table, but increases time needed to search the table when a page reference occurs.</p>\n</li>\n<li>\n<p>Use hash table to limit the search to one or at most a few page-table entries.</p>\n<p><img src=\"/Review/OS/1560937861311.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560937861311.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>segmentation</p>\n<ul>\n<li>\n<p>a program is a collection of segments. A segment is a logical unit such as</p>\n<ul>\n<li>\n<p>main program, procedure, function , method, object, object, local variables, global variables, common block, stack, symbol table, arrays</p>\n</li>\n<li>\n<p>logical address consists of &lt;segment-number,offset&gt;</p>\n</li>\n<li>\n<p>segment table</p>\n<ul>\n<li>\n<p>base</p>\n</li>\n<li>\n<p>limit</p>\n<p><img src=\"/Review/OS/1560940193069.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560940193069.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>validation bit = 0 → illegal segment</p>\n</li>\n<li>\n<p>read/write/execute privileges</p>\n<p><img src=\"/Review/OS/1560940487165.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560940487165.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-9-virtual-memory\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-9-virtual-memory\"></a> Chapter 9 Virtual Memory<a href=\"Review/OS#chapter-9-virtual-memory\"></a></h1>\n<ul>\n<li>\n<p>background</p>\n<ul>\n<li>logic address space can be larger than physical address space</li>\n<li>shares library using virtual memory</li>\n<li>copy on write\n<ul>\n<li>process creation</li>\n<li>copy on write(COW) allows both parent and child processed to initially share the same pages in memory</li>\n<li>if either process modifies a shared page, then only the page is copied</li>\n<li>COW allows more efficient process creation as only are copied</li>\n<li>free pages are allocated from a pool of zeroed-filled pages</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>demand paging</p>\n<ul>\n<li>\n<p>bring a page into memory only when it is needed</p>\n<ul>\n<li>less I/O needed</li>\n<li>less memory needed</li>\n<li>faster response</li>\n<li>more users</li>\n</ul>\n</li>\n<li>\n<p>page is needed → reference to it</p>\n<ul>\n<li>invalid reference → abort</li>\n<li>not in memory → bring to memory</li>\n</ul>\n</li>\n<li>\n<p>Lazy swapper(Pager)</p>\n</li>\n<li>\n<p>valid-invalid bit</p>\n<ul>\n<li>1- valid and in memory</li>\n<li>0- invalid or not in memory(default)</li>\n</ul>\n</li>\n<li>\n<p>page fault</p>\n<ul>\n<li>\n<p>invalid reference &gt; abort</p>\n</li>\n<li>\n<p>just not in memory</p>\n</li>\n<li>\n<p>get empty frame</p>\n</li>\n<li>\n<p>swap page into farame</p>\n</li>\n<li>\n<p>reset tables validation bit = 1</p>\n</li>\n<li>\n<p>restart instruction</p>\n<p><img src=\"/Review/OS/1560944517042.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560944517042.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>page fault rate p</li>\n<li>p==0, no page faults</li>\n<li>p==1, every reference is a fault</li>\n<li>Effective Access Time(EAT)\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mi>A</mi><mi>T</mi><mo>=</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo>)</mo><mo>×</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>y</mi><mtext> </mtext><mi>a</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mtext> </mtext><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>+</mo><mi>p</mi><mo>(</mo><mi>p</mi><mi>a</mi><mi>g</mi><mi>e</mi><mtext> </mtext><mi>f</mi><mi>a</mi><mi>u</mi><mi>l</mi><mi>t</mi><mtext> </mtext><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">EAT = (1-p)\\times memory\\ access\\ time + p(page\\ fault\\ overhead)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">d</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mi>a</mi><mi>g</mi><mi>e</mi><mtext> </mtext><mi>f</mi><mi>a</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo>=</mo><mi>s</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>i</mi><mi>c</mi><mi>e</mi><mtext> </mtext><mi>t</mi><mi>h</mi><mi>e</mi><mtext> </mtext><mi>p</mi><mi>a</mi><mi>g</mi><mi>e</mi><mo>=</mo><mi>f</mi><mi>a</mi><mi>u</mi><mi>l</mi><mi>t</mi><mtext> </mtext><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>u</mi><mi>p</mi><mi>t</mi><mo>+</mo><mo>[</mo><mi>s</mi><mi>w</mi><mi>a</mi><mi>p</mi><mtext> </mtext><mi>p</mi><mi>a</mi><mi>g</mi><mi>e</mi><mtext> </mtext><mi>o</mi><mi>u</mi><mi>t</mi><mo>]</mo><mo>+</mo><mi>s</mi><mi>w</mi><mi>a</mi><mi>p</mi><mtext> </mtext><mi>p</mi><mi>a</mi><mi>g</mi><mi>e</mi><mtext> </mtext><mi>i</mi><mi>n</mi><mo>+</mo><mi>r</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mtext> </mtext><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">page\\ fault overhead = service  \\ the \\ page = fault \\  interrupt+[swap\\ page\\ out]+swap\\ page\\ in+restart\\ overhead</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">d</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>page replacement</p>\n<ul>\n<li>large virtual memory can be provided on a smaller physical memory</li>\n<li>same pages may be brought into memory several times</li>\n</ul>\n</li>\n<li>\n<p>basic page replacement</p>\n<ul>\n<li>find a free frame and use it</li>\n<li>if no frame free, use a page replacement algorithm to select a victim frame</li>\n<li>write the victim frame to the disk and change the page and frame tables</li>\n<li>read the desired page into the free frame. Update the page and frame tables</li>\n<li>restart the process</li>\n<li>use modify bit to reduce overhead of page transfers(if not modified,not write)</li>\n<li>lowest page fault rate</li>\n</ul>\n</li>\n<li>\n<p>Algorithm</p>\n<ul>\n<li>FIFO first in first out</li>\n<li>LRU least recently used</li>\n<li>LRU approximation algorithms\n<ul>\n<li>second chance algorithm</li>\n<li>clock replacement(FIFO)</li>\n<li>if the page to be replaced has reference bit = 1.then\n<ul>\n<li>set reference bit 0</li>\n<li>leave page in memory</li>\n<li>replace next page, subject to same rules</li>\n</ul>\n</li>\n<li>Reference bit\n<ul>\n<li>initially = 0</li>\n<li>referenced bit =1</li>\n<li>replace the one which bit is 0</li>\n</ul>\n</li>\n<li>keep a counter of the number of references that have been made to each page</li>\n<li>LFU\n<ul>\n<li>replace pages with smallest count</li>\n</ul>\n</li>\n<li>MFU\n<ul>\n<li>based on the argument that the page with the smallest count was probably just brought in and has yet to be used</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>OPT 最佳置换算法</li>\n</ul>\n</li>\n<li>\n<p>allocation of frames</p>\n<ul>\n<li>Fixed allocation\n<ul>\n<li>equal allocation</li>\n<li>proportional allocation\n<ul>\n<li>allocation according to the size of the process</li>\n<li>s<sub>i</sub> = size of process p<sub>i</sub></li>\n<li>s=<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span>s<sub>i</sub></li>\n<li>m=total number of frames</li>\n<li>a<sub>i</sub> = allocation for p<sub>i</sub> = <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><msub><mi>s</mi><mi>i</mi></msub><mi>s</mi></mfrac><mo>×</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{s_i}{s}\\times m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.056492em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7114919999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">s</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4101em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>priority allocation\n<ul>\n<li>use a proportional allocation scheme using priorities rather than size</li>\n<li>if process p<sub>i</sub> generates a page fault\n<ul>\n<li>select for replacement one of its frames</li>\n<li>select for replacement a frame from a process with lower priority numebr</li>\n</ul>\n</li>\n<li>Global or local allocation\n<ul>\n<li>global\n<ul>\n<li>select from all frames</li>\n</ul>\n</li>\n<li>local\n<ul>\n<li>select from its own set</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>thrashing(颠簸)</p>\n</li>\n</ul>\n<p><img src=\"/Review/OS/1560952062065.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560952062065.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>if a CPU does not have “enough” frames, the page fault rate is very high</p>\n<ul>\n<li>low CPU utilization</li>\n<li>operating system thinks that it needs to increase the degree of multiprogramming</li>\n<li>another process is added to the system</li>\n</ul>\n</li>\n<li>\n<p>A process is busying swapping pages in and out</p>\n</li>\n<li>\n<p>Why does paging work</p>\n<ul>\n<li>locality model\n<ul>\n<li>a locality is a set of pages that are actively used together</li>\n<li>process migrates form one locality to another</li>\n<li>localities may overlap</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>why does the trashing occur</p>\n<ul>\n<li>size of locality &gt; allocated memory size</li>\n</ul>\n</li>\n<li>\n<p>Working set model</p>\n</li>\n<li>\n<p>Δ ≡ working-set window ≡ a fixed number of page references</p>\n</li>\n<li>\n<p>WSS<sub>i</sub> (Working set of process P<sub>i</sub>)</p>\n<ul>\n<li>\n<p>to small not encompass entire loclity</p>\n</li>\n<li>\n<p>to large encompass several localities</p>\n</li>\n<li>\n<p>∞ encompass entire program</p>\n<p><img src=\"/Review/OS/1560959176355.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560959176355.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>establish “acceptable” page fault rate</p>\n</li>\n</ul>\n</li>\n<li>\n<p>memory-mapped files</p>\n</li>\n<li>\n<p>allocation-mapped files</p>\n</li>\n<li>\n<p>allocating kernel memory</p>\n<ul>\n<li>\n<p>treated different form user memory</p>\n</li>\n<li>\n<p>often allocated from a free-memory pool</p>\n<ul>\n<li>kernel requests memory for structures of varying sizes</li>\n<li>some kernel memory needs to be contiguous</li>\n</ul>\n</li>\n<li>\n<p>buddy system</p>\n<p><img src=\"/Review/OS/1560960290152.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560960290152.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>slab allocator</p>\n<p><img src=\"/Review/OS/1560961295061.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560961295061.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>other consideration</p>\n<ul>\n<li>prepaging</li>\n<li>page size\n<ul>\n<li>fragmentation ,small page</li>\n<li>table size, large page</li>\n<li>I/O overhead, large page</li>\n<li>locality, small page</li>\n<li>TLB reach = TLB size x page size\n<ul>\n<li>multiple page size</li>\n</ul>\n</li>\n<li>program structure</li>\n<li>I/O interlock</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>operating system examples</p>\n</li>\n</ul>\n<h1 id=\"chapter-10-file-system-interface\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-10-file-system-interface\"></a> Chapter 10 File system interface<a href=\"Review/OS#chapter-10-file-system-interface\"></a></h1>\n<ul>\n<li>\n<p>file concept</p>\n<ul>\n<li>\n<p>a file is a named collection of related information that is recorded on secondary storage</p>\n</li>\n<li>\n<p>contiguous logical address space</p>\n</li>\n<li>\n<p>file structure</p>\n<ul>\n<li>simple record structure\n<ul>\n<li>lines</li>\n<li>fixed length</li>\n<li>variable length</li>\n</ul>\n</li>\n<li>complex structures\n<ul>\n<li>formatted document</li>\n<li>relocatable load file</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>arrributes</p>\n<ul>\n<li>name</li>\n<li>ldentifier</li>\n<li>type</li>\n<li>location</li>\n<li>size</li>\n<li>protection</li>\n<li>time,date, and user identification</li>\n<li>information about file are kept in the directory structure, which is maintained on the disk</li>\n</ul>\n</li>\n<li>\n<p>operation</p>\n<ul>\n<li>create</li>\n<li>write</li>\n<li>read</li>\n<li>reposition within file - file seek</li>\n<li>delete</li>\n<li>truncate (截短)- erase the contents of a file but keep its arrtibutes</li>\n<li>open</li>\n<li>close</li>\n<li>internal tables\n<ul>\n<li>per-process open file table</li>\n<li>system-wide open file table</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>access methods</p>\n<ul>\n<li>\n<p>sequential access</p>\n<ul>\n<li>rewind/read/wrire</li>\n</ul>\n</li>\n<li>\n<p>direct access</p>\n</li>\n</ul>\n</li>\n<li>\n<p>directory structure</p>\n<ul>\n<li>disks are split into on or more partitions</li>\n<li>each partition contains information about files within it</li>\n<li>the information is kept in entries in a device directory or volume table of contents</li>\n</ul>\n</li>\n<li>\n<p>operation performed on directory</p>\n<ul>\n<li>search for a file</li>\n<li>create a file</li>\n<li>delete a file</li>\n<li>list a directory</li>\n<li>rename a file</li>\n<li>traverse the file system</li>\n</ul>\n</li>\n<li>\n<p>organize the file directory(Logically) to obrain</p>\n<ul>\n<li>efficiency = locating a file quickly</li>\n<li>naming -convenient to users\n<ul>\n<li>two users can have same for different files</li>\n<li>the same file can have several different name</li>\n</ul>\n</li>\n<li>grouping - logical grouping of files by properties</li>\n</ul>\n</li>\n<li>\n<p>Directory</p>\n<ul>\n<li>\n<p>Pr</p>\n<ul>\n<li>naming</li>\n<li>grouping</li>\n<li>pathname</li>\n<li>same file for different user</li>\n<li>efficient searching</li>\n<li>grouping capability</li>\n</ul>\n</li>\n<li>\n<p>single level directory</p>\n<p><img src=\"/Review/OS/1560965389985.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560965389985.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>two level directory</p>\n<ul>\n<li>\n<p>separate directory for each user</p>\n<p><img src=\"/Review/OS/1560965477068.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560965477068.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Tree structured directories</p>\n<p><img src=\"/Review/OS/1560965676681.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"/OS/1560965676681.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>efficient searching</p>\n</li>\n<li>\n<p>grouping capability</p>\n</li>\n<li>\n<p>current directory( working directory )</p>\n</li>\n<li>\n<p>absolute / relative path name</p>\n</li>\n<li>\n<p>creating a new file is done in current directory</p>\n</li>\n<li>\n<p>delete a file</p>\n</li>\n<li>\n<p>mkdir</p>\n</li>\n<li>\n<p>acyclic graph directories</p>\n<ul>\n<li>\n<p>shared subdirectories and files</p>\n</li>\n<li>\n<p>two different names(aliasing)</p>\n</li>\n<li>\n<p>if dict deletes count &gt; dangling pointer</p>\n</li>\n<li>\n<p>solutions</p>\n<ul>\n<li>backpointers, so we can delete all pointers</li>\n<li>entry hold count solution</li>\n</ul>\n<p><img src=\"/Review/OS/1560966250970.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1560966250970.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>how to guarantee no cycles</p>\n<ul>\n<li>allow only links to file not subdirections</li>\n<li>garbage collecton</li>\n<li>every time a new link is added use a cycle detection algorithm to determine whether it is OK</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>file system mounting</p>\n<ul>\n<li>a file system must be mounted before it can be accessed</li>\n<li>an unmounted file system is mounted at a mount point</li>\n</ul>\n</li>\n<li>\n<p>file sharing</p>\n<ul>\n<li>sharing of files on multi-user system is desirable</li>\n<li>sharing may be done though a protection scheme</li>\n<li>on distributed systems, files ay be shared across a network</li>\n<li>network file system(NFS) is a common distributed file sharing method</li>\n</ul>\n</li>\n<li>\n<p>protection</p>\n<ul>\n<li>owner / creator control\n<ul>\n<li>what can be done by whom</li>\n</ul>\n</li>\n<li>type of access\n<ul>\n<li>read</li>\n<li>write</li>\n<li>execute</li>\n<li>append</li>\n<li>delete</li>\n<li>list</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-11-file-system-implementation\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-11-file-system-implementation\"></a> Chapter 11 File system implementation<a href=\"Review/OS#chapter-11-file-system-implementation\"></a></h1>\n<ul>\n<li>\n<p>file system structure</p>\n<ul>\n<li>file structure\n<ul>\n<li>logical storage unit</li>\n<li>collection of related information</li>\n</ul>\n</li>\n<li>file system resides on secondary storage(disks)</li>\n<li>file system organized into layers</li>\n<li>application programs &gt; logical file system &gt; file-organization module &gt; basic file system &gt; I/O control &gt; devices</li>\n</ul>\n</li>\n<li>\n<p>file system implementation</p>\n<ul>\n<li>\n<p>file control block</p>\n<ul>\n<li>file permissions</li>\n<li>file dates</li>\n<li>file owner, group, ACL</li>\n<li>file size</li>\n<li>file data blocks or pointers to file data blocks</li>\n</ul>\n</li>\n<li>\n<p>in memory file system structures</p>\n<p><img src=\"/Review/OS/1561008428383.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561008428383.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>virtual file systems</p>\n<ul>\n<li>virtual file system(VFS) provide an object oriented way of implementing file systems</li>\n<li>VFS allows the same system call interface (API) to be used for different types of file systems</li>\n<li>The API is to the VFS interface, rather than any specific type of file system</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>directory implementation</p>\n<ul>\n<li>linear list of file names with pointer to the data blocks\n<ul>\n<li>simple to program</li>\n<li>time consuming to exectute</li>\n</ul>\n</li>\n<li>Hash table - linear list with hash data structure\n<ul>\n<li>decreases directory search time</li>\n<li>collisions - situations where two file names hash to the same location</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>allocation methods</p>\n<ul>\n<li>\n<p>an allocation method refers to how disk blocks are allocated for files</p>\n<ul>\n<li>\n<p>contiguous allocation</p>\n<ul>\n<li>\n<p>simple</p>\n</li>\n<li>\n<p>random access (sequential direct)</p>\n</li>\n<li>\n<p>wasteful of space (dynamic storage allocation problem)</p>\n</li>\n<li>\n<p>files cannot grow</p>\n<p><img src=\"/Review/OS/1561009874702.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561009874702.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>extent-based systems\n<ul>\n<li>many newer file system use a modified contiguous allocation scheme</li>\n<li>extent-based file systems allocate disk blocks in extents</li>\n<li>an extent is a contiguous block of disks\n<ul>\n<li>extents are allocated for file allocation</li>\n<li>a file consists of one or more extents</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>linked allocation</p>\n<ul>\n<li>\n<p>each file is a liked list of disk blocks</p>\n</li>\n<li>\n<p>blocks may be scattered anywhere on the disk</p>\n<ul>\n<li>\n<p>simple</p>\n</li>\n<li>\n<p>no waste of space</p>\n</li>\n<li>\n<p>files can grow</p>\n</li>\n<li>\n<p>no random access</p>\n</li>\n<li>\n<p>each block contains a pointer, wasting space</p>\n</li>\n<li>\n<p>blocks scatter everywhere and a large number of disk seeks may be necessay</p>\n</li>\n<li>\n<p>reliability - if a pointer is lost or damaged?</p>\n<p><img src=\"/Review/OS/1561010436027.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561010436027.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>file allocation table</p>\n</li>\n</ul>\n<p><img src=\"/Review/OS/1561010761195.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561010761195.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>indexed allocation</p>\n<ul>\n<li>\n<p>bring all pointers together into the index block</p>\n</li>\n<li>\n<p>a file’s directory entry contains a pointer to its index. Hence, the index block of an indexed allocation plays the same role as the page table</p>\n<p><img src=\"/Review/OS/1561011145011.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561011145011.png\" alt=\"A\" class=\"article-img\"></p>\n</li>\n<li>\n<p>random access</p>\n</li>\n<li>\n<p>the indexed allocation suffers from wasted space. The index block may not be fully used</p>\n</li>\n<li>\n<p>the number of entries of an index table determines the size of a file</p>\n<ul>\n<li>Overcome\n<ul>\n<li>multiple index blocks, chain them into a inked list</li>\n<li>multiple index blocks, but make them into a tree just like the indexed access method(multilevel)</li>\n<li>a combination of both</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>free space management</p>\n<ul>\n<li>\n<p>free space list</p>\n<ul>\n<li>\n<p>bit vector</p>\n<p><img src=\"/Review/OS/1561015542658.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561015542658.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>block number calculation</p>\n<p>= number of bits per word *</p>\n<p>number of 0-value words +</p>\n<p>offset of first 1 bit</p>\n</li>\n<li>\n<p>requires extra space</p>\n</li>\n<li>\n<p>easy to get contiguous files</p>\n</li>\n</ul>\n</li>\n<li>\n<p>linked list</p>\n<ul>\n<li>\n<p>cannot get contiguous space easily</p>\n</li>\n<li>\n<p>no waste of space</p>\n<p><img src=\"/Review/OS/1561015986478.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561015986478.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>grouping</p>\n<p><img src=\"/Review/OS/1561016075242.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561016075242.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>address counting</p>\n<ul>\n<li>\n<p>to make list short with the following trick</p>\n<ul>\n<li>\n<p>blocks are often allocated and freed in groups</p>\n</li>\n<li>\n<p>for every group, we can store the address of the first free block and the number of the following n free blocks</p>\n<p><img src=\"/Review/OS/1561016215091.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561016215091.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>linked list + grouping</p>\n</li>\n<li>\n<p>linked list + address + count</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>efficiency and performance</p>\n<ul>\n<li>efficiency dependent on\n<ul>\n<li>disk allocation and directory management algorithms</li>\n<li>type of data kept in file’s directory entry</li>\n</ul>\n</li>\n<li>performance\n<ul>\n<li>disk cache</li>\n<li>free-behind and read-ahead (optimize sequential access)</li>\n<li>virtual disk, ram disk , etc.</li>\n</ul>\n</li>\n<li>page cache</li>\n</ul>\n</li>\n<li>\n<p>recovery</p>\n<ul>\n<li>consistency checking</li>\n<li>back up data from disk to another</li>\n<li>recover lost file or disk by restoring data from backup</li>\n</ul>\n</li>\n<li>\n<p>log structured file systems (审计和统计)</p>\n<ul>\n<li>record each update to the file system as a transaction</li>\n<li>all transactions are written to a log</li>\n</ul>\n</li>\n<li>\n<p>NFS</p>\n<ul>\n<li>network file system</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-12-mass-storage-structure\"><a class=\"markdownIt-Anchor\" href=\"Review/OS#chapter-12-mass-storage-structure\"></a> Chapter 12 mass storage structure<a href=\"Review/OS#chapter-12-mass-storage-structure\"></a></h1>\n<ul>\n<li>\n<p>disk structure</p>\n<p><img src=\"OS/1561017720728.png\" alt=\"1561017720728\" class=\"article-img\"></p>\n<ul>\n<li>magnetic disks provide bulk of secondary storage of modern computers\n<ul>\n<li>transfer rate\n<ul>\n<li>data flow between drive and computer</li>\n</ul>\n</li>\n<li>positioning time\n<ul>\n<li>random access time\n<ul>\n<li>time to move disk arm to desired cylinder (seek time) and time for desired sector to rotate under the disk head (rotational latency)</li>\n<li>head crash results from disk head making contact with the disk surface</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>disk can be removeable</li>\n<li>attached to computer via I/O bus\n<ul>\n<li>host controller in computer uses bus to talk to disk controller built into drive or storage array</li>\n</ul>\n</li>\n<li>logical blocks\n<ul>\n<li>sector 0 outmost</li>\n<li>from outmost to inner most</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>disk attachment</p>\n<ul>\n<li>host attached via an I/O port</li>\n<li>network attached via a network connection</li>\n</ul>\n</li>\n<li>\n<p>disk scheduling</p>\n<ul>\n<li>\n<p>access time</p>\n<ul>\n<li>seek time</li>\n<li>rotational latency</li>\n</ul>\n</li>\n<li>\n<p>disk bandwidth</p>\n<ul>\n<li>the total number of bytes transferred, divided by the total time between the first request for service and the completion of the last transfer</li>\n</ul>\n</li>\n<li>\n<p>FCFS</p>\n</li>\n<li>\n<p>SSTF(shortest seek time first)</p>\n</li>\n<li>\n<p>may cause starvation of some requests</p>\n</li>\n<li>\n<p>SCAN - elevator algorithm</p>\n</li>\n<li>\n<p>C-SCAN</p>\n<ul>\n<li>\n<p>provide a more uniform wait time than SCAN</p>\n<p><img src=\"/Review/OS/1561020883178.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561020883178.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>C-LOOK</p>\n<p><img src=\"/Review/OS/1561020942246.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561020942246.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>SSTF is common and has natural appeal</p>\n</li>\n<li>\n<p>SCAN and C-SCAN perform better for systems that place a heavy load on the disk</p>\n</li>\n<li>\n<p>either SSTF or LOOK is a reasonable choice for the default algorithm</p>\n</li>\n<li>\n<p>performance depends on the number and types of reuests</p>\n</li>\n<li>\n<p>requests for disk service can be influences by the file-allocation method</p>\n</li>\n</ul>\n</li>\n<li>\n<p>disk management</p>\n<ul>\n<li>\n<p>disk formatting</p>\n<ul>\n<li>\n<p>low-level formatting, of physical formatting</p>\n<ul>\n<li>\n<p>dividing a disk into sectors that the disk controller can read and write</p>\n<p><img src=\"/Review/OS/1561021927433.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561021927433.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n<li>\n<p>partition</p>\n</li>\n<li>\n<p>logical formatting</p>\n<ul>\n<li>making a file system</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>boot block</p>\n<ul>\n<li>\n<p>boot block initializes system</p>\n<ul>\n<li>\n<p>the bootstrap is stored in ROM<br>\nbootstrap loader program</p>\n<p><img src=\"/Review/OS/1561022042883.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561022042883.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Error handling</p>\n<ul>\n<li>\n<p>a disk track with a bad sector</p>\n</li>\n<li>\n<p>substituting a spare for the bad sector</p>\n</li>\n<li>\n<p>shifting all the sectors to bypass the bad one</p>\n<p><img src=\"/Review/OS/1561022112474.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561022112474.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>swap space management</p>\n<ul>\n<li>swap space\n<ul>\n<li>swap space can be carved out of the normal file system, or, more commonly, it can be in a separate disk partition</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>RAID structure</p>\n<ul>\n<li>\n<p>Redundant Array of Independent Disk (冗余磁盘阵列)</p>\n</li>\n<li>\n<p>improves reliability via redundancy and performance via parallelism</p>\n</li>\n<li>\n<p>raid is arranged into dix different levels</p>\n<p><img src=\"/Review/OS/1561022379778.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"OS/1561022379778.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>stable storage implementation</p>\n</li>\n<li>\n<p>tertiary storage devices</p>\n</li>\n</ul>\n<p>​</p>\n","prev":{"title":"Python中遍历List时删除元素","link":"python/delInList"},"next":{"title":"高级数据结构复习","link":"Review/AdvancedDataStructures"},"plink":"ilucia.github.io/Review/OS/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 1 Introduction","id":"chapter-1-introduction","index":"1"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 2 Operating-System Structures","id":"chapter-2-operating-system-structures","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 3 Process","id":"chapter-3-process","index":"3"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 4 Threads","id":"chapter-4-threads","index":"4"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 5 CPU Scheduling","id":"chapter-5-cpu-scheduling","index":"5"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 6 Process Synchronization","id":"chapter-6-process-synchronization","index":"6"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 7 Deadlocks","id":"chapter-7-deadlocks","index":"7"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 8 Memory Management","id":"chapter-8-memory-management","index":"8"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 9 Virtual Memory","id":"chapter-9-virtual-memory","index":"9"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 10 File system interface","id":"chapter-10-file-system-interface","index":"10"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 11 File system implementation","id":"chapter-11-file-system-implementation","index":"11"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 12 mass storage structure","id":"chapter-12-mass-storage-structure","index":"12"}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2019年6月18日","updated":"2022年4月27日"}}