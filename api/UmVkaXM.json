{"title":"Redis","date":"2022-04-27T15:24:01.595Z","link":"Redis","updated":"2022-04-27T15:24:01.595Z","content":"<h1 id=\"redis\"><a class=\"markdownIt-Anchor\" href=\"Redis#redis\"></a> Redis<a href=\"Redis#redis\"></a></h1>\n<h2 id=\"redis特性\"><a class=\"markdownIt-Anchor\" href=\"Redis#redis特性\"></a> Redis特性<a href=\"Redis#redis特性\"></a></h2>\n<p>注意：Redis支持多个数据库，并且每个数据库的数据是隔离的不能共享，并且基于单机才有，如果是集群就没有数据库的概念。</p>\n<p>Redis是一个字典结构的存储服务器，而实际上一个Redis实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。</p>\n<p>每个数据库对外都是一个从0开始的递增数字命名，Redis默认支持16个数据库（可以通过配置文件支持更多，无上限），可以通过配置databases来修改这一数字。客户端与Redis建立连接后会自动选择0号数据库，不过可以随时使用SELECT命令更换数据库，如要选择1号数据库：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">redis&gt;</span><span class=\"bash\"> SELECT 1</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">redis [1] &gt; GET foo</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></div></figure>\n<p>然而这些以数字命名的数据库又与我们理解的数据库有所区别。首先Redis不支持自定义数据库的名字，每个数据库都以编号命名，开发者必须自己记录哪些数据库存储了哪些数据。另外Redis也不支持为每个数据库设置不同的访问密码，所以一个客户端要么可以访问全部数据库，要么连一个数据库也没有权限访问。最重要的一点是多个数据库之间并不是完全隔离的，比如FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据。综上所述，这些数据库更像是一种命名空间，而不适宜存储不同应用程序的数据。比如可以使用0号数据库存储某个应用生产环境中的数据，使用1号数据库存储测试环境中的数据，但不适宜使用0号数据库存储A应用的数据而使用1号数据库B应用的数据，不同的应用应该使用不同的Redis实例存储数据。由于Redis非常轻量级，一个空Redis实例占用的内存只有1M左右，所以不用担心多个Redis实例会额外占用很多内存。</p>\n<h2 id=\"redis配置\"><a class=\"markdownIt-Anchor\" href=\"Redis#redis配置\"></a> Redis配置<a href=\"Redis#redis配置\"></a></h2>\n<h3 id=\"查看配置\"><a class=\"markdownIt-Anchor\" href=\"Redis#查看配置\"></a> 查看配置<a href=\"Redis#查看配置\"></a></h3>\n<h5 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"Redis#语法\"></a> 语法<a href=\"Redis#语法\"></a></h5>\n<p>Redis CONFIG 命令格式如下：<code>redis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</code></p>\n<h5 id=\"实例\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例\"></a> 实例<a href=\"Redis#实例\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;loglevel&quot;</span><br><span class=\"line\">2) &quot;notice&quot;</span><br></pre></td></tr></table></div></figure>\n<p>使用 ***** 号获取所有配置项</p>\n<h3 id=\"编辑配置\"><a class=\"markdownIt-Anchor\" href=\"Redis#编辑配置\"></a> 编辑配置<a href=\"Redis#编辑配置\"></a></h3>\n<p>你可以通过修改 redis.conf 文件或使用 <strong>CONFIG set</strong> 命令来修改配置。</p>\n<h5 id=\"语法-2\"><a class=\"markdownIt-Anchor\" href=\"Redis#语法-2\"></a> 语法<a href=\"Redis#语法-2\"></a></h5>\n<p><strong>CONFIG SET</strong> 命令基本语法：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"实例-2\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-2\"></a> 实例<a href=\"Redis#实例-2\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;loglevel&quot;</span><br><span class=\"line\">2) &quot;notice&quot;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"参数说明\"><a class=\"markdownIt-Anchor\" href=\"Redis#参数说明\"></a> 参数说明<a href=\"Redis#参数说明\"></a></h2>\n<p>redis.conf 配置项说明如下：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">配置项</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><code>daemonize no</code></td>\n<td style=\"text-align:left\">Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><code>pidfile /var/run/redis.pid</code></td>\n<td style=\"text-align:left\">当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><code>port 6379</code></td>\n<td style=\"text-align:left\">指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><code>bind 127.0.0.1</code></td>\n<td style=\"text-align:left\">绑定的主机地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><code>timeout 300</code></td>\n<td style=\"text-align:left\">当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><code>loglevel notice</code></td>\n<td style=\"text-align:left\">指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><code>logfile stdout</code></td>\n<td style=\"text-align:left\">日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\"><code>databases 16</code></td>\n<td style=\"text-align:left\">设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\"><code>save &lt;seconds&gt; &lt;changes&gt;</code>Redis 默认配置文件中提供了三个条件：<strong>save 900 1   save 300 10   save 60 10000</strong>分别表示 900 秒（15 分钟）内有 1 个更改，300ß 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</td>\n<td style=\"text-align:left\">指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\"><code>rdbcompression yes</code></td>\n<td style=\"text-align:left\">指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\"><code>dbfilename dump.rdb</code></td>\n<td style=\"text-align:left\">指定本地数据库文件名，默认值为 dump.rdb</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\"><code>dir ./</code></td>\n<td style=\"text-align:left\">指定本地数据库存放目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\"><code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></td>\n<td style=\"text-align:left\">设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\"><code>masterauth &lt;master-password&gt;</code></td>\n<td style=\"text-align:left\">当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\"><code>requirepass foobared</code></td>\n<td style=\"text-align:left\">设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</password></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\"><code>maxclients 128</code></td>\n<td style=\"text-align:left\">设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\"><code>maxmemory &lt;bytes&gt;</code></td>\n<td style=\"text-align:left\">指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\"><code>appendonly no</code></td>\n<td style=\"text-align:left\">指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\"><code>appendfilename appendonly.aof</code></td>\n<td style=\"text-align:left\">指定更新日志文件名，默认为 appendonly.aof</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\"><code>appendfsync everysec</code></td>\n<td style=\"text-align:left\">指定更新日志条件，共有 3 个可选值：<strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘（快）<strong>always</strong>：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）<strong>everysec</strong>：表示每秒同步一次（折中，默认值）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">21</td>\n<td style=\"text-align:left\"><code>vm-enabled no</code></td>\n<td style=\"text-align:left\">指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">22</td>\n<td style=\"text-align:left\"><code>vm-swap-file /tmp/redis.swap</code></td>\n<td style=\"text-align:left\">虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\"><code>vm-max-memory 0</code></td>\n<td style=\"text-align:left\">将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">24</td>\n<td style=\"text-align:left\"><code>vm-page-size 32</code></td>\n<td style=\"text-align:left\">Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">25</td>\n<td style=\"text-align:left\"><code>vm-pages 134217728</code></td>\n<td style=\"text-align:left\">设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">26</td>\n<td style=\"text-align:left\"><code>vm-max-threads 4</code></td>\n<td style=\"text-align:left\">设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">27</td>\n<td style=\"text-align:left\"><code>glueoutputbuf yes</code></td>\n<td style=\"text-align:left\">设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\"><code>hash-max-zipmap-entries 64 hash-max-zipmap-value 512</code></td>\n<td style=\"text-align:left\">指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">29</td>\n<td style=\"text-align:left\"><code>activerehashing yes</code></td>\n<td style=\"text-align:left\">指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">30</td>\n<td style=\"text-align:left\"><code>include /path/to/local.conf</code></td>\n<td style=\"text-align:left\">指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td>\n</tr>\n</tbody>\n</table></div></div>\n<h2 id=\"redis-数据类型\"><a class=\"markdownIt-Anchor\" href=\"Redis#redis-数据类型\"></a> Redis 数据类型<a href=\"Redis#redis-数据类型\"></a></h2>\n<p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>\n<h3 id=\"string字符串\"><a class=\"markdownIt-Anchor\" href=\"Redis#string字符串\"></a> String（字符串）<a href=\"Redis#string字符串\"></a></h3>\n<p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p>\n<p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。</p>\n<p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p>\n<h4 id=\"实例-3\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-3\"></a> 实例<a href=\"Redis#实例-3\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SET runoob &quot;菜鸟教程&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; GET runoob</span><br><span class=\"line\">&quot;菜鸟教程&quot;</span><br></pre></td></tr></table></div></figure>\n<p>在以上实例中我们使用了 Redis 的 <strong>SET</strong> 和 <strong>GET</strong> 命令。键为 runoob，对应的值为 <strong>菜鸟教程</strong>。</p>\n<p>**注意：**一个键最大能存储 512MB。</p>\n<h3 id=\"hash哈希\"><a class=\"markdownIt-Anchor\" href=\"Redis#hash哈希\"></a> Hash（哈希）<a href=\"Redis#hash哈希\"></a></h3>\n<p>Redis hash 是一个键值(key=&gt;value)对集合。</p>\n<p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>\n<h5 id=\"实例-4\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-4\"></a> 实例<a href=\"Redis#实例-4\"></a></h5>\n<p><strong>DEL runoob</strong> 用于删除前面测试用过的 key，不然会报错：<strong>(error) WRONGTYPE Operation against a key holding the wrong kind of value</strong></p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/11/B104156B-7270-4D03-8EB3-B72D4022ED78.jpg\" alt=\"img\" class=\"article-img\"></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; DEL runoob</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; HMSET runoob field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class=\"line\">&quot;OK&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; HGET runoob field1</span><br><span class=\"line\">&quot;Hello&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; HGET runoob field2</span><br><span class=\"line\">&quot;World&quot;</span><br></pre></td></tr></table></div></figure>\n<p>实例中我们使用了 Redis <strong>HMSET, HGET</strong> 命令，<strong>HMSET</strong> 设置了两个 <strong>field=&gt;value</strong> 对, HGET 获取对应 <strong>field</strong> 对应的 <strong>value</strong>。</p>\n<p>每个 hash 可以存储 2^32 -1 键值对（40多亿）。</p>\n<h3 id=\"list列表\"><a class=\"markdownIt-Anchor\" href=\"Redis#list列表\"></a> List（列表）<a href=\"Redis#list列表\"></a></h3>\n<p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<h5 id=\"实例-5\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-5\"></a> 实例<a href=\"Redis#实例-5\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; DEL runoob</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lpush runoob redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lpush runoob mongodb</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lpush runoob rabitmq</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lrange runoob 0 10</span><br><span class=\"line\">1) &quot;rabitmq&quot;</span><br><span class=\"line\">2) &quot;mongodb&quot;</span><br><span class=\"line\">3) &quot;redis&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></div></figure>\n<p>列表最多可存储 2^32 - 1 元素 (4294967295, 每个列表可存储40多亿)。</p>\n<h3 id=\"set集合\"><a class=\"markdownIt-Anchor\" href=\"Redis#set集合\"></a> Set（集合）<a href=\"Redis#set集合\"></a></h3>\n<p>Redis 的 Set 是 string 类型的无序集合。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>\n<h5 id=\"sadd-命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#sadd-命令\"></a> sadd 命令<a href=\"Redis#sadd-命令\"></a></h5>\n<p>添加一个 string 元素到 key 对应的 set 集合中，成功返回 1，如果元素已经在集合中返回 0。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd key member</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"实例-6\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-6\"></a> 实例<a href=\"Redis#实例-6\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; DEL runoob</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; sadd runoob redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; sadd runoob mongodb</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; sadd runoob rabitmq</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; sadd runoob rabitmq</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; smembers runoob</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;redis&quot;</span><br><span class=\"line\">2) &quot;rabitmq&quot;</span><br><span class=\"line\">3) &quot;mongodb&quot;</span><br></pre></td></tr></table></div></figure>\n<p>**注意：**以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。</p>\n<p>集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。</p>\n<h3 id=\"zsetsorted-set有序集合\"><a class=\"markdownIt-Anchor\" href=\"Redis#zsetsorted-set有序集合\"></a> zset(sorted set：有序集合)<a href=\"Redis#zsetsorted-set有序集合\"></a></h3>\n<p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>zset的成员是唯一的,但分数(score)却可以重复。</p>\n<h5 id=\"zadd-命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#zadd-命令\"></a> zadd 命令<a href=\"Redis#zadd-命令\"></a></h5>\n<p>添加元素到集合，元素在集合中存在则更新对应score</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zadd key score member</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"实例-7\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-7\"></a> 实例<a href=\"Redis#实例-7\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; DEL runoob</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd runoob 0 redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd runoob 0 mongodb</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; &gt; ZRANGEBYSCORE runoob 0 1000</span><br><span class=\"line\">1) &quot;mongodb&quot;</span><br><span class=\"line\">2) &quot;rabitmq&quot;</span><br><span class=\"line\">3) &quot;redis&quot;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"各个数据类型应用场景\"><a class=\"markdownIt-Anchor\" href=\"Redis#各个数据类型应用场景\"></a> 各个数据类型应用场景<a href=\"Redis#各个数据类型应用场景\"></a></h3>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">简介</th>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">String(字符串)</td>\n<td style=\"text-align:left\">二进制安全</td>\n<td style=\"text-align:left\">可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Hash(字典)</td>\n<td style=\"text-align:left\">键值对集合,即编程语言中的Map类型</td>\n<td style=\"text-align:left\">适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td>\n<td style=\"text-align:left\">存储、读取、修改用户属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">List(列表)</td>\n<td style=\"text-align:left\">链表(双向链表)</td>\n<td style=\"text-align:left\">增删快,提供了操作某一段元素的API</td>\n<td style=\"text-align:left\">1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Set(集合)</td>\n<td style=\"text-align:left\">哈希表实现,元素不重复</td>\n<td style=\"text-align:left\">1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td>\n<td style=\"text-align:left\">1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Sorted Set(有序集合)</td>\n<td style=\"text-align:left\">将Set中的元素增加一个权重参数score,元素按score有序排列</td>\n<td style=\"text-align:left\">数据插入集合时,已经进行天然排序</td>\n<td style=\"text-align:left\">1、排行榜 2、带权重的消息队列</td>\n</tr>\n</tbody>\n</table></div></div>\n<h2 id=\"redis命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#redis命令\"></a> Redis命令<a href=\"Redis#redis命令\"></a></h2>\n<h3 id=\"客户端命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#客户端命令\"></a> 客户端命令<a href=\"Redis#客户端命令\"></a></h3>\n<ul>\n<li>启动客户端<code>redis-cli --raw</code>\n<ul>\n<li><code>--raw</code>用于防止中文乱码</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"远程服务\"><a class=\"markdownIt-Anchor\" href=\"Redis#远程服务\"></a> 远程服务<a href=\"Redis#远程服务\"></a></h5>\n<ul>\n<li><code>redis-cli -h host -p port -a password</code></li>\n</ul>\n<h3 id=\"键命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#键命令\"></a> 键命令<a href=\"Redis#键命令\"></a></h3>\n<h5 id=\"语法-3\"><a class=\"markdownIt-Anchor\" href=\"Redis#语法-3\"></a> 语法<a href=\"Redis#语法-3\"></a></h5>\n<p>Redis 键命令的基本语法如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; COMMAND KEY_NAME</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"实例-8\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-8\"></a> 实例<a href=\"Redis#实例-8\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SET runoobkey redis</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; DEL runoobkey</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></div></figure>\n<p>在以上实例中 <strong>DEL</strong> 是一个命令， <strong>runoobkey</strong> 是一个键。 如果键被删除成功，命令执行后输出 <strong>(integer) 1</strong>，否则将输出 <strong>(integer) 0</strong></p>\n<p>下表给出了与 Redis 键相关的基本命令：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/keys-del.html\" target=\"_blank\" rel=\"noopener\">DEL key</a> 该命令用于在 key 存在时删除 key。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/keys-dump.html\" target=\"_blank\" rel=\"noopener\">DUMP key</a> 序列化给定 key ，并返回被序列化的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/keys-exists.html\" target=\"_blank\" rel=\"noopener\">EXISTS key</a> 检查给定 key 是否存在。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/keys-expire.html\" target=\"_blank\" rel=\"noopener\">EXPIRE key</a> seconds 为给定 key 设置过期时间，以秒计。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/keys-expireat.html\" target=\"_blank\" rel=\"noopener\">EXPIREAT key timestamp</a> EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/keys-pexpire.html\" target=\"_blank\" rel=\"noopener\">PEXPIRE key milliseconds</a> 设置 key 的过期时间以毫秒计。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/keys-pexpireat.html\" target=\"_blank\" rel=\"noopener\">PEXPIREAT key milliseconds-timestamp</a> 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/keys-keys.html\" target=\"_blank\" rel=\"noopener\">KEYS pattern</a> 查找所有符合给定模式( pattern)的 key 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/keys-move.html\" target=\"_blank\" rel=\"noopener\">MOVE key db</a> 将当前数据库的 key 移动到给定的数据库 db 当中。</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"字符串命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#字符串命令\"></a> 字符串命令<a href=\"Redis#字符串命令\"></a></h3>\n<p>Redis 字符串数据类型的相关命令用于管理 redis 字符串值，基本语法如下：</p>\n<h4 id=\"语法-4\"><a class=\"markdownIt-Anchor\" href=\"Redis#语法-4\"></a> 语法<a href=\"Redis#语法-4\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; COMMAND KEY_NAME</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"实例-9\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-9\"></a> 实例<a href=\"Redis#实例-9\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SET runoobkey redis</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; GET runoobkey</span><br><span class=\"line\">&quot;redis&quot;</span><br></pre></td></tr></table></div></figure>\n<p>在以上实例中我们使用了 <strong>SET</strong> 和 <strong>GET</strong> 命令，键为 <strong>runoobkey</strong>。</p>\n<p>下表列出了常用的 redis 字符串命令：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-set.html\" target=\"_blank\" rel=\"noopener\">SET key value</a> 设置指定 key 的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-get.html\" target=\"_blank\" rel=\"noopener\">GET key</a> 获取指定 key 的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-getrange.html\" target=\"_blank\" rel=\"noopener\">GETRANGE key start end</a> 返回 key 中字符串值的子字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-getset.html\" target=\"_blank\" rel=\"noopener\">GETSET key value</a> 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-getbit.html\" target=\"_blank\" rel=\"noopener\">GETBIT key offset</a> 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">[MGET key1 <a href=\"https://www.runoob.com/redis/strings-mget.html\" target=\"_blank\" rel=\"noopener\">key2…]</a> 获取所有(一个或多个)给定 key 的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-setbit.html\" target=\"_blank\" rel=\"noopener\">SETBIT key offset value</a> 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-setex.html\" target=\"_blank\" rel=\"noopener\">SETEX key seconds value</a> 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-setnx.html\" target=\"_blank\" rel=\"noopener\">SETNX key value</a> 只有在 key 不存在时设置 key 的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-setrange.html\" target=\"_blank\" rel=\"noopener\">SETRANGE key offset value</a> 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-strlen.html\" target=\"_blank\" rel=\"noopener\">STRLEN key</a> 返回 key 所储存的字符串值的长度。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">[MSET key value <a href=\"https://www.runoob.com/redis/strings-mset.html\" target=\"_blank\" rel=\"noopener\">key value …]</a> 同时设置一个或多个 key-value 对。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\"><code>MSETNX key value \\[key value ...\\]</code>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-psetex.html\" target=\"_blank\" rel=\"noopener\">PSETEX key milliseconds value</a> 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-incr.html\" target=\"_blank\" rel=\"noopener\">INCR key</a> 将 key 中储存的数字值增一。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-incrby.html\" target=\"_blank\" rel=\"noopener\">INCRBY key increment</a> 将 key 所储存的值加上给定的增量值（increment） 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-incrbyfloat.html\" target=\"_blank\" rel=\"noopener\">INCRBYFLOAT key increment</a> 将 key 所储存的值加上给定的浮点增量值（increment） 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-decr.html\" target=\"_blank\" rel=\"noopener\">DECR key</a> 将 key 中储存的数字值减一。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-decrby.html\" target=\"_blank\" rel=\"noopener\">DECRBY key decrement</a> key 所储存的值减去给定的减量值（decrement） 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/strings-append.html\" target=\"_blank\" rel=\"noopener\">APPEND key value</a> 如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"哈希命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#哈希命令\"></a> 哈希命令<a href=\"Redis#哈希命令\"></a></h3>\n<p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p>\n<p>Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。</p>\n<h5 id=\"实例-10\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-10\"></a> 实例<a href=\"Redis#实例-10\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;  HMSET runoobkey name &quot;redis tutorial&quot; description &quot;redis basic commands for caching&quot; likes 20 visitors 23000</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;  HGETALL runoobkey</span><br><span class=\"line\">1) &quot;name&quot;</span><br><span class=\"line\">2) &quot;redis tutorial&quot;</span><br><span class=\"line\">3) &quot;description&quot;</span><br><span class=\"line\">4) &quot;redis basic commands for caching&quot;</span><br><span class=\"line\">5) &quot;likes&quot;</span><br><span class=\"line\">6) &quot;20&quot;</span><br><span class=\"line\">7) &quot;visitors&quot;</span><br><span class=\"line\">8) &quot;23000&quot;</span><br></pre></td></tr></table></div></figure>\n<p>在以上实例中，我们设置了 redis 的一些描述信息(name, description, likes, visitors) 到哈希表的 <strong>runoobkey</strong> 中。</p>\n<p>下表列出了 redis hash 基本的相关命令：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[HDEL key field1 <a href=\"https://www.runoob.com/redis/hashes-hdel.html\" target=\"_blank\" rel=\"noopener\">field2]</a> 删除一个或多个哈希表字段</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/hashes-hexists.html\" target=\"_blank\" rel=\"noopener\">HEXISTS key field</a> 查看哈希表 key 中，指定的字段是否存在。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/hashes-hget.html\" target=\"_blank\" rel=\"noopener\">HGET key field</a> 获取存储在哈希表中指定字段的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/hashes-hgetall.html\" target=\"_blank\" rel=\"noopener\">HGETALL key</a> 获取在哈希表中指定 key 的所有字段和值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/hashes-hincrby.html\" target=\"_blank\" rel=\"noopener\">HINCRBY key field increment</a> 为哈希表 key 中的指定字段的整数值加上增量 increment 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/hashes-hincrbyfloat.html\" target=\"_blank\" rel=\"noopener\">HINCRBYFLOAT key field increment</a> 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/hashes-hkeys.html\" target=\"_blank\" rel=\"noopener\">HKEYS key</a> 获取所有哈希表中的字段</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/hashes-hlen.html\" target=\"_blank\" rel=\"noopener\">HLEN key</a> 获取哈希表中字段的数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">[HMGET key field1 <a href=\"https://www.runoob.com/redis/hashes-hmget.html\" target=\"_blank\" rel=\"noopener\">field2]</a> 获取所有给定字段的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">[HMSET key field1 value1 <a href=\"https://www.runoob.com/redis/hashes-hmset.html\" target=\"_blank\" rel=\"noopener\">field2 value2 ]</a> 同时将多个 field-value (域-值)对设置到哈希表 key 中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/hashes-hset.html\" target=\"_blank\" rel=\"noopener\">HSET key field value</a> 将哈希表 key 中的字段 field 的值设为 value 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/hashes-hsetnx.html\" target=\"_blank\" rel=\"noopener\">HSETNX key field value</a> 只有在字段 field 不存在时，设置哈希表字段的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/hashes-hvals.html\" target=\"_blank\" rel=\"noopener\">HVALS key</a> 获取哈希表中所有值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">[HSCAN key cursor <a href=\"https://www.runoob.com/redis/hashes-hscan.html\" target=\"_blank\" rel=\"noopener\">MATCH pattern] [COUNT count]</a> 迭代哈希表中的键值对。</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"列表命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#列表命令\"></a> 列表命令<a href=\"Redis#列表命令\"></a></h3>\n<p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p>\n<p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p>\n<h5 id=\"实例-11\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-11\"></a> 实例<a href=\"Redis#实例-11\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; LPUSH runoobkey redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; LPUSH runoobkey mongodb</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; LPUSH runoobkey mysql</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; LRANGE runoobkey 0 10</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;mysql&quot;</span><br><span class=\"line\">2) &quot;mongodb&quot;</span><br><span class=\"line\">3) &quot;redis&quot;</span><br></pre></td></tr></table></div></figure>\n<p>在以上实例中我们使用了 <strong>LPUSH</strong> 将三个值插入了名为 <strong>runoobkey</strong> 的列表当中。</p>\n<p>下表列出了列表相关的基本命令：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[BLPOP key1 <a href=\"https://www.runoob.com/redis/lists-blpop.html\" target=\"_blank\" rel=\"noopener\">key2 ] timeout</a> 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[BRPOP key1 <a href=\"https://www.runoob.com/redis/lists-brpop.html\" target=\"_blank\" rel=\"noopener\">key2 ] timeout</a> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-brpoplpush.html\" target=\"_blank\" rel=\"noopener\">BRPOPLPUSH source destination timeout</a> 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-lindex.html\" target=\"_blank\" rel=\"noopener\">LINDEX key index</a> 通过索引获取列表中的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-linsert.html\" target=\"_blank\" rel=\"noopener\">LINSERT key BEFORE|AFTER pivot value</a> 在列表的元素前或者后插入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-llen.html\" target=\"_blank\" rel=\"noopener\">LLEN key</a> 获取列表长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-lpop.html\" target=\"_blank\" rel=\"noopener\">LPOP key</a> 移出并获取列表的第一个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-lpush.html\" target=\"_blank\" rel=\"noopener\">LPUSH key value1 value2]</a> 将一个或多个值插入到列表头部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-lpushx.html\" target=\"_blank\" rel=\"noopener\">LPUSHX key value</a> 将一个值插入到已存在的列表头部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-lrange.html\" target=\"_blank\" rel=\"noopener\">LRANGE key start stop</a> 获取列表指定范围内的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-lrem.html\" target=\"_blank\" rel=\"noopener\">LREM key count value</a> 移除列表元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-lset.html\" target=\"_blank\" rel=\"noopener\">LSET key index value</a> 通过索引设置列表元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-ltrim.html\" target=\"_blank\" rel=\"noopener\">LTRIM key start stop</a> 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-rpop.html\" target=\"_blank\" rel=\"noopener\">RPOP key</a> 移除列表的最后一个元素，返回值为移除的元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-rpoplpush.html\" target=\"_blank\" rel=\"noopener\">RPOPLPUSH source destination</a> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\">[RPUSH key value1 <a href=\"https://www.runoob.com/redis/lists-rpush.html\" target=\"_blank\" rel=\"noopener\">value2]</a> 在列表中添加一个或多个值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/lists-rpushx.html\" target=\"_blank\" rel=\"noopener\">RPUSHX key value</a> 为已存在的列表添加值</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"集合命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#集合命令\"></a> 集合命令<a href=\"Redis#集合命令\"></a></h3>\n<p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>\n<p>Redis 中集合是通过哈希表实现的</p>\n<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>\n<h5 id=\"实例-12\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-12\"></a> 实例<a href=\"Redis#实例-12\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SADD runoobkey redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SADD runoobkey mongodb</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SADD runoobkey mysql</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SADD runoobkey mysql</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SMEMBERS runoobkey</span><br><span class=\"line\"></span><br><span class=\"line\">1) \"mysql\"</span><br><span class=\"line\">2) \"mongodb\"</span><br><span class=\"line\">3) \"redis\"</span><br></pre></td></tr></table></div></figure>\n<p>在以上实例中我们通过 <strong>SADD</strong> 命令向名为 <strong>runoobkey</strong> 的集合插入的三个元素。</p>\n<p>下表列出了 Redis 集合基本命令：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[SADD key member1 <a href=\"https://www.runoob.com/redis/sets-sadd.html\" target=\"_blank\" rel=\"noopener\">member2]</a> 向集合添加一个或多个成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sets-scard.html\" target=\"_blank\" rel=\"noopener\">SCARD key</a> 获取集合的成员数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">[SDIFF key1 <a href=\"https://www.runoob.com/redis/sets-sdiff.html\" target=\"_blank\" rel=\"noopener\">key2]</a> 返回给定所有集合的差集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">[SDIFFSTORE destination key1 <a href=\"https://www.runoob.com/redis/sets-sdiffstore.html\" target=\"_blank\" rel=\"noopener\">key2]</a> 返回给定所有集合的差集并存储在 destination 中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">[SINTER key1 <a href=\"https://www.runoob.com/redis/sets-sinter.html\" target=\"_blank\" rel=\"noopener\">key2]</a> 返回给定所有集合的交集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">[SINTERSTORE destination key1 <a href=\"https://www.runoob.com/redis/sets-sinterstore.html\" target=\"_blank\" rel=\"noopener\">key2]</a> 返回给定所有集合的交集并存储在 destination 中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sets-sismember.html\" target=\"_blank\" rel=\"noopener\">SISMEMBER key member</a> 判断 member 元素是否是集合 key 的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sets-smembers.html\" target=\"_blank\" rel=\"noopener\">SMEMBERS key</a> 返回集合中的所有成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sets-smove.html\" target=\"_blank\" rel=\"noopener\">SMOVE source destination member</a> 将 member 元素从 source 集合移动到 destination 集合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sets-spop.html\" target=\"_blank\" rel=\"noopener\">SPOP key</a> 移除并返回集合中的一个随机元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">[SRANDMEMBER key <a href=\"https://www.runoob.com/redis/sets-srandmember.html\" target=\"_blank\" rel=\"noopener\">count]</a> 返回集合中一个或多个随机数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">[SREM key member1 <a href=\"https://www.runoob.com/redis/sets-srem.html\" target=\"_blank\" rel=\"noopener\">member2]</a> 移除集合中一个或多个成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">[SUNION key1 <a href=\"https://www.runoob.com/redis/sets-sunion.html\" target=\"_blank\" rel=\"noopener\">key2]</a> 返回所有给定集合的并集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">[SUNIONSTORE destination key1 <a href=\"https://www.runoob.com/redis/sets-sunionstore.html\" target=\"_blank\" rel=\"noopener\">key2]</a> 所有给定集合的并集存储在 destination 集合中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">[SSCAN key cursor <a href=\"https://www.runoob.com/redis/sets-sscan.html\" target=\"_blank\" rel=\"noopener\">MATCH pattern] [COUNT count]</a> 迭代集合中的元素</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"有序集合\"><a class=\"markdownIt-Anchor\" href=\"Redis#有序集合\"></a> 有序集合<a href=\"Redis#有序集合\"></a></h3>\n<p>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>\n<h5 id=\"tips\"><a class=\"markdownIt-Anchor\" href=\"Redis#tips\"></a> tips<a href=\"Redis#tips\"></a></h5>\n<p>在redis sorted sets里面当<strong>items内容大于64的时候</strong>同时使用了hash和skiplist两种设计实现。这也会为了排序和查找性能做的优化。所以如上可知：</p>\n<ul>\n<li><strong>添加和删除</strong>都需要修改skiplist，所以复杂度为<strong>O(log(n))</strong>。</li>\n<li>但是如果仅仅是<strong>查找</strong>元素的话可以直接使用hash，其复杂度为<strong>O(1)</strong></li>\n<li>其他的<strong>range操作</strong>复杂度一般为<strong>O(log(n))</strong></li>\n<li>当然如果是<strong>小于64的时候</strong>，因为是采用了ziplist的设计，其时间复杂度为<strong>O(n)</strong></li>\n</ul>\n<h5 id=\"实例-13\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-13\"></a> 实例<a href=\"Redis#实例-13\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; ZADD runoobkey 1 redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; ZADD runoobkey 2 mongodb</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; ZADD runoobkey 4 mysql</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; ZRANGE runoobkey 0 10 WITHSCORES</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;redis&quot;</span><br><span class=\"line\">2) &quot;1&quot;</span><br><span class=\"line\">3) &quot;mongodb&quot;</span><br><span class=\"line\">4) &quot;2&quot;</span><br><span class=\"line\">5) &quot;mysql&quot;</span><br><span class=\"line\">6) &quot;4&quot;</span><br></pre></td></tr></table></div></figure>\n<p>在以上实例中我们通过命令 <strong>ZADD</strong> 向 redis 的有序集合中添加了三个值并关联上分数。</p>\n<p>下表列出了 redis 有序集合的基本命令:</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[ZADD key score1 member1 <a href=\"https://www.runoob.com/redis/sorted-sets-zadd.html\" target=\"_blank\" rel=\"noopener\">score2 member2]</a> 向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zcard.html\" target=\"_blank\" rel=\"noopener\">ZCARD key</a> 获取有序集合的成员数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zcount.html\" target=\"_blank\" rel=\"noopener\">ZCOUNT key min max</a> 计算在有序集合中指定区间分数的成员数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zincrby.html\" target=\"_blank\" rel=\"noopener\">ZINCRBY key increment member</a> 有序集合中对指定成员的分数加上增量 increment</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">[ZINTERSTORE destination numkeys key <a href=\"https://www.runoob.com/redis/sorted-sets-zinterstore.html\" target=\"_blank\" rel=\"noopener\">key …]</a> 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zlexcount.html\" target=\"_blank\" rel=\"noopener\">ZLEXCOUNT key min max</a> 在有序集合中计算指定字典区间内成员数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">[ZRANGE key start stop <a href=\"https://www.runoob.com/redis/sorted-sets-zrange.html\" target=\"_blank\" rel=\"noopener\">WITHSCORES]</a> 通过索引区间返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">[ZRANGEBYLEX key min max <a href=\"https://www.runoob.com/redis/sorted-sets-zrangebylex.html\" target=\"_blank\" rel=\"noopener\">LIMIT offset count]</a> 通过字典区间返回有序集合的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">[ZRANGEBYSCORE key min max <a href=\"https://www.runoob.com/redis/sorted-sets-zrangebyscore.html\" target=\"_blank\" rel=\"noopener\">WITHSCORES] [LIMIT]</a> 通过分数返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrank.html\" target=\"_blank\" rel=\"noopener\">ZRANK key member</a> 返回有序集合中指定成员的索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">[ZREM key member <a href=\"https://www.runoob.com/redis/sorted-sets-zrem.html\" target=\"_blank\" rel=\"noopener\">member …]</a> 移除有序集合中的一个或多个成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebylex.html\" target=\"_blank\" rel=\"noopener\">ZREMRANGEBYLEX key min max</a> 移除有序集合中给定的字典区间的所有成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyrank.html\" target=\"_blank\" rel=\"noopener\">ZREMRANGEBYRANK key start stop</a> 移除有序集合中给定的排名区间的所有成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyscore.html\" target=\"_blank\" rel=\"noopener\">ZREMRANGEBYSCORE key min max</a> 移除有序集合中给定的分数区间的所有成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">[ZREVRANGE key start stop <a href=\"https://www.runoob.com/redis/sorted-sets-zrevrange.html\" target=\"_blank\" rel=\"noopener\">WITHSCORES]</a> 返回有序集中指定区间内的成员，通过索引，分数从高到低</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\"><code>ZREVRANGEBYSCORE key max min \\[WITHSCORES\\]</code>返回有序集中指定分数区间内的成员，分数从高到低排序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrank.html\" target=\"_blank\" rel=\"noopener\">ZREVRANK key member</a> 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zscore.html\" target=\"_blank\" rel=\"noopener\">ZSCORE key member</a> 返回有序集中，成员的分数值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\"><code>ZUNIONSTORE destination numkeys key \\[key ...\\]</code>计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">[ZSCAN key cursor <a href=\"https://www.runoob.com/redis/sorted-sets-zscan.html\" target=\"_blank\" rel=\"noopener\">MATCH pattern] [COUNT count]</a> 迭代有序集合中的元素（包括元素成员和元素分值）</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"hyperloglog\"><a class=\"markdownIt-Anchor\" href=\"Redis#hyperloglog\"></a> HyperLogLog<a href=\"Redis#hyperloglog\"></a></h3>\n<p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p>\n<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p>\n<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>\n<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>\n<h5 id=\"什么是基数\"><a class=\"markdownIt-Anchor\" href=\"Redis#什么是基数\"></a> 什么是基数?<a href=\"Redis#什么是基数\"></a></h5>\n<p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>\n<h5 id=\"实例-14\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-14\"></a> 实例<a href=\"Redis#实例-14\"></a></h5>\n<p>以下实例演示了 HyperLogLog 的工作过程：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD runoobkey \"redis\"</span><br><span class=\"line\">1) (integer) 1</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD runoobkey \"mongodb\"</span><br><span class=\"line\">1) (integer) 1</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFADD runoobkey \"mysql\"</span><br><span class=\"line\">1) (integer) 1</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PFCOUNT runoobkey</span><br><span class=\"line\">(integer) 3</span><br></pre></td></tr></table></div></figure>\n<p>下表列出了 redis HyperLogLog 的基本命令：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/hyperloglog-pfadd.html\" target=\"_blank\" rel=\"noopener\">PFADD key element element …</a> 添加指定元素到 HyperLogLog 中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[PFCOUNT key <a href=\"https://www.runoob.com/redis/hyperloglog-pfcount.html\" target=\"_blank\" rel=\"noopener\">key …]</a> 返回给定 HyperLogLog 的基数估算值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">[PFMERGE destkey sourcekey <a href=\"https://www.runoob.com/redis/hyperloglog-pfmerge.html\" target=\"_blank\" rel=\"noopener\">sourcekey …]</a> 将多个 HyperLogLog 合并为一个 HyperLogLog</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"发布订阅\"><a class=\"markdownIt-Anchor\" href=\"Redis#发布订阅\"></a> 发布订阅<a href=\"Redis#发布订阅\"></a></h3>\n<p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p>\n<p>Redis 客户端可以订阅任意数量的频道。</p>\n<p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/11/pubsub1.png\" alt=\"img\" class=\"article-img\"></p>\n<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/11/pubsub2.png\" alt=\"img\" class=\"article-img\"></p>\n<h5 id=\"实例-15\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-15\"></a> 实例<a href=\"Redis#实例-15\"></a></h5>\n<p>以下实例演示了发布订阅是如何工作的。在我们实例中我们创建了订阅频道名为 <strong>redisChat</strong>:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SUBSCRIBE redisChat</span><br><span class=\"line\"></span><br><span class=\"line\">Reading messages... (press Ctrl-C to quit)</span><br><span class=\"line\">1) \"subscribe\"</span><br><span class=\"line\">2) \"redisChat\"</span><br><span class=\"line\">3) (integer) 1</span><br></pre></td></tr></table></div></figure>\n<p>现在，我们先重新开启个 redis 客户端，然后在同一个频道 redisChat 发布两次消息，订阅者就能接收到消息。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; PUBLISH redisChat \"Redis is a great caching technique\"</span><br><span class=\"line\"></span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PUBLISH redisChat \"Learn redis by runoob.com\"</span><br><span class=\"line\"></span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 订阅者的客户端会显示如下消息</span></span><br><span class=\"line\">1) \"message\"</span><br><span class=\"line\">2) \"redisChat\"</span><br><span class=\"line\">3) \"Redis is a great caching technique\"</span><br><span class=\"line\">1) \"message\"</span><br><span class=\"line\">2) \"redisChat\"</span><br><span class=\"line\">3) \"Learn redis by runoob.com\"</span><br></pre></td></tr></table></div></figure>\n<p>下表列出了 redis 发布订阅常用命令：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">PSUBSCRIBE pattern [pattern …]订阅一个或多个符合给定模式的频道。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[PUBSUB subcommand <a href=\"https://www.runoob.com/redis/pub-sub-pubsub.html\" target=\"_blank\" rel=\"noopener\">argument [argument …]]</a> 查看订阅与发布系统状态。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/pub-sub-publish.html\" target=\"_blank\" rel=\"noopener\">PUBLISH channel message</a> 将信息发送到指定的频道。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">[PUNSUBSCRIBE <a href=\"https://www.runoob.com/redis/pub-sub-punsubscribe.html\" target=\"_blank\" rel=\"noopener\">pattern [pattern …]]</a> 退订所有给定模式的频道。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">SUBSCRIBE channel [channel …]订阅给定的一个或多个频道的信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">[UNSUBSCRIBE <a href=\"https://www.runoob.com/redis/pub-sub-unsubscribe.html\" target=\"_blank\" rel=\"noopener\">channel [channel …]]</a> 退订给定的频道。</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"Redis#事务\"></a> 事务<a href=\"Redis#事务\"></a></h3>\n<p>Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：</p>\n<ul>\n<li>批量操作在发送 EXEC 命令前被放入队列缓存。</li>\n<li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li>\n<li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li>\n</ul>\n<p>一个事务从开始到执行会经历以下三个阶段：</p>\n<ul>\n<li>开始事务。</li>\n<li>命令入队。</li>\n<li>执行事务。</li>\n</ul>\n<h5 id=\"实例-16\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-16\"></a> 实例<a href=\"Redis#实例-16\"></a></h5>\n<p>以下是一个事务的例子， 它先以 <strong>MULTI</strong> 开始一个事务， 然后将多个命令入队到事务中， 最后由 <strong>EXEC</strong> 命令触发事务， 一并执行事务中的所有命令：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; MULTI</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SET book-name &quot;Mastering C++ in 21 days&quot;</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; GET book-name</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SADD tag &quot;C++&quot; &quot;Programming&quot; &quot;Mastering Series&quot;</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SMEMBERS tag</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; EXEC</span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) &quot;Mastering C++ in 21 days&quot;</span><br><span class=\"line\">3) (integer) 3</span><br><span class=\"line\">4) 1) &quot;Mastering Series&quot;</span><br><span class=\"line\">   2) &quot;C++&quot;</span><br><span class=\"line\">   3) &quot;Programming&quot;</span><br></pre></td></tr></table></div></figure>\n<p>单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。</p>\n<p>事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。</p>\n<blockquote>\n<p><strong>这是官网上的说明 From redis docs on <a href=\"http://redis.io/topics/transactions\" target=\"_blank\" rel=\"noopener\">transactions</a>:</strong></p>\n<p>It’s important to note that even when a command fails, all the other commands in the queue are processed – Redis will not stop the processing of commands.</p>\n</blockquote>\n<p>比如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:7000&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:7000&gt; set a aaa</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">redis 127.0.0.1:7000&gt; set b bbb</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">redis 127.0.0.1:7000&gt; set c ccc</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">redis 127.0.0.1:7000&gt; exec</span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) OK</span><br></pre></td></tr></table></div></figure>\n<p>如果在 set b bbb 处失败，set a 已成功不会回滚，set c 还会继续执行。</p>\n<h5 id=\"redis-事务命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#redis-事务命令\"></a> Redis 事务命令<a href=\"Redis#redis-事务命令\"></a></h5>\n<p>下表列出了 redis 事务的相关命令：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/transactions-discard.html\" target=\"_blank\" rel=\"noopener\">DISCARD</a> 取消事务，放弃执行事务块内的所有命令。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/transactions-exec.html\" target=\"_blank\" rel=\"noopener\">EXEC</a> 执行所有事务块内的命令。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/transactions-multi.html\" target=\"_blank\" rel=\"noopener\">MULTI</a> 标记一个事务块的开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/transactions-unwatch.html\" target=\"_blank\" rel=\"noopener\">UNWATCH</a> 取消 WATCH 命令对所有 key 的监视。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><code>WATCH key \\[key ...\\]</code> 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"脚本\"><a class=\"markdownIt-Anchor\" href=\"Redis#脚本\"></a> 脚本<a href=\"Redis#脚本\"></a></h3>\n<p>Redis 脚本使用 Lua 解释器来执行脚本。 Redis 2.6 版本通过内嵌支持 Lua 环境。执行脚本的常用命令为 <strong>EVAL</strong>。</p>\n<h5 id=\"语法-5\"><a class=\"markdownIt-Anchor\" href=\"Redis#语法-5\"></a> 语法<a href=\"Redis#语法-5\"></a></h5>\n<p>Eval 命令的基本语法如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; EVAL script numkeys key [key ...] arg [arg ...]</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"实例-17\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-17\"></a> 实例<a href=\"Redis#实例-17\"></a></h5>\n<p>以下实例演示了 redis 脚本工作过程：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; EVAL &quot;return &#123;KEYS[1],KEYS[2],ARGV[1],ARGV[2]&#125;&quot; 2 key1 key2 first second</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;key1&quot;</span><br><span class=\"line\">2) &quot;key2&quot;</span><br><span class=\"line\">3) &quot;first&quot;</span><br><span class=\"line\">4) &quot;second&quot;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"redis-脚本命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#redis-脚本命令\"></a> Redis 脚本命令<a href=\"Redis#redis-脚本命令\"></a></h5>\n<p>下表列出了 redis 脚本常用命令：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[EVAL script numkeys key <a href=\"https://www.runoob.com/redis/scripting-eval.html\" target=\"_blank\" rel=\"noopener\">key …] arg [arg …]</a> 执行 Lua 脚本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[EVALSHA sha1 numkeys key <a href=\"https://www.runoob.com/redis/scripting-evalsha.html\" target=\"_blank\" rel=\"noopener\">key …] arg [arg …]</a> 执行 Lua 脚本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><code>SCRIPT EXISTS script \\[script ...\\]</code>查看指定的脚本是否已经被保存在缓存当中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/scripting-script-flush.html\" target=\"_blank\" rel=\"noopener\">SCRIPT FLUSH</a> 从脚本缓存中移除所有脚本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/scripting-script-kill.html\" target=\"_blank\" rel=\"noopener\">SCRIPT KILL</a> 杀死当前正在运行的 Lua 脚本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/scripting-script-load.html\" target=\"_blank\" rel=\"noopener\">SCRIPT LOAD script</a> 将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"连接\"><a class=\"markdownIt-Anchor\" href=\"Redis#连接\"></a> 连接<a href=\"Redis#连接\"></a></h3>\n<p>Redis 连接命令主要是用于连接 redis 服务。</p>\n<h5 id=\"实例-18\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-18\"></a> 实例<a href=\"Redis#实例-18\"></a></h5>\n<p>以下实例演示了客户端如何通过密码验证连接到 redis 服务，并检测服务是否在运行：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; AUTH &quot;password&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PING</span><br><span class=\"line\">PONG</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"redis-连接命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#redis-连接命令\"></a> Redis 连接命令<a href=\"Redis#redis-连接命令\"></a></h5>\n<p>下表列出了 redis 连接的基本命令：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/connection-auth.html\" target=\"_blank\" rel=\"noopener\">AUTH password</a> 验证密码是否正确</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/connection-echo.html\" target=\"_blank\" rel=\"noopener\">ECHO message</a> 打印字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/connection-ping.html\" target=\"_blank\" rel=\"noopener\">PING</a> 查看服务是否运行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/connection-quit.html\" target=\"_blank\" rel=\"noopener\">QUIT</a> 关闭当前连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/connection-select.html\" target=\"_blank\" rel=\"noopener\">SELECT index</a> 切换到指定的数据库</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"服务器\"><a class=\"markdownIt-Anchor\" href=\"Redis#服务器\"></a> 服务器<a href=\"Redis#服务器\"></a></h3>\n<p>Redis 服务器命令主要是用于管理 redis 服务。</p>\n<h5 id=\"实例-19\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-19\"></a> 实例<a href=\"Redis#实例-19\"></a></h5>\n<p>以下实例演示了如何获取 redis 服务器的统计信息：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; INFO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Server</span></span><br><span class=\"line\">redis_version:2.8.13</span><br><span class=\"line\">redis_git_sha1:00000000</span><br><span class=\"line\">redis_git_dirty:0</span><br><span class=\"line\">redis_build_id:c2238b38b1edb0e2</span><br><span class=\"line\">redis_mode:standalone</span><br><span class=\"line\">os:Linux 3.5.0-48-generic x86_64</span><br><span class=\"line\">arch_bits:64</span><br><span class=\"line\">multiplexing_api:epoll</span><br><span class=\"line\">gcc_version:4.7.2</span><br><span class=\"line\">process_id:3856</span><br><span class=\"line\">run_id:0e61abd297771de3fe812a3c21027732ac9f41fe</span><br><span class=\"line\">tcp_port:6379</span><br><span class=\"line\">uptime_in_seconds:11554</span><br><span class=\"line\">uptime_in_days:0</span><br><span class=\"line\">hz:10</span><br><span class=\"line\">lru_clock:16651447</span><br><span class=\"line\">config_file:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Clients</span></span><br><span class=\"line\">connected_clients:1</span><br><span class=\"line\">client-longest_output_list:0</span><br><span class=\"line\">client-biggest_input_buf:0</span><br><span class=\"line\">blocked_clients:0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Memory</span></span><br><span class=\"line\">used_memory:589016</span><br><span class=\"line\">used_memory_human:575.21K</span><br><span class=\"line\">used_memory_rss:2461696</span><br><span class=\"line\">used_memory_peak:667312</span><br><span class=\"line\">used_memory_peak_human:651.67K</span><br><span class=\"line\">used_memory_lua:33792</span><br><span class=\"line\">mem_fragmentation_ratio:4.18</span><br><span class=\"line\">mem_allocator:jemalloc-3.6.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Persistence</span></span><br><span class=\"line\">loading:0</span><br><span class=\"line\">rdb_changes_since_last_save:3</span><br><span class=\"line\">rdb_bgsave_in_progress:0</span><br><span class=\"line\">rdb_last_save_time:1409158561</span><br><span class=\"line\">rdb_last_bgsave_status:ok</span><br><span class=\"line\">rdb_last_bgsave_time_sec:0</span><br><span class=\"line\">rdb_current_bgsave_time_sec:-1</span><br><span class=\"line\">aof_enabled:0</span><br><span class=\"line\">aof_rewrite_in_progress:0</span><br><span class=\"line\">aof_rewrite_scheduled:0</span><br><span class=\"line\">aof_last_rewrite_time_sec:-1</span><br><span class=\"line\">aof_current_rewrite_time_sec:-1</span><br><span class=\"line\">aof_last_bgrewrite_status:ok</span><br><span class=\"line\">aof_last_write_status:ok</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Stats</span></span><br><span class=\"line\">total_connections_received:24</span><br><span class=\"line\">total_commands_processed:294</span><br><span class=\"line\">instantaneous_ops_per_sec:0</span><br><span class=\"line\">rejected_connections:0</span><br><span class=\"line\">sync_full:0</span><br><span class=\"line\">sync_partial_ok:0</span><br><span class=\"line\">sync_partial_err:0</span><br><span class=\"line\">expired_keys:0</span><br><span class=\"line\">evicted_keys:0</span><br><span class=\"line\">keyspace_hits:41</span><br><span class=\"line\">keyspace_misses:82</span><br><span class=\"line\">pubsub_channels:0</span><br><span class=\"line\">pubsub_patterns:0</span><br><span class=\"line\">latest_fork_usec:264</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Replication</span></span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">repl_backlog_active:0</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:0</span><br><span class=\"line\">repl_backlog_histlen:0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> CPU</span></span><br><span class=\"line\">used_cpu_sys:10.49</span><br><span class=\"line\">used_cpu_user:4.96</span><br><span class=\"line\">used_cpu_sys_children:0.00</span><br><span class=\"line\">used_cpu_user_children:0.01</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Keyspace</span></span><br><span class=\"line\">db0:keys=94,expires=1,avg_ttl=41638810</span><br><span class=\"line\">db1:keys=1,expires=0,avg_ttl=0</span><br><span class=\"line\">db3:keys=1,expires=0,avg_ttl=0</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"redis-服务器命令\"><a class=\"markdownIt-Anchor\" href=\"Redis#redis-服务器命令\"></a> Redis 服务器命令<a href=\"Redis#redis-服务器命令\"></a></h5>\n<p>下表列出了 redis 服务器的相关命令:</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令及描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-bgrewriteaof.html\" target=\"_blank\" rel=\"noopener\">BGREWRITEAOF</a> 异步执行一个 AOF（AppendOnly File） 文件重写操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-bgsave.html\" target=\"_blank\" rel=\"noopener\">BGSAVE</a> 在后台异步保存当前数据库的数据到磁盘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">[CLIENT KILL <a href=\"https://www.runoob.com/redis/server-client-kill.html\" target=\"_blank\" rel=\"noopener\">ip:port] [ID client-id]</a> 关闭客户端连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-client-list.html\" target=\"_blank\" rel=\"noopener\">CLIENT LIST</a> 获取连接到服务器的客户端连接列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-client-getname.html\" target=\"_blank\" rel=\"noopener\">CLIENT GETNAME</a> 获取连接的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-client-pause.html\" target=\"_blank\" rel=\"noopener\">CLIENT PAUSE timeout</a> 在指定时间内终止运行来自客户端的命令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-client-setname.html\" target=\"_blank\" rel=\"noopener\">CLIENT SETNAME connection-name</a> 设置当前连接的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-cluster-slots.html\" target=\"_blank\" rel=\"noopener\">CLUSTER SLOTS</a> 获取集群节点的映射数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-command.html\" target=\"_blank\" rel=\"noopener\">COMMAND</a> 获取 Redis 命令详情数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-command-count.html\" target=\"_blank\" rel=\"noopener\">COMMAND COUNT</a> 获取 Redis 命令总数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-command-getkeys.html\" target=\"_blank\" rel=\"noopener\">COMMAND GETKEYS</a> 获取给定命令的所有键</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-time.html\" target=\"_blank\" rel=\"noopener\">TIME</a> 返回当前服务器时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\"><code>COMMAND INFO command-name \\[command-name ...\\]</code>获取指定 Redis 命令描述的数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-config-get.html\" target=\"_blank\" rel=\"noopener\">CONFIG GET parameter</a> 获取指定配置参数的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-config-rewrite.html\" target=\"_blank\" rel=\"noopener\">CONFIG REWRITE</a> 对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-config-set.html\" target=\"_blank\" rel=\"noopener\">CONFIG SET parameter value</a> 修改 redis 配置参数，无需重启</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-config-resetstat.html\" target=\"_blank\" rel=\"noopener\">CONFIG RESETSTAT</a> 重置 INFO 命令中的某些统计数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-dbsize.html\" target=\"_blank\" rel=\"noopener\">DBSIZE</a> 返回当前数据库的 key 的数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-debug-object.html\" target=\"_blank\" rel=\"noopener\">DEBUG OBJECT key</a> 获取 key 的调试信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-debug-segfault.html\" target=\"_blank\" rel=\"noopener\">DEBUG SEGFAULT</a> 让 Redis 服务崩溃</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">21</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-flushall.html\" target=\"_blank\" rel=\"noopener\">FLUSHALL</a> 删除所有数据库的所有key</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">22</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-flushdb.html\" target=\"_blank\" rel=\"noopener\">FLUSHDB</a> 删除当前数据库的所有key</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\"><code>INFO \\[section\\]</code>获取 Redis 服务器的各种信息和统计数值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">24</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-lastsave.html\" target=\"_blank\" rel=\"noopener\">LASTSAVE</a> 返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">25</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-monitor.html\" target=\"_blank\" rel=\"noopener\">MONITOR</a> 实时打印出 Redis 服务器接收到的命令，调试用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">26</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-role.html\" target=\"_blank\" rel=\"noopener\">ROLE</a> 返回主从实例所属的角色</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">27</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-save.html\" target=\"_blank\" rel=\"noopener\">SAVE</a> 同步保存数据到硬盘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">[SHUTDOWN <a href=\"https://www.runoob.com/redis/server-shutdown.html\" target=\"_blank\" rel=\"noopener\">NOSAVE] [SAVE]</a> 异步保存数据到硬盘，并关闭服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">29</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-slaveof.html\" target=\"_blank\" rel=\"noopener\">SLAVEOF host port</a> 将当前服务器转变为指定服务器的从属服务器(slave server)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">30</td>\n<td style=\"text-align:left\"><code>SLOWLOG subcommand \\[argument\\]</code> 管理 redis 的慢日志</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">31</td>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/redis/server-sync.html\" target=\"_blank\" rel=\"noopener\">SYNC</a> 用于复制功能(replication)的内部命令</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"geo\"><a class=\"markdownIt-Anchor\" href=\"Redis#geo\"></a> GEO<a href=\"Redis#geo\"></a></h3>\n<p>Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，该功能在 Redis 3.2 版本新增。</p>\n<p>Redis GEO 操作方法有：</p>\n<ul>\n<li>geoadd：添加地理位置的坐标。</li>\n<li>geopos：获取地理位置的坐标。</li>\n<li>geodist：计算两个位置之间的距离。</li>\n<li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</li>\n<li>georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。</li>\n<li>geohash：返回一个或多个位置对象的 geohash 值。</li>\n</ul>\n<h5 id=\"geoadd\"><a class=\"markdownIt-Anchor\" href=\"Redis#geoadd\"></a> geoadd<a href=\"Redis#geoadd\"></a></h5>\n<p>geoadd 用于存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中。</p>\n<p>geoadd 语法格式如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GEOADD key longitude latitude member [longitude latitude member ...]</span><br></pre></td></tr></table></div></figure>\n<p>以下实例中 key 为 Sicily、Catania 为位置名称 ：</p>\n<h5 id=\"实例-20\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-20\"></a> 实例<a href=\"Redis#实例-20\"></a></h5>\n<p>redis**&gt;** GEOADD Sicily 13.361389 38.115556 “Palermo” 15.087269 37.502669 “Catania”<br>\n<strong>(<strong>integer</strong>)</strong> 2<br>\nredis**&gt;** GEODIST Sicily Palermo Catania<br>\n“166274.1516”<br>\nredis**&gt;** GEORADIUS Sicily 15 37 100 km<br>\n1**)** “Catania”<br>\nredis**&gt;** GEORADIUS Sicily 15 37 200 km<br>\n1**)** “Palermo”<br>\n2**)** “Catania”<br>\nredis**&gt;**</p>\n<h4 id=\"geopos\"><a class=\"markdownIt-Anchor\" href=\"Redis#geopos\"></a> geopos<a href=\"Redis#geopos\"></a></h4>\n<p>geopos 用于从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil。</p>\n<p>geopos 语法格式如下：</p>\n<h5 id=\"实例-21\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-21\"></a> 实例<a href=\"Redis#实例-21\"></a></h5>\n<p>redis**&gt;** GEOADD Sicily 13.361389 38.115556 “Palermo” 15.087269 37.502669 “Catania”<br>\n<strong>(<strong>integer</strong>)</strong> 2<br>\nredis**&gt;** GEOPOS Sicily Palermo Catania NonExisting<br>\n1**)** 1**)** “13.36138933897018433”<br>\n2**)** “38.11555639549629859”<br>\n2**)** 1**)** “15.08726745843887329”<br>\n2**)** “37.50266842333162032”<br>\n3**)** <strong>(<strong>nil</strong>)</strong><br>\nredis**&gt;**</p>\n<h4 id=\"geodist\"><a class=\"markdownIt-Anchor\" href=\"Redis#geodist\"></a> geodist<a href=\"Redis#geodist\"></a></h4>\n<p>geodist 用于返回两个给定位置之间的距离。</p>\n<p>geodist 语法格式如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GEODIST key member1 member2 [m|km|ft|mi]</span><br></pre></td></tr></table></div></figure>\n<p>member1 member2 为两个地理位置。</p>\n<p>最后一个距离单位参数说明：</p>\n<ul>\n<li>\n<p>m ：米，默认单位。</p>\n</li>\n<li>\n<p>km ：千米。</p>\n</li>\n<li>\n<p>mi ：英里。</p>\n</li>\n<li>\n<p>ft ：英尺。</p>\n</li>\n<li>\n<p>&gt; 计算 Palermo 与 Catania 之间的距离：实例</p>\n</li>\n<li>\n<p>redis**&gt;** GEOADD Sicily 13.361389 38.115556 “Palermo” 15.087269 37.502669 “Catania”<br>\n<strong>(<strong>integer</strong>)</strong> 2<br>\nredis**&gt;** GEODIST Sicily Palermo Catania<br>\n“166274.1516”<br>\nredis**&gt;** GEODIST Sicily Palermo Catania km<br>\n“166.2742”<br>\nredis**&gt;** GEODIST Sicily Palermo Catania mi<br>\n“103.3182”<br>\nredis**&gt;** GEODIST Sicily Foo Bar<br>\n<strong>(<strong>nil</strong>)</strong><br>\nredis**&gt;**</p>\n</li>\n</ul>\n<h3 id=\"georadius-georadiusbymember\"><a class=\"markdownIt-Anchor\" href=\"Redis#georadius-georadiusbymember\"></a> georadius、georadiusbymember<a href=\"Redis#georadius-georadiusbymember\"></a></h3>\n<p>georadius 以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</p>\n<p>georadiusbymember 和 GEORADIUS 命令一样， 都可以找出位于指定范围内的元素， 但是 georadiusbymember 的中心点是由给定的位置元素决定的， 而不是使用经度和纬度来决定中心点。</p>\n<p>georadius 与 georadiusbymember 语法格式如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</span><br><span class=\"line\">GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</span><br></pre></td></tr></table></div></figure>\n<p>参数说明：</p>\n<ul>\n<li>m ：米，默认单位。\n<ul>\n<li>km ：千米。</li>\n<li>mi ：英里。</li>\n<li>ft ：英尺。</li>\n<li>WITHDIST: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。</li>\n<li>WITHCOORD: 将位置元素的经度和维度也一并返回。</li>\n<li>WITHHASH: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</li>\n</ul>\n</li>\n<li>COUNT 限定返回的记录数。\n<ul>\n<li>ASC: 查找结果根据距离从近到远排序。</li>\n<li>DESC: 查找结果根据从远到近排序。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"georadius-实例\"><a class=\"markdownIt-Anchor\" href=\"Redis#georadius-实例\"></a> georadius 实例<a href=\"Redis#georadius-实例\"></a></h5>\n<p>redis**&gt;** GEOADD Sicily 13.361389 38.115556 “Palermo” 15.087269 37.502669 “Catania”<br>\n<strong>(<strong>integer</strong>)</strong> 2<br>\nredis**&gt;** GEORADIUS Sicily 15 37 200 km WITHDIST<br>\n1**)** 1**)** “Palermo”<br>\n2**)** “190.4424”<br>\n2**)** 1**)** “Catania”<br>\n2**)** “56.4413”<br>\nredis**&gt;** GEORADIUS Sicily 15 37 200 km WITHCOORD<br>\n1**)** 1**)** “Palermo”<br>\n2**)** 1**)** “13.36138933897018433”<br>\n2**)** “38.11555639549629859”<br>\n2**)** 1**)** “Catania”<br>\n2**)** 1**)** “15.08726745843887329”<br>\n2**)** “37.50266842333162032”<br>\nredis**&gt;** GEORADIUS Sicily 15 37 200 km WITHDIST WITHCOORD<br>\n1**)** 1**)** “Palermo”<br>\n2**)** “190.4424”<br>\n3**)** 1**)** “13.36138933897018433”<br>\n2**)** “38.11555639549629859”<br>\n2**)** 1**)** “Catania”<br>\n2**)** “56.4413”<br>\n3**)** 1**)** “15.08726745843887329”<br>\n2**)** “37.50266842333162032”<br>\nredis**&gt;**</p>\n<h5 id=\"georadiusbymember-实例\"><a class=\"markdownIt-Anchor\" href=\"Redis#georadiusbymember-实例\"></a> georadiusbymember 实例<a href=\"Redis#georadiusbymember-实例\"></a></h5>\n<ul>\n<li>redis**&gt;** GEOADD Sicily 13.583333 37.316667 “Agrigento”<br>\n<strong>(<strong>integer</strong>)</strong> 1<br>\nredis**&gt;** GEOADD Sicily 13.361389 38.115556 “Palermo” 15.087269 37.502669 “Catania”<br>\n<strong>(<strong>integer</strong>)</strong> 2<br>\nredis**&gt;** GEORADIUSBYMEMBER Sicily Agrigento 100 km<br>\n1**)** “Agrigento”<br>\n2**)** “Palermo”<br>\nredis**&gt;**</li>\n</ul>\n<h4 id=\"geohash\"><a class=\"markdownIt-Anchor\" href=\"Redis#geohash\"></a> geohash<a href=\"Redis#geohash\"></a></h4>\n<ul>\n<li>\n<p>Redis GEO 使用 geohash 来保存地理位置的坐标。</p>\n</li>\n<li>\n<p>geohash 用于获取一个或多个位置元素的 geohash 值。</p>\n</li>\n<li>\n<p>geohash 语法格式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GEOHASH key member [member ...]</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"实例-22\"><a class=\"markdownIt-Anchor\" href=\"Redis#实例-22\"></a> 实例<a href=\"Redis#实例-22\"></a></h5>\n<p>redis**&gt;** GEOADD Sicily 13.361389 38.115556 “Palermo” 15.087269 37.502669 “Catania”<br>\n<strong>(<strong>integer</strong>)</strong> 2<br>\nredis**&gt;** GEOHASH Sicily Palermo Catania<br>\n1**)** “sqc8b49rny0”<br>\n2**)** “sqdtr74hyu0”<br>\nredis**&gt;**</p>\n<h2 id=\"redistemplate\"><a class=\"markdownIt-Anchor\" href=\"Redis#redistemplate\"></a> RedisTemplate<a href=\"Redis#redistemplate\"></a></h2>\n<h5 id=\"引入依赖\"><a class=\"markdownIt-Anchor\" href=\"Redis#引入依赖\"></a> 引入依赖<a href=\"Redis#引入依赖\"></a></h5>\n<p>Spring Boot提供的数据访问框架Spring Data Redis基于Jedis。可以通过引入<code>spring-boot-starter-redis</code>来配置依赖关系。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>注意不同版本的spring boot下，redis的starter依赖名略有不同，如果上面的不行，可以尝试<code>spring-boot-starter-data-redis</code><strong>（养生堂使用的是这个）</strong></p>\n</blockquote>\n<h5 id=\"参数配置\"><a class=\"markdownIt-Anchor\" href=\"Redis#参数配置\"></a> 参数配置<a href=\"Redis#参数配置\"></a></h5>\n<p>按照惯例在<code>application.properties</code>中加入Redis服务端的相关配置，具体说明如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># REDIS (RedisProperties)</span></span><br><span class=\"line\"><span class=\"comment\"># Redis数据库索引（默认为0）</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.database</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"comment\"># Redis服务器地址</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.host</span>=<span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"comment\"># Redis服务器连接端口</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.port</span>=<span class=\"string\">6379</span></span><br><span class=\"line\"><span class=\"comment\"># Redis服务器连接密码（默认为空）</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.password</span>=<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"comment\"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.pool.max-active</span>=<span class=\"string\">8</span></span><br><span class=\"line\"><span class=\"comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.pool.max-wait</span>=<span class=\"string\">-1</span></span><br><span class=\"line\"><span class=\"comment\"># 连接池中的最大空闲连接</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.pool.max-idle</span>=<span class=\"string\">8</span></span><br><span class=\"line\"><span class=\"comment\"># 连接池中的最小空闲连接</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.pool.min-idle</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 连接超时时间（毫秒）</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.timeout</span>=<span class=\"string\">0</span></span><br></pre></td></tr></table></div></figure>\n<p><strong>其中spring.redis.database的配置通常使用0即可，Redis在配置的时候可以设置数据库数量，默认为16，可以理解为数据库的schema</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    database:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">      timeout:</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"comment\"># Redis服务器地址</span></span><br><span class=\"line\"><span class=\"attr\">      host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"comment\"># Redis服务器连接端口</span></span><br><span class=\"line\"><span class=\"attr\">      port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"comment\"># Redis服务器连接密码（默认为空）</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"comment\"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class=\"line\"><span class=\"attr\">      pool:</span></span><br><span class=\"line\"><span class=\"attr\">      max-active:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class=\"line\"><span class=\"attr\">        max-wait:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池中的最大空闲连接</span></span><br><span class=\"line\"><span class=\"attr\">        max-idle:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池中的最小空闲连接</span></span><br><span class=\"line\"><span class=\"attr\">        min-idle:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></div></figure>\n<h5 id=\"redis-server设置\"><a class=\"markdownIt-Anchor\" href=\"Redis#redis-server设置\"></a> redis-server设置<a href=\"Redis#redis-server设置\"></a></h5>\n<ul>\n<li>protected 改为 no</li>\n<li>daemonize 改为 no</li>\n</ul>\n<h5 id=\"测试访问\"><a class=\"markdownIt-Anchor\" href=\"Redis#测试访问\"></a> 测试访问<a href=\"Redis#测试访问\"></a></h5>\n<p>通过编写测试用例，举例说明如何访问Redis。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ng.redis.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Assert;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 保存字符串</span></span><br><span class=\"line\">\t\tstringRedisTemplate.opsForValue().set(<span class=\"string\">\"aaa\"</span>, <span class=\"string\">\"111\"</span>);</span><br><span class=\"line\">\t\tAssert.assertEquals(<span class=\"string\">\"111\"</span>, stringRedisTemplate.opsForValue().get(<span class=\"string\">\"aaa\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>通过上面这段极为简单的测试案例演示了如何通过自动配置的<code>StringRedisTemplate</code>对象进行Redis的读写操作，该对象从命名中就可注意到支持的是String类型。如果有使用过spring-data-redis的开发者一定熟悉<code>RedisTemplate&lt;K, V&gt;</code>接口，<code>StringRedisTemplate</code>就相当于<code>RedisTemplate&lt;String, String&gt;</code>的实现。</p>\n<p>除了String类型，实战中我们还经常会在Redis中存储对象，这时候我们就会想是否可以使用类似<code>RedisTemplate&lt;String, User&gt;</code>来初始化并进行操作。但是Spring Boot并不支持直接使用，需要我们自己实现<code>RedisSerializer&lt;T&gt;</code>接口来对传入对象进行序列化和反序列化，下面我们通过一个实例来完成对象的读写操作。</p>\n<ul>\n<li>创建要存储的对象：User</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> niu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020/7/28 上午9:48</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String username, Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>实现对象的序列化接口</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ng.redis.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.serializer.support.DeserializingConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.serializer.support.SerializingConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.SerializationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> niu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020/7/28 上午9:50</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisObjectSerializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">RedisSerializer</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Converter&lt;Object, <span class=\"keyword\">byte</span>[]&gt; serializer = <span class=\"keyword\">new</span> SerializingConverter();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Converter&lt;<span class=\"keyword\">byte</span>[], Object&gt; deserializer = <span class=\"keyword\">new</span> DeserializingConverter();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>[] EMPTY_ARRAY = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deserialize</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty(bytes)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> deserializer.convert(bytes);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SerializationException(<span class=\"string\">\"Cannot deserialize\"</span>, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] serialize(Object object) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> EMPTY_ARRAY;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> serializer.convert(object);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> EMPTY_ARRAY;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (data == <span class=\"keyword\">null</span> || data.length == <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>配置针对User的RedisTemplate实例</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ng.redis.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ng.redis.util.RedisObjectSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> niu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020/7/28 上午9:51</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(RedisOperations.class)</span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(RedisProperties.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  @Bean</span></span><br><span class=\"line\"><span class=\"comment\">//  JedisConnectionFactory jedisConnectionFactory() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//      return new JedisConnectionFactory();</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;</span></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"meta\">@ConditionalOnMissingBean</span>(StringRedisTemplate.class)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> StringRedisTemplate <span class=\"title\">stringRedisTemplate</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class=\"line\">    StringRedisTemplate template = <span class=\"keyword\">new</span> StringRedisTemplate();</span><br><span class=\"line\">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(<span class=\"string\">\"redisTemplate\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;Object, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RedisTemplate&lt;Object, Object&gt; template = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        JedisConnectionFactory jedisConnectionFactory = <span class=\"keyword\">new</span> JedisConnectionFactory();</span><br><span class=\"line\">        jedisConnectionFactory.afterPropertiesSet();</span><br><span class=\"line\">        template.setConnectionFactory(jedisConnectionFactory);</span><br><span class=\"line\">        template.setKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">    \t\ttemplate.setHashKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">        template.setValueSerializer(<span class=\"keyword\">new</span> RedisObjectSerializer());</span><br><span class=\"line\">    \t\ttemplate.setHashValueSerializer(<span class=\"keyword\">new</span> RedisObjectSerializer());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>完成了配置工作后，编写测试用例实验效果</li>\n</ul>\n<h5 id=\"redisutil工具类\"><a class=\"markdownIt-Anchor\" href=\"Redis#redisutil工具类\"></a> RedisUtil工具类<a href=\"Redis#redisutil工具类\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">keys</span><span class=\"params\">(String keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.keys(keys);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定缓存失效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time 时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">expire</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据key 获取过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getExpire</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断key是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 false不存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasKey</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.hasKey(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 可以传一个值 或多个</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(String... key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key != <span class=\"keyword\">null</span> &amp;&amp; key.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                redisTemplate.delete(key[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存放入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存放入并设置时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false 失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(String key, Object value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                set(key, value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递增</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta 要增加几(大于0)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">incr</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (delta &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"递增因子必须大于0\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递减</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta 要减少几(小于0)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">decr</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (delta &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"递减因子必须大于0\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * HashGet</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">hget</span><span class=\"params\">(String key, String item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取hashKey对应的所有键值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 对应的多个键值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Object, Object&gt; <span class=\"title\">hmget</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * HashSet</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map 对应多个键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 成功 false 失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hmset</span><span class=\"params\">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * HashSet 并设置时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map  对应多个键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time 时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hmset</span><span class=\"params\">(String key, Map&lt;String, Object&gt; map, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item  项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hset</span><span class=\"params\">(String key, String item, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item  项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hset</span><span class=\"params\">(String key, String item, Object value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除hash表中的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项 可以使多个 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hdel</span><span class=\"params\">(String key, Object... item)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForHash().delete(key, item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断hash表中是否有该项的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 false不存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hHasKey</span><span class=\"params\">(String key, String item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> by   要增加几(大于0)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">hincr</span><span class=\"params\">(String key, String item, <span class=\"keyword\">double</span> by)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * hash递减</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> by   要减少记(小于0)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">hdecr</span><span class=\"params\">(String key, String item, <span class=\"keyword\">double</span> by)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据key获取Set中的所有值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Object&gt; <span class=\"title\">sGet</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().members(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据value从一个set中查询,是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 false不存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sHasKey</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数据放入set缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key    键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 值 可以是多个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">sSet</span><span class=\"params\">(String key, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将set数据放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key    键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time   时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 值 可以是多个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">sSetAndTime</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> time, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取set缓存的长度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">sGetSetSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().size(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除值为value的</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key    键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 值 可以是多个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 移除的个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">setRemove</span><span class=\"params\">(String key, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ===============================list=================================</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取list缓存的内容</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start 开始</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">lGet</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取list缓存的长度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">lGetListSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过索引 获取list中的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">lGetIndex</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, Object value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, List&lt;Object&gt; value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据索引修改list中的某条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lUpdateIndex</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().set(key, index, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除N个值为value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> count 移除多少个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 移除的个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">lRemove</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> count, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> remove;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"Redis#测试\"></a> 测试<a href=\"Redis#测试\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ng.redis.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Assert;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, User&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 保存对象</span></span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"super\"</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">        redisTemplate.opsForValue().set(user.getUsername(), user);</span><br><span class=\"line\"></span><br><span class=\"line\">        user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"bat\"</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">        redisTemplate.opsForValue().set(user.getUsername(), user);</span><br><span class=\"line\"></span><br><span class=\"line\">        user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"spider\"</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\">        redisTemplate.opsForValue().set(user.getUsername(), user);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">\"super\"</span>).getAge().longValue());</span><br><span class=\"line\"><span class=\"comment\">//        Assert.assertEquals(30, redisTemplate.opsForValue().get(\"蝙蝠侠\").getAge().longValue());</span></span><br><span class=\"line\"><span class=\"comment\">//        Assert.assertEquals(40, redisTemplate.opsForValue().get(\"蜘蛛侠\").getAge().longValue());</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"json\"><a class=\"markdownIt-Anchor\" href=\"Redis#json\"></a> Json<a href=\"Redis#json\"></a></h3>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span>(name = <span class=\"string\">\"redisTemplate\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;Object, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class=\"line\">    RedisTemplate&lt;Object, Object&gt; template = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//使用fastjson序列化</span></span><br><span class=\"line\">    FastJsonRedisSerializer fastJsonRedisSerializer = <span class=\"keyword\">new</span> FastJsonRedisSerializer(Object.class);</span><br><span class=\"line\">    <span class=\"comment\">// value值的序列化采用fastJsonRedisSerializer</span></span><br><span class=\"line\">    template.setValueSerializer(fastJsonRedisSerializer);</span><br><span class=\"line\">    template.setHashValueSerializer(fastJsonRedisSerializer);</span><br><span class=\"line\">    <span class=\"comment\">// key的序列化采用StringRedisSerializer</span></span><br><span class=\"line\">    template.setKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">    template.setHashKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>json使用</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(((JSONObject) redisTemplate.opsForValue().get(<span class=\"string\">\"zhx\"</span>)).getInteger(<span class=\"string\">\"age\"</span>));</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>所需依赖</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.48<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n","prev":{"title":"java1.8/Stream","link":"java1.8/Stream"},"next":{"title":"Excel生成工具类","link":"Excel生成工具类"},"plink":"ilucia.github.io/Redis/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> Redis","id":"redis","index":"1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> Redis特性","id":"redis特性","index":"1.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> Redis配置","id":"redis配置","index":"1.2","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 查看配置","id":"查看配置","index":"1.2.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 编辑配置","id":"编辑配置","index":"1.2.2"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 参数说明","id":"参数说明","index":"1.3"},{"title":"<a class=\"markdownIt-Anchor\"></a> Redis 数据类型","id":"redis-数据类型","index":"1.4","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> String（字符串）","id":"string字符串","index":"1.4.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> Hash（哈希）","id":"hash哈希","index":"1.4.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> List（列表）","id":"list列表","index":"1.4.3"},{"title":"<a class=\"markdownIt-Anchor\"></a> Set（集合）","id":"set集合","index":"1.4.4"},{"title":"<a class=\"markdownIt-Anchor\"></a> zset(sorted set：有序集合)","id":"zsetsorted-set有序集合","index":"1.4.5"},{"title":"<a class=\"markdownIt-Anchor\"></a> 各个数据类型应用场景","id":"各个数据类型应用场景","index":"1.4.6"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> Redis命令","id":"redis命令","index":"1.5","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 客户端命令","id":"客户端命令","index":"1.5.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 键命令","id":"键命令","index":"1.5.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 字符串命令","id":"字符串命令","index":"1.5.3"},{"title":"<a class=\"markdownIt-Anchor\"></a> 哈希命令","id":"哈希命令","index":"1.5.4"},{"title":"<a class=\"markdownIt-Anchor\"></a> 列表命令","id":"列表命令","index":"1.5.5"},{"title":"<a class=\"markdownIt-Anchor\"></a> 集合命令","id":"集合命令","index":"1.5.6"},{"title":"<a class=\"markdownIt-Anchor\"></a> 有序集合","id":"有序集合","index":"1.5.7"},{"title":"<a class=\"markdownIt-Anchor\"></a> HyperLogLog","id":"hyperloglog","index":"1.5.8"},{"title":"<a class=\"markdownIt-Anchor\"></a> 发布订阅","id":"发布订阅","index":"1.5.9"},{"title":"<a class=\"markdownIt-Anchor\"></a> 事务","id":"事务","index":"1.5.10"},{"title":"<a class=\"markdownIt-Anchor\"></a> 脚本","id":"脚本","index":"1.5.11"},{"title":"<a class=\"markdownIt-Anchor\"></a> 连接","id":"连接","index":"1.5.12"},{"title":"<a class=\"markdownIt-Anchor\"></a> 服务器","id":"服务器","index":"1.5.13"},{"title":"<a class=\"markdownIt-Anchor\"></a> GEO","id":"geo","index":"1.5.14"},{"title":"<a class=\"markdownIt-Anchor\"></a> georadius、georadiusbymember","id":"georadius-georadiusbymember","index":"1.5.15"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> RedisTemplate","id":"redistemplate","index":"1.6","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> Json","id":"json","index":"1.6.1"}]}]}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2022年4月27日","updated":"2022年4月27日"}}