{"title":"软件测试小结","date":"2019-12-02T00:00:00.000Z","link":"Review/SoftwareTest","tags":["review","software test"],"categories":["review"],"updated":"2022-04-27T15:24:01.703Z","content":"<p>[toc]</p>\n<h1 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#概述\"></a> 概述<a href=\"Review/SoftwareTest#概述\"></a></h1>\n<h2 id=\"软件测试产生背景\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#软件测试产生背景\"></a> 软件测试产生背景<a href=\"Review/SoftwareTest#软件测试产生背景\"></a></h2>\n<ul>\n<li>\n<p>软件危机*</p>\n<p>软件的可靠性没有保障、维护费用不断上升、进度无法预测、成本增长无法控制、程序员无限增加等，形成软件开发局面失控的状态。</p>\n</li>\n<li>\n<p>缺陷累计放大</p>\n</li>\n<li>\n<p>缺陷出现原因</p>\n<ul>\n<li>产品说明书（主要原因）\n<ul>\n<li>随意、易变、沟通不足</li>\n</ul>\n</li>\n<li>设计（次要原因）\n<ul>\n<li>随意、易变、沟通不足</li>\n</ul>\n</li>\n<li>编码\n<ul>\n<li>软件复杂度、进度压力、低级错误</li>\n</ul>\n</li>\n<li>其他\n<ul>\n<li>理解错误、测试错误</li>\n</ul>\n</li>\n</ul>\n<p>缺乏规范化工程约束→缺陷的不断累积与放大效应</p>\n<table>\n<thead>\n<tr>\n<th>阶段</th>\n<th>正确需求</th>\n<th>需求缺陷</th>\n<th>设计缺陷</th>\n<th>编码缺陷</th>\n<th>未发现缺陷</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>需求阶段</td>\n<td>√</td>\n<td>√</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>设计阶段</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>编码阶段</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>-</td>\n</tr>\n<tr>\n<td>测试阶段</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>有关测试观点的正确理解</p>\n<ul>\n<li>\n<p>软件工程</p>\n<p>将系统化的、严格约束的、可量化的方法应用于软件的开发、运行和维护，即将工程化应用于软件</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"软件测试基本概念\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#软件测试基本概念\"></a> 软件测试基本概念<a href=\"Review/SoftwareTest#软件测试基本概念\"></a></h2>\n<ul>\n<li>\n<p>测试定义</p>\n<ul>\n<li>Bill Hetzelt  定义\n<ul>\n<li>测试就是建立一种信心，认为程序能够按照预期设想运行</li>\n<li>核心思想：测试是试图验证软件是可工作的</li>\n</ul>\n</li>\n<li>Glenford J. Myers 定义\n<ul>\n<li>测试是为发现错误而执行一个程序或系统的过程</li>\n<li>核心思想：测试是尽可能多地发现软件错误</li>\n<li>三个<strong>重要观点</strong>\n<ul>\n<li>测试是为了证明程序有错，而不是证明程序无错误</li>\n<li>一个好的测试用例是在于他能发现至今未发现的错误</li>\n<li>一个成功的测试时发现了至今未发现的错误的测试</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>IEEE Std 729-1983\n<ul>\n<li>使用人工或是自动手段来运行或测定某个系统的过程，其目的在于检验它是否满足规定的需求或是弄清预期结果与实际结果之间的差别</li>\n</ul>\n</li>\n<li>IEEE Std 610.12-1990<br>\n1. 在特定的条件下运行系统或构建，观察或记录结果，对系统的某些方面做出评价<br>\n2. 分析某个软件项已发现现存和要求的条件之差别并评价此软件项的特性</li>\n</ul>\n</li>\n<li>\n<p>测试与调试</p>\n</li>\n<li>\n<p>测试目的</p>\n<ol>\n<li>\n<p>确保软件质量</p>\n<p>找出软件错误和缺陷，降低软件发布后潜在错误和缺陷造成的损失；验证软件是否能满足用户需求，树立对软件的信心。</p>\n</li>\n<li>\n<p>确保软件开发过程方向的正确性</p>\n<p>通过分析错误产生的原因帮助发现当前开发工作所采用的软件过程的缺陷，促进软件过程改进；为风险评估提供信息</p>\n</li>\n</ol>\n</li>\n<li>\n<p>测试原理/原则</p>\n<ol>\n<li>\n<p>用户至上</p>\n<p>所有测试都应追溯到用户需求。最严重的错误是导致软件是导致软件无法满足的需求。测试的目标是在用户发现缺陷前找到它们。</p>\n</li>\n<li>\n<p>测试是有计划的活动</p>\n<p>测试计划制定先于测试的执行；测试贯穿于全部软件生存周期。</p>\n</li>\n<li>\n<p>缺陷出现的集群性</p>\n<p>80%的错误可能源于20%的模块。</p>\n</li>\n<li>\n<p>测试应从“小规模”走向“大规模”</p>\n<p>最初测试单个程序模块，然后在集成的模块中找缺陷，最后在整个系统中找缺陷，最后在整个系统中找缺陷</p>\n</li>\n<li>\n<p>穷尽测试（完全测试）不可能</p>\n<ul>\n<li>输入量太大</li>\n<li>输出结果太多</li>\n<li>执行路径太多</li>\n<li>etc</li>\n</ul>\n</li>\n<li>\n<p>有效的测试应由第三方独立进行</p>\n<p>有些测试应避免有开发人员进行</p>\n</li>\n<li>\n<p>测试无法揭示所有缺陷</p>\n<p>测试可以报告说有缺陷存在，但没有缺陷的话却不能说明软件没有缺陷</p>\n</li>\n<li>\n<p>测试的杀虫剂悖论</p>\n<p>潜在缺陷对已进行的测试具有免疫力</p>\n</li>\n<li>\n<p>测试是有风险的行为</p>\n<p><img src=\"/Review/SoftwareTest/image-20191216223328233.png\" alt=\"image-20191216223328233\" class=\"article-img\"></p>\n<ol start=\"10\">\n<li>并非所有的缺陷都需要修复\n<ul>\n<li>没有足够的时间</li>\n<li>不算真正的代码缺陷</li>\n<li>修复风险太大</li>\n<li>不值得修复</li>\n<li>etc</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>测试过程*</p>\n<ol>\n<li>拟定软件的<strong>测试计划</strong></li>\n<li>编制软件测试大纲</li>\n<li>设计和生成测试用例\n<ul>\n<li>测试用例定义\n<ol>\n<li>一组输入即运行<strong>前提条件</strong>，和为某特定目标而生成的<strong>预期结果</strong>（测试用例的实质）</li>\n<li>一个文档，详细说明<strong>输入、期望输出</strong>，和为一测试项所准备的一组执行条件（测试用例的一种存在方式）</li>\n</ol>\n</li>\n<li>测试用例设计准则\n<ol>\n<li>代表性\n<ul>\n<li>合理与不合理</li>\n<li>合法与非法</li>\n<li>边界和越界</li>\n<li>极限数据</li>\n<li>各种操作环境</li>\n<li>etc</li>\n</ul>\n</li>\n<li>可判定性</li>\n<li>可再现性</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>实施测试</li>\n<li>分析测试结果（测试报告）\n<ol>\n<li>收集测试结果</li>\n<li>生成测试报告</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>测试用例（三要素）</p>\n<ul>\n<li>输入</li>\n<li>执行条件</li>\n<li>期望输出</li>\n</ul>\n</li>\n<li>\n<p>软件测试类型</p>\n<ul>\n<li>\n<p>v模型</p>\n<ul>\n<li>需求分析↘概要设计↘详细设计↘编码V单元测试↗集成测试↗系统测试↗验收测试</li>\n</ul>\n</li>\n<li>\n<p>w模型</p>\n<p><img src=\"/Review/SoftwareTest/image-20191216224128644.png\" alt=\"image-20191216224128644\" class=\"article-img\"></p>\n</li>\n<li>\n<p>x模型</p>\n<p><img src=\"/Review/SoftwareTest/image-20191216224610871.png\" alt=\"image-20191216224610871\" class=\"article-img\"></p>\n</li>\n<li>\n<p>前置测试模型</p>\n<p><img src=\"/Review/SoftwareTest/image-20191216224238591.png\" alt=\"image-20191216224238591\" class=\"article-img\"></p>\n</li>\n<li>\n<p>h模型</p>\n<p><img src=\"/Review/SoftwareTest/image-20191216224254440.png\" alt=\"image-20191216224254440\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>软件测试w模型</p>\n</li>\n</ul>\n<h2 id=\"软件测试现状和趋势\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#软件测试现状和趋势\"></a> 软件测试现状和趋势<a href=\"Review/SoftwareTest#软件测试现状和趋势\"></a></h2>\n<ul>\n<li>\n<p>软件测试的地位（工作量百分比）*</p>\n<table>\n<thead>\n<tr>\n<th>阶段</th>\n<th>需求分析</th>\n<th>设计</th>\n<th>编码</th>\n<th>测试</th>\n<th>运行和维护</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>20%</td>\n<td>15%</td>\n<td>20%</td>\n<td>45%</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h1 id=\"白盒测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#白盒测试\"></a> 白盒测试<a href=\"Review/SoftwareTest#白盒测试\"></a></h1>\n<ul>\n<li>静态白盒测试\n<ul>\n<li>\n<p>在不执行代码的条件下有条理地仔细审查软件设计、体系结构和代码，从而找出软件缺陷的过程，有时被称为结构化分析</p>\n</li>\n<li>\n<p>尽早发现软件缺陷</p>\n</li>\n<li>\n<p>为后继测试中设计测试用例提供思路</p>\n</li>\n<li>\n<p>desk checking</p>\n</li>\n<li>\n<p>Peer preview</p>\n</li>\n<li>\n<p>walk through</p>\n</li>\n<li>\n<p>Inspection</p>\n</li>\n<li>\n<p>动态白盒测试方法</p>\n<ul>\n<li>\n<p>定义</p>\n<p>一种基于<strong>源程序</strong>或<strong>代码</strong>的测试方法。依据原程序或代码逻辑结构，生成测试用例以尽可能多地发现并修改源程序错误。</p>\n<p>白盒分为静态白盒测试和动态白盒测试</p>\n</li>\n<li>\n<p>实施者</p>\n</li>\n<li>\n<p>单元测试</p>\n<ul>\n<li>一般由开发人员进行</li>\n</ul>\n</li>\n<li>\n<p>集成测试</p>\n</li>\n<li>\n<p>测试人员和开发人员共同完成</p>\n</li>\n<li>\n<p>步骤</p>\n<ul>\n<li>\n<p>动态</p>\n<ol>\n<li>程序图</li>\n<li>生成测试用例</li>\n<li>执行测试</li>\n<li>分析覆盖标准</li>\n<li>判定测试结果</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>静态</p>\n<ul>\n<li>桌面检查</li>\n<li>代码走查</li>\n<li>代码审查</li>\n</ul>\n</li>\n<li>\n<p>优点</p>\n<ul>\n<li>检测代码中的判断和路径</li>\n<li>解释隐藏在代码中的错误</li>\n<li>对代码的测试比较彻底</li>\n</ul>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>无法检测代码中的不可达路径</li>\n<li>不验证需求规格</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>基于控制流覆盖的测试</p>\n<ul>\n<li>语句覆盖测试\n<ul>\n<li>语句覆盖\n<ul>\n<li>程序中每条<strong>语句</strong>都执行一次\n<ul>\n<li>处理错误的代码片段</li>\n<li>小概率事件（恶作剧）</li>\n<li>不可达代码</li>\n<li>较为脆弱，某些严重问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>条件测试\n<ul>\n<li>判定覆盖（分支覆盖）\n<ul>\n<li>每个<strong>判断</strong>取值<code>True</code>和<code>False</code>各一次</li>\n<li>优点\n<ul>\n<li>简单，包含语句覆盖并避免了语句覆盖覆盖的问题</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>忽略了表达式内的条件，不能发现每个条件的错误</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>条件覆盖\n<ul>\n<li>每个<strong>判断中的条件</strong>的取值至少满足一次</li>\n<li>不能保证程序所有分支都被执行</li>\n</ul>\n</li>\n<li>判定条件覆盖</li>\n<li>每个<strong>条件和由条件组成的判断</strong>的取值至少满足一次\n<ul>\n<li>错误屏蔽\n<ul>\n<li>指原子条件取值改变不会影响判定结果，因此该条件上的取值错误是不可见的。</li>\n</ul>\n</li>\n<li>注意<strong>短路</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>条件组合覆盖\n<ul>\n<li>每个<strong>条件的取值组合</strong>至少出现一次</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>（n为原子条件数），代价昂贵</li>\n<li>测试用例的约简\n<ul>\n<li>利用短路效应寻找最小测试用例集</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>路径测试\n<ul>\n<li>路径覆盖\n<ul>\n<li>优点\n<ul>\n<li>相对彻底的测试</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>路径分支可能以指数级增加(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>)</li>\n<li>存在不可达路径</li>\n<li>并未测试各个分支中的条件</li>\n</ul>\n</li>\n<li>考虑了各种判定结果的所有可能组合但是不能覆盖判定条件中结果的各种情况</li>\n<li>覆盖能力较强但是<strong>不能</strong>替代条件覆盖和条件组合覆盖标准</li>\n<li>覆盖程序中的<strong>所有路径</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/Review/SoftwareTest/image-20191217131957930.png\" alt=\"image-20191217131957930\" class=\"article-img\"></p>\n</li>\n<li>\n<p>基于控制流的测试</p>\n<ul>\n<li>\n<p>基本路径测试</p>\n</li>\n<li>\n<p>流程图→流图→（环复杂度）→基本路径→测试用例</p>\n</li>\n<li>\n<p><strong>流图</strong>用来描述程序中的逻辑控制流</p>\n</li>\n<li>\n<p>节点</p>\n</li>\n<li>\n<p>表示一个或多个语句</p>\n</li>\n<li>\n<p>边</p>\n</li>\n<li>\n<p>表示控制流</p>\n</li>\n<li>\n<p>域</p>\n</li>\n<li>\n<p>由边和节点限定的区间</p>\n</li>\n<li>\n<p>基本路径</p>\n<ul>\n<li>\n<p>任何贯穿程序 、至少引入一组新的处理语句或一个新判断的程序通道</p>\n</li>\n<li>\n<p>环复杂度是所有语句被执行一次所需测试用例数的上限</p>\n<table>\n<thead>\n<tr>\n<th>环复杂度</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-10</td>\n<td>良好</td>\n</tr>\n<tr>\n<td>11-20</td>\n<td>中等</td>\n</tr>\n<tr>\n<td>21-50</td>\n<td>复杂</td>\n</tr>\n<tr>\n<td>&gt;50</td>\n<td>无法理解</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareTest/image-20191217132339566.png\" alt=\"image-20191217132339566\" class=\"article-img\"></p>\n</li>\n<li>\n<p>基本路径集寻找算法</p>\n<ol>\n<li>确认从入口到出口的最短基本路径</li>\n<li>从入口到第一个未被先后评估为真和假两种结果的条件语句</li>\n<li>改变该条件语句的赋值</li>\n<li>重复步骤2-5直至所有基本路径都被找到</li>\n</ol>\n</li>\n<li>\n<p>循环测试</p>\n<ul>\n<li>嵌套循环</li>\n<li>先测试最内层循环<br>\n*  按照简单循环测试\n<ul>\n<li>由里向外，测试上层循环\n<ul>\n<li>此层以外的所有外层循环变量取最小值</li>\n<li>此层以内所有嵌套内层循环变量取典型值</li>\n</ul>\n</li>\n<li>重复上一条规则直至所有各层循环测试完毕</li>\n<li>对全部各层循环同时取最小循环次数或者同时取最大循环次数</li>\n</ul>\n</li>\n<li>串接循环\n<ul>\n<li>若串接循环的各个循环相互独立\n<ul>\n<li>分别用简单循环测试</li>\n</ul>\n</li>\n<li>若两个循环不独立\n<ul>\n<li>把第一个循环看作外循环，第二个循环看作内循环，用测试嵌套循环的办法来处理</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>非结构循环\n<ul>\n<li>结构化再处理</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>数据流测试</p>\n<ul>\n<li>\n<p>数据流测试</p>\n<ul>\n<li>\n<p>基本定义</p>\n<ul>\n<li>\n<p>P——程序</p>\n</li>\n<li>\n<p>G§——程序图（流图）</p>\n</li>\n<li>\n<p>V——变量集合</p>\n</li>\n<li>\n<p>PATH§——P的所有路径集合</p>\n</li>\n<li>\n<p>DEF(v,n)——在节点n定义了变量v(变量<strong>赋值</strong>语句)</p>\n<ul>\n<li>e.g. input x; x = 2;</li>\n</ul>\n</li>\n<li>\n<p>USE(v,n)——在节点n使用了变量v</p>\n<ul>\n<li>e.g. print x; a = 2 + x;</li>\n</ul>\n</li>\n<li>\n<p>P-use——USE(v,n)，谓词使用，即条件判断语句中</p>\n<ul>\n<li>e.g. if b &gt; 6</li>\n</ul>\n</li>\n<li>\n<p>C-use——USE(v,n)，运算使用，位于运算中</p>\n<ul>\n<li>\n<p>e.g. x = 3 + b</p>\n<blockquote>\n<ul>\n<li>O-use——输出使用</li>\n<li>L-use——定位使用（数组）</li>\n<li>I-use——迭代使用（循环）</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>du-path——定义-使用路径</p>\n<ul>\n<li>给定PATH§中的某条路径，如果定义节点DEF(v,m)为该路径的起始节点，使用节点USE(v,n)为该路径的终止节点，则该路径是v的一条du-path</li>\n</ul>\n</li>\n<li>\n<p>dc-path——定义-清除路径</p>\n<ul>\n<li>如果变量v的某个定义-使用路径，除起始节点外没有其他定义节点，则该变量路径是变量v的定义-清除路径</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>数据流覆盖测试</p>\n<ol>\n<li>对于给定的程序，构造相应的程序图</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>找出<strong>所有变量</strong>的<strong>du-path</strong>（可以约简）<br>\n3.  考察测试用例对这些路径的覆盖程度</li>\n</ol>\n<ul>\n<li>\n<p>常用覆盖标准</p>\n<ul>\n<li>Rapps和Weyuker标准\n<ul>\n<li>All-Paths\n<ul>\n<li>路径覆盖</li>\n</ul>\n</li>\n<li>All-Edges\n<ul>\n<li>分支覆盖</li>\n</ul>\n</li>\n<li>All-Nodes\n<ul>\n<li>语句覆盖</li>\n</ul>\n</li>\n<li>All-Defs\n<ul>\n<li>每个定义节点都有一条dc-path</li>\n</ul>\n</li>\n<li>All-P-Use\n<ul>\n<li>每个定义节点都有一条dc-path</li>\n</ul>\n</li>\n<li>All-P-Uses/some-C-Uses</li>\n<li>All-C-Uses/Some-P-Uses</li>\n<li>All-Users\n<ul>\n<li>每个变量的定义节点都有一条dc-path到达该变量的使用节点</li>\n</ul>\n</li>\n<li>All-du-path</li>\n</ul>\n</li>\n<li>Ntafos标准</li>\n<li>Ural标准</li>\n<li>Laski和Korel标准</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"白盒测试工具\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#白盒测试工具\"></a> 白盒测试工具<a href=\"Review/SoftwareTest#白盒测试工具\"></a></h2>\n<ul>\n<li>测试工具分类*\n<ul>\n<li>静态分析工具</li>\n<li>动态分析工具</li>\n</ul>\n</li>\n<li>测试工具的作用*\n<ul>\n<li>提高代码效率</li>\n<li>降低测试成本</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"控制流覆盖的测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#控制流覆盖的测试\"></a> 控制流覆盖的测试<a href=\"Review/SoftwareTest#控制流覆盖的测试\"></a></h2>\n<ol>\n<li>短路问题</li>\n<li>使用尽可能少的测试用例</li>\n<li>测试用例要体现控制流覆盖的特点</li>\n<li>对各个控制流覆盖标准有明确认识\n<ul>\n<li>语句</li>\n<li>判定</li>\n<li>条件</li>\n<li>判定条件</li>\n<li>条件组合</li>\n<li>路径</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>控制流覆盖不使用程序流图</p>\n</blockquote>\n<h2 id=\"基本路径测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#基本路径测试\"></a> 基本路径测试<a href=\"Review/SoftwareTest#基本路径测试\"></a></h2>\n<ol>\n<li>正确画出流程图，出自组合条件的判定</li>\n<li>使用多种方法计算圈（环）复杂度</li>\n<li>正确得出基本路径（顺序）</li>\n<li>不是所有基本路径都能写出测试用例</li>\n</ol>\n<h2 id=\"数据流测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#数据流测试\"></a> 数据流测试<a href=\"Review/SoftwareTest#数据流测试\"></a></h2>\n<ol>\n<li>不考虑数据流覆盖的各种标准</li>\n<li>能够找出定义节点和使用节点</li>\n<li>列举出所有可能的DU路径</li>\n<li>进行DU路径约简</li>\n</ol>\n<h1 id=\"黑盒测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#黑盒测试\"></a> 黑盒测试<a href=\"Review/SoftwareTest#黑盒测试\"></a></h1>\n<h2 id=\"黑盒测试基本概念\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#黑盒测试基本概念\"></a> 黑盒测试基本概念<a href=\"Review/SoftwareTest#黑盒测试基本概念\"></a></h2>\n<ul>\n<li>定义*\n<ul>\n<li>一种基于规格说明，不要求考察代码，以用户视角进行的测试</li>\n</ul>\n</li>\n<li>意义*\n<ul>\n<li>黑盒测试有助于软件产品的总体功能验证\n<ul>\n<li>检查明确需求和隐含需求</li>\n<li>采用有效输入和无效输入</li>\n<li>包含用户视角</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>目的\n<ul>\n<li>有时无法获取程序代码</li>\n<li>尽早进行黑盒测试可以尽早发现软件功能缺陷</li>\n<li>弥补遗漏的逻辑缺陷</li>\n<li>适用于测试的各个阶段\n<ul>\n<li>单元测试</li>\n<li>集成测试</li>\n<li>系统测试</li>\n<li>回归测试</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>实施者\n<ul>\n<li>专门的软件测试部门：有经验的测试人员</li>\n</ul>\n</li>\n<li>步骤*\n<ol>\n<li>规格说明书</li>\n<li>生成测试用例</li>\n<li>执行测试</li>\n<li>判定测试结果</li>\n</ol>\n</li>\n<li>进入退出条件</li>\n</ul>\n<h2 id=\"黑盒测试方法基础\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#黑盒测试方法基础\"></a> 黑盒测试方法基础<a href=\"Review/SoftwareTest#黑盒测试方法基础\"></a></h2>\n<ul>\n<li>\n<p>基于需求的测试（RTM）*</p>\n<ul>\n<li>\n<p>目的</p>\n<ul>\n<li>确认软件需求规格说明书列出的需求</li>\n</ul>\n</li>\n<li>\n<p>前提</p>\n<ul>\n<li>需求规格已经经过仔细评审</li>\n<li>隐含需求明确化</li>\n</ul>\n</li>\n<li>\n<p>需求规格说明样本</p>\n<ul>\n<li>需求规格说明</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>需求标识</th>\n<th>需求描述</th>\n<th>优先级</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>需求跟踪矩阵样本</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>需求标识</th>\n<th>需求描述</th>\n<th>优先级</th>\n<th>测试条件</th>\n<th>用例标识</th>\n<th>测试阶段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>需求跟踪矩阵(RTM)\n<ul>\n<li>作用\n<ul>\n<li>可跟踪每个需求的测试状态而不会遗漏任何需求</li>\n<li>优先执行优先级高的测试用例，尽早发现高优先级区域内缺陷</li>\n<li>可导出特定需求对应的测试用例清单</li>\n<li>评估测试工作量和测试进度的重要数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>测试执行数据样本</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>需求标识</th>\n<th>优先级</th>\n<th>测试用例</th>\n<th>用例总数</th>\n<th>通过用例</th>\n<th>未通过用例</th>\n<th>通过率</th>\n<th>缺陷数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>需求跟踪矩阵</p>\n<table>\n<thead>\n<tr>\n<th>需求标识</th>\n<th>需求描述</th>\n<th>优先级</th>\n<th>测试条件</th>\n<th>用例标识</th>\n<th>测试阶段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>作用</p>\n<ul>\n<li>可跟踪每个需求的测试状态而不会遗漏任何需求</li>\n<li>优先执行优先级高的测试用例，尽早发现高优先级区域内缺陷</li>\n<li>可导出特定需求对应的测试用例清单</li>\n<li>评估测试工作量和测试进度的重要数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>正面测试*</p>\n<ul>\n<li>测试用例通过一组预期输出验证产品需求</li>\n<li>证明软件对于每条规格说明和期望都能通过</li>\n</ul>\n</li>\n<li>\n<p>负面测试*</p>\n<ul>\n<li>展示当输入非预期输入时产品没有失败</li>\n<li>使用产品没有设计和预想到的场景，尝试使系统垮掉</li>\n<li>负面测试不能映射到需求</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"黑盒测试方法\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#黑盒测试方法\"></a> 黑盒测试方法<a href=\"Review/SoftwareTest#黑盒测试方法\"></a></h2>\n<ul>\n<li>\n<p>等价划分</p>\n<ul>\n<li>原理\n<ul>\n<li>将程序的输入域划分为数据类，以便导出测试用例</li>\n<li>他试图定义一个测试用例以发现各类错误，从而减少测试用例数目，降低测试工作量</li>\n</ul>\n</li>\n<li>等价类（划分）\n<ul>\n<li>如果软件行为对一组值来说是相同的，则称这组值为等价类</li>\n<li>产生同一个预期输出的一组输入值叫一个划分</li>\n<li>有效等价类\n<ul>\n<li>完全满足产品规格说明的输入数据构成的集合</li>\n</ul>\n</li>\n<li>无效等价类\n<ul>\n<li>不满足程序输入要求或者无效的输入数据构成的集合</li>\n</ul>\n</li>\n<li>划分类型\n<ol>\n<li>布尔表达式\n<ol>\n<li>一个有效等价类True</li>\n<li>一个无效等价类False</li>\n</ol>\n</li>\n<li>范围\n<ol>\n<li>一个有效等价类，范围内</li>\n<li>两个无效等价类，大于小于</li>\n</ol>\n</li>\n<li>数据个数\n<ol>\n<li>一个有效等价类，正确个数</li>\n<li>两个无效等价类，大于小于</li>\n</ol>\n</li>\n<li>集合的某个子集\n<ol>\n<li>一个有效等价类，正确集合</li>\n<li>若干无效等价类</li>\n</ol>\n</li>\n<li>一组列表形式的数据\n<ol>\n<li>多个有效等价类，每个输入数据为一个等价类</li>\n<li>1个无效等价类</li>\n</ol>\n</li>\n<li>要求符合几个规则\n<ol>\n<li>多个有效等价类</li>\n<li>若干无效等价类</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>步骤\n<ol>\n<li>划分准则</li>\n<li>确定有效等价类和无效等价类</li>\n<li>从等价类中选取样本数据</li>\n<li>根据需求写预期结果</li>\n<li>加入特殊值</li>\n<li>执行测试</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>边界值分析</p>\n<ul>\n<li>\n<p>软件的两个主要缺陷源</p>\n<ul>\n<li>条件</li>\n<li>边界</li>\n</ul>\n</li>\n<li>\n<p>边界值分析</p>\n<ul>\n<li>\n<p>原因</p>\n<ul>\n<li>使用比较操作符时未仔细分析</li>\n<li>多种循环和条件检查方法引起的困惑</li>\n<li>对边界附近需求的理解不够</li>\n</ul>\n</li>\n<li>\n<p>测试边界</p>\n<ul>\n<li>第一个-1/最后一个+1</li>\n<li>开始-1/完成+1</li>\n<li>最小值-1/最大值+1</li>\n</ul>\n</li>\n<li>\n<p>界定边界值</p>\n<ul>\n<li>n存在边界值的参数个数</li>\n<li>m边界值条件个数</li>\n</ul>\n</li>\n<li>\n<p>Paul Jorgensen公式</p>\n<ul>\n<li>\n<p>4n+1 基本边界测试</p>\n<ul>\n<li>\n<p>min</p>\n</li>\n<li>\n<p>min+1</p>\n</li>\n<li>\n<p>max-1</p>\n</li>\n<li>\n<p>max</p>\n</li>\n<li>\n<p>一个典型值</p>\n<p><img src=\"/Review/SoftwareTest/image-20191218144428829.png\" alt=\"image-20191218144428829\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>6n+1 健壮性边界测试</p>\n<ul>\n<li>\n<p>min-1</p>\n</li>\n<li>\n<p>min</p>\n</li>\n<li>\n<p>min+1</p>\n</li>\n<li>\n<p>max-1</p>\n</li>\n<li>\n<p>max</p>\n</li>\n<li>\n<p>max+1</p>\n</li>\n<li>\n<p>一个典型值</p>\n<p><img src=\"/Review/SoftwareTest/image-20191218144502989.png\" alt=\"image-20191218144502989\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>3m 边界条件测试</p>\n<ul>\n<li>self-1</li>\n<li>self</li>\n<li>self+1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>因果分析法</p>\n<ul>\n<li>因果图</li>\n<li>（需求规格说明书）→生成因果列表→（起因结果列表）→建立决策表→（决策表）→生成测试用例</li>\n<li>表示\n<ul>\n<li>原因 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>结果 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">E_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n</li>\n<li>因果4种关系\n<ul>\n<li><img src=\"/Review/SoftwareTest/image-20191218150755091.png\" alt=\"image-20191218150755091\"></li>\n<li><img src=\"/Review/SoftwareTest/image-20191218150807306.png\" alt=\"image-20191218150807306\"></li>\n<li><img src=\"/Review/SoftwareTest/image-20191218150816443.png\" alt=\"image-20191218150816443\"></li>\n<li><img src=\"/Review/SoftwareTest/image-20191218150830915.png\" alt=\"image-20191218150830915\"></li>\n</ul>\n</li>\n<li>输入约束4种\n<ul>\n<li><img src=\"/Review/SoftwareTest/image-20191218150845677.png\" alt=\"image-20191218150845677\"></li>\n<li><img src=\"/Review/SoftwareTest/image-20191218150858078.png\" alt=\"image-20191218150858078\"></li>\n</ul>\n</li>\n<li>输出约束1种\n<ul>\n<li><img src=\"/Review/SoftwareTest/image-20191218151004965.png\" alt=\"image-20191218151004965\"></li>\n</ul>\n</li>\n<li>决策表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>…</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>条件C1</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>条件C2</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>条件Cn</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>行动A1</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>行动A2</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>行动An</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>测试用例（输出）</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Step\n<ol>\n<li>分析规格说明书，识别原因和结果</li>\n<li>在因果图之间连接原因和结果</li>\n<li>表明原因之间以及结果之间的约束条件</li>\n<li>因果图转换为因果图列表进而生成决策表</li>\n<li>决策表的规则转换为测试用例</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>决策表</p>\n<ul>\n<li>\n<p>组成</p>\n<ul>\n<li>\n<p>条件桩</p>\n<ul>\n<li>列出所有可能问题</li>\n</ul>\n</li>\n<li>\n<p>条件项</p>\n<ul>\n<li>解除条件所有可能取值</li>\n</ul>\n</li>\n<li>\n<p>动作桩</p>\n<ul>\n<li>列出可能采取的操作</li>\n</ul>\n</li>\n<li>\n<p>动作项</p>\n<ul>\n<li>在条件项的各种取值情况下应采取的动作</li>\n</ul>\n</li>\n<li>\n<p>决策规则，贯穿条件项和动作项的一列</p>\n<p><img src=\"/Review/SoftwareTest/image-20191218152030382.png\" alt=\"image-20191218152030382\" class=\"article-img\"></p>\n</li>\n<li>\n<p>构造决策表</p>\n<ol>\n<li>列出所有的条件桩和条件项</li>\n<li>填入条件项</li>\n<li>填入动作项，得到初始决策表</li>\n<li>简化决策表，合并相似规则</li>\n</ol>\n</li>\n<li>\n<p>化简</p>\n</li>\n<li>\n<p>合并相似规则</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>基于模型的测试*</p>\n<pre><code>* 原理\n  * 软件执行过程可分解为若干对象和连接对象之间的关系\n    * 测试序列可视为验证对象间所期望的关系是否满足\n  \n* 适用领域\n  * 有限状态建模\n    * 工作流建模\n  * 数据流建模\n    * 时间建模\n</code></pre>\n<ul>\n<li>模型化软件</li>\n</ul>\n</li>\n<li>\n<p>正交数组测试</p>\n<ul>\n<li>\n<p>利用真叫测试再加上特殊用例测试，基本上可以均匀分散地覆盖到各种情况，又能大大减少测试用例个数</p>\n</li>\n<li>\n<p>正交表</p>\n<ul>\n<li>\n<p>构成</p>\n<ul>\n<li>因子：输入参数</li>\n<li>水平：输入取值</li>\n<li>因子数：正交表中列的个数</li>\n<li>水平数：单个因子的取值个数</li>\n<li>行数：正交表行数</li>\n<li>记法：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mrow><mi mathvariant=\"normal\">行</mi><mi mathvariant=\"normal\">数</mi></mrow><mo>(</mo><mi mathvariant=\"normal\">水</mi><mi mathvariant=\"normal\">平</mi><msup><mi mathvariant=\"normal\">数</mi><mrow><mi mathvariant=\"normal\">因</mi><mi mathvariant=\"normal\">子</mi><mi mathvariant=\"normal\">数</mi></mrow></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">L{行数}(水平数^{因子数})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mord\"><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">数</span></span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">水</span><span class=\"mord cjk_fallback\">平</span><span class=\"mord\"><span class=\"mord cjk_fallback\">数</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.363em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">因</span><span class=\"mord cjk_fallback mtight\">子</span><span class=\"mord cjk_fallback mtight\">数</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p>正交表的正交性</p>\n<ul>\n<li>整齐可比\n<ul>\n<li>每个因子的每个水平出现的次数完全相同</li>\n</ul>\n</li>\n<li>均匀分散\n<ul>\n<li>任意两列的水平搭配是完全相同的</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/Review/SoftwareTest/image-20191220111527013.png\" alt=\"image-20191220111527013\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>e.g.</p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mn>4</mn><mo>(</mo><msup><mn>2</mn><mn>3</mn></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">L4(2^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mord\">4</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>2</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Step</p>\n<ol>\n<li>确定因子和水平</li>\n<li>判断是否能使用正交数组（因子少于2则不适用）</li>\n<li>选择合适的正交表</li>\n<li>把变量值映射到表中</li>\n<li>正交测试用例制作</li>\n<li>补充测试用例</li>\n</ol>\n</li>\n<li>\n<p>正交表选择</p>\n<ul>\n<li>正交表因子个数≥实际因子数</li>\n<li>正交表每个因子书的水平个数≥实际每个因子数的水平个数</li>\n<li>正交表的行数\n<ul>\n<li>选择最少的正交表</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>把变量值映射到表中</p>\n<ul>\n<li>正交测试用例制作</li>\n<li>补充测试用例</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>蜕变测试</p>\n</li>\n<li>\n<p>随机测试</p>\n<h2 id=\"黑盒测试工具\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#黑盒测试工具\"></a> 黑盒测试工具</h2>\n<ul>\n<li>测试工具原理\n<ul>\n<li>以GUI自动化测试工具为例\n<ul>\n<li>运行北侧软件的同时，捕获过程中的键鼠操作，生成脚本文件，这个脚本文件可以被修改和回放</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>作用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"等价划分和边界值分析\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#等价划分和边界值分析\"></a> 等价划分和边界值分析<a href=\"Review/SoftwareTest#等价划分和边界值分析\"></a></h2>\n<ol>\n<li>等价类划分一定要考虑全面，分为有效等价类和 无效等价类，并统一编号</li>\n<li>写测试用例时，每个等价类至少有一个测试用例</li>\n<li>边界值分析可考虑边界值和条件值</li>\n<li>边界值要考虑需求的限制、数据类型的限制、系统的限制等多种限制条件</li>\n</ol>\n<h2 id=\"因果图和决策表\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#因果图和决策表\"></a> 因果图和决策表<a href=\"Review/SoftwareTest#因果图和决策表\"></a></h2>\n<ol>\n<li>能够列出原因和结果列表</li>\n<li>因果图的画法</li>\n<li>根据因果图得出因果列表，进一步得出决策表</li>\n<li>决策表约简</li>\n</ol>\n<h1 id=\"单元测试和集成测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#单元测试和集成测试\"></a> 单元测试和集成测试<a href=\"Review/SoftwareTest#单元测试和集成测试\"></a></h1>\n<h2 id=\"软件测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#软件测试\"></a> 软件测试<a href=\"Review/SoftwareTest#软件测试\"></a></h2>\n<ul>\n<li>基本概念*\n<ul>\n<li>软件单元\n<ul>\n<li>一个应用程序中的最小可测部分</li>\n</ul>\n</li>\n<li>定义\n<ul>\n<li>单元测试\n<ul>\n<li>对最小的软件设计单元的验证工作</li>\n</ul>\n</li>\n<li>模块测试\n<ul>\n<li>对最小的软件设计模块的验证工作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>意义\n<ul>\n<li>消除软件单元本身的不确定性</li>\n<li>其他测试阶段的必要的基础环节</li>\n</ul>\n</li>\n<li>目标\n<ul>\n<li>单元体现了预期的功能</li>\n<li>单元的运行能够覆盖预先设定的各种逻辑</li>\n<li>单元工作中：内部数据能够保持完整性</li>\n<li>可以接受正确数据，也能处理非法数据</li>\n<li>在数据边界上，单元能正常工作</li>\n<li>单元算法合理，性能良好</li>\n<li>扫描单元代码没有发现任何安全性问题</li>\n<li>etc</li>\n</ul>\n</li>\n<li>实施者\n<ul>\n<li>软件开发人员</li>\n</ul>\n</li>\n<li>关注点\n<ul>\n<li>模块功能</li>\n<li>内部逻辑处理</li>\n<li>数据结构</li>\n<li>性能</li>\n<li>安全</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>单元测试流程\n<ul>\n<li>技术和步骤\n<ul>\n<li>先设计测试用例，然后执行测试</li>\n<li>进入条件\n<ul>\n<li>编码开始：设计测试数据并执行测试</li>\n</ul>\n</li>\n<li>退出条件\n<ul>\n<li>完成测试计划</li>\n<li>发现并修正错误</li>\n<li>预算和开发时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>模块或构件接口\n<ul>\n<li>目标\n<ul>\n<li>进出模块/构件的数据流正确</li>\n</ul>\n</li>\n<li>关注点\n<ul>\n<li>接口名称、参数个数、类型、顺序的匹配</li>\n<li>输出或返回值的及其类型是否正确</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>局部数据结构\n<ul>\n<li>目标\n<ul>\n<li>数据在模块执行中都维持完整性和正确性</li>\n</ul>\n</li>\n<li>关注点\n<ul>\n<li>局部数据定义和使用过程的正确性</li>\n<li>局部数据结构对全局数据机构的影响</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>边界条件\n<ul>\n<li>目标\n<ul>\n<li>保证模块在边界条件上能够正确执行</li>\n</ul>\n</li>\n<li>关注点\n<ul>\n<li>数据机构中的边界</li>\n<li>控制流中的边界</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>独立路径\n<ul>\n<li>目标\n<ul>\n<li>保证模块中的每条独立（基本）路径都要走一遍，使得所有语句都被执行过一次</li>\n</ul>\n</li>\n<li>关注点\n<ul>\n<li>对路径的选择性测试（基本路径测试+循环测试）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>处理错误的路径\n<ul>\n<li>保证错误处理的正确性，软件的健壮性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>驱动器和程序桩\n<ul>\n<li>驱动器\n<ul>\n<li>对底层或子层模块进行测试时所编制的调用被测模块的程序，用以模拟被测模块的上级模块。</li>\n</ul>\n</li>\n<li>程序桩\n<ul>\n<li>对上层模块进行测试时，所编制的替代下层模块的程序，用以模拟被测模块工作过程中所调用的模块。</li>\n</ul>\n</li>\n<li>高内聚低耦合可以让驱动器和测试桩编写更加简单并已于发现错误</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"集成测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#集成测试\"></a> 集成测试<a href=\"Review/SoftwareTest#集成测试\"></a></h2>\n<ul>\n<li>概念*\n<ul>\n<li>把单独的软件模块结合在一起作为整体接受测试</li>\n</ul>\n</li>\n<li>接口*\n<ul>\n<li>内部接口</li>\n<li>外部接口</li>\n<li>接口提供方法\n<ul>\n<li>API</li>\n<li>SDK</li>\n</ul>\n</li>\n<li>桩程序</li>\n</ul>\n</li>\n<li>实施者\n<ul>\n<li>软件测试人员</li>\n<li>软件开发人员</li>\n</ul>\n</li>\n<li>瞬时集成测试\n<ul>\n<li>当所有构建都通过单元测试，就把他们组合成一个最终系统，并观察它能够正常运转</li>\n<li>缺陷\n<ul>\n<li>无休止的错误，修复困难</li>\n<li>一次性结合，难以找出错误原因</li>\n<li>容易和其他错误混淆</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>增量集成测试\n<ul>\n<li>特点\n<ul>\n<li>将程序分成小的部分进行构造和测试</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>错误容易分离和修正</li>\n<li>接口容易彻底测试</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>会有额外开销</li>\n</ul>\n</li>\n<li>自顶向下\n<ul>\n<li>深度优先</li>\n<li>广度优先</li>\n<li>优点\n<ul>\n<li>尽早发现高层控制和决策错误</li>\n<li>最多只需要一个驱动器</li>\n<li>每步只增加一个模块</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>对底层模块的行为验证比较晚</li>\n<li>需要编写额外程序模拟未测试的模块</li>\n<li>部分测试用例由于依赖其他层次的模块，在该模块未测试之前，这些测试用例的输入输出很难确定</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>自底向上\n<ul>\n<li>从原子模块构造并集成测试</li>\n<li>优点\n<ul>\n<li>尽早确认底层行为</li>\n<li>无需编写程序桩</li>\n<li>对实现特定功能的树容易表示输入输出</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>推迟确认高层行为</li>\n<li>需编写驱动器</li>\n<li>组合子树时，有许多元素要集成</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>混合式集成\n<ul>\n<li>综合</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"测试插装\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#测试插装\"></a> 测试插装<a href=\"Review/SoftwareTest#测试插装\"></a></h2>\n<ul>\n<li>黑盒插装*\n<ul>\n<li>随机数据生成器（随机测试）</li>\n<li>作用\n<ul>\n<li>避免只测试所知道的将奏效的场景</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>白盒插装*\n<ul>\n<li>语句覆盖插桩</li>\n<li>分支覆盖插桩</li>\n<li>条件覆盖插桩</li>\n<li>插桩\n<ul>\n<li>生成特定状态，检验状态的可达性</li>\n<li>显示或读取内部数据的私有数据</li>\n<li>检测不变数据</li>\n<li>检测前提条件</li>\n<li>人为触发事件时间</li>\n<li>检测事件时间</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"系统测试-确认测试和回归测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#系统测试-确认测试和回归测试\"></a> 系统测试、确认测试和回归测试<a href=\"Review/SoftwareTest#系统测试-确认测试和回归测试\"></a></h1>\n<h2 id=\"系统测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#系统测试\"></a> 系统测试<a href=\"Review/SoftwareTest#系统测试\"></a></h2>\n<ul>\n<li>\n<p>概念</p>\n<ul>\n<li>定义\n<ul>\n<li>对完整集成后的产品和解决方案的测试，用来评价系统对具体需求规格说明的<strong>功能</strong>和<strong>非功能</strong>的符合性的测试</li>\n</ul>\n</li>\n<li>意义（特点）\n<ul>\n<li>既是测试产品功能也是测试产品非功能的唯一测试阶段</li>\n</ul>\n</li>\n<li>目的\n<ol>\n<li>发现可能难以直接与模块或接口关联的缺陷</li>\n<li>发现产品设计、体系和代码的基础问题（产品级缺陷）</li>\n</ol>\n</li>\n<li>实施者\n<ul>\n<li>独立测试团队（引入独立视角，有助于发现遗漏缺陷）</li>\n</ul>\n</li>\n<li>引入时机\n<ul>\n<li>集成测试之后（基础的程序逻辑错误和缺陷已更正后）</li>\n</ul>\n</li>\n<li>实施原因\n<ol>\n<li>在测试中引入独立视角</li>\n<li>在测试中引入客户视角</li>\n<li>在测试用模拟用户的使用环境</li>\n<li>测试产品功能和非功能的问题</li>\n<li>建立对产品的信心</li>\n<li>分析和降低产品发布的风险</li>\n<li>保证满足所有需求，产品具备交付确认测试条件</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>功能测试</p>\n<ul>\n<li>\n<p>设计/体系结构测试</p>\n<ul>\n<li>\n<p>原理</p>\n<ul>\n<li>对照设计和体系结构开发和测试用例，从而整理出产品级测试用例</li>\n<li>集成测试用例关注模块或组件间交互，而系统功能测试用例关注整个产品的行为</li>\n</ul>\n</li>\n<li>\n<p>方法</p>\n<ul>\n<li>\n<p>体系结构静态测试</p>\n<ul>\n<li>体系结构分析</li>\n<li>对体系机构的特征进行建模、分析\n<ul>\n<li>e.g.\n<ul>\n<li>对类定义的一致性分析</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>体系结构的动态测试</p>\n<table>\n<thead>\n<tr>\n<th>测试用例特征</th>\n<th>建议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>测试用例关注代码逻辑、数据结构和产品单元</td>\n<td>单元测试</td>\n</tr>\n<tr>\n<td>测试用例关注组件接口</td>\n<td>集成测试</td>\n</tr>\n<tr>\n<td>测试用例关注的是不能为用户所看到的产品实现</td>\n<td>单元测试\\集成测试</td>\n</tr>\n<tr>\n<td>测试用例综合了客户使用和产品实现</td>\n<td>系统测试</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>业务垂直测试</p>\n<ul>\n<li>\n<p>原理</p>\n<ul>\n<li>针对不同业务纵深的产品，根据业务定制测试用例，验证业务运作和使用</li>\n</ul>\n</li>\n<li>\n<p>应用范围</p>\n<ul>\n<li>通用的工作流自动化系统在不同商业领域的应用</li>\n</ul>\n</li>\n<li>\n<p>方法</p>\n<ul>\n<li>\n<p>模拟</p>\n<ul>\n<li>测试需求和业务流</li>\n</ul>\n</li>\n<li>\n<p>复制</p>\n<ul>\n<li>\n<p>获取客户数据流和过程，针对特殊业务进行定制</p>\n<blockquote>\n<p>定制：改变系统的一般工作流，以适用于不同业务纵深</p>\n<p>术语：尽量使用各个业务领域的专属名词</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>部署测试</p>\n<ul>\n<li>验证系统能够满足客户的部署需求</li>\n<li>目的\n<ul>\n<li>特定产品版本短期内是否能够成功使用</li>\n</ul>\n</li>\n<li>离场部署\n<ul>\n<li>在产品开发组织内运行，以确保客户部署需求的（模拟）部署测试</li>\n</ul>\n</li>\n<li>现场部署（离场部署的扩展）\n<ul>\n<li>现场部署是指在客户场地中的资源和环境都发布后，实施的一种部署方案\n<ol>\n<li>采集系统的采集系统真实数据，建立镜像测试环境，重新执行用户操作</li>\n<li>引入新产品，进行新业务操作，同实对比事务处理情况，以确定新系统能否能够替代老系统</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Alpha/Beta测试</p>\n<ul>\n<li>Alpha测试\n<ul>\n<li>用户在开发环境下进行的受控测试</li>\n<li>特点\n<ul>\n<li>不由程序员或测试员完成，但开发者会在现场</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在Alpha测试达到一定程度后进行Beta测试</li>\n<li>Beta测试\n<ul>\n<li>用户在实际使用环境下进行测试，一种可以把待测产品交给客户收集反馈意见的机制</li>\n<li>特点\n<ul>\n<li>开发者通常不在现场</li>\n</ul>\n</li>\n<li>挑战\n<ul>\n<li>客户数量\n<ul>\n<li>客户充分了解产品</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>符合性的认证、标准和测试</p>\n<ul>\n<li>产品需要通过主流硬件、操作系统、数据库和其他基础设施构建上进行的验证，并符合相关法规和行规</li>\n<li>主流基础设施\n<ul>\n<li>操作系统</li>\n<li>硬件</li>\n<li>数据库</li>\n<li>etc</li>\n</ul>\n</li>\n<li>约定和法律要求\n<ul>\n<li>质量行业标准</li>\n<li>法规</li>\n<li>技术领域标准</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>非功能测试</p>\n<ul>\n<li>非功能测试用于验证系统的质量因素\n<ul>\n<li>理解产品行为、设计体系和体系结构</li>\n<li>针对不同配置和资源对产品进行测试</li>\n<li>手机和分析响应数据</li>\n<li>评判产品质量</li>\n</ul>\n</li>\n<li>非功能测试的最大挑战：设置配置</li>\n<li>原因\n<ul>\n<li>难以预测用户的使用环境</li>\n<li>对配置进行组合测试的代价太高</li>\n<li>建立测试环境成本高</li>\n<li>很难准确预测客户使用的数据</li>\n</ul>\n</li>\n<li>配置环境\n<ul>\n<li>模拟环境</li>\n<li>真实客户环境</li>\n</ul>\n</li>\n<li>可伸缩性测试/容量测试</li>\n<li>可靠性测试</li>\n<li>压力测试</li>\n<li>互操作性测试/兼容性测试</li>\n<li>可使用性与易获得性测试</li>\n<li>国际化测试</li>\n<li>性能测试</li>\n<li>安全性测试</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"确认测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#确认测试\"></a> 确认测试<a href=\"Review/SoftwareTest#确认测试\"></a></h2>\n<ul>\n<li>概念*\n<ul>\n<li>定义\n<ul>\n<li>检查产品是满足在项目的需求阶段定义的确认规则，或者说是否具备在真实环境中使用的条件</li>\n</ul>\n</li>\n<li>引入时机\n<ul>\n<li>系统测试之后</li>\n</ul>\n</li>\n<li>测试用例\n<ul>\n<li>测试用例数量较少，目的不是为了发现缺陷</li>\n</ul>\n</li>\n<li>测试环境\n<ul>\n<li>近似实际场景下进行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>实施者\n<ul>\n<li>客户或客户代表</li>\n</ul>\n</li>\n<li>目的*\n<ul>\n<li>验证和接受产品</li>\n</ul>\n</li>\n<li>产品确认\n<ul>\n<li>对现有测试用例进行分类形成确认准则</li>\n</ul>\n</li>\n<li>规程确认\n<ul>\n<li>根据交付规程进行定义</li>\n</ul>\n</li>\n<li>确认准则\n<ul>\n<li>服务约定等级</li>\n</ul>\n</li>\n<li>执行\n<ul>\n<li>开发组织\n<ul>\n<li>辅助客户完成确认测试</li>\n</ul>\n</li>\n<li>确认测试团队\n<ul>\n<li>产品管理层+支持团队+咨询团队\n<ul>\n<li>90%成员具有产品业务过程知识</li>\n<li>10%成员属于技术测试团队</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>开发组织的测试团队应当与确认测试团队不断沟通，提供采集测试数据和分析测试结果的帮助</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"回归测试\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareTest#回归测试\"></a> 回归测试<a href=\"Review/SoftwareTest#回归测试\"></a></h2>\n<ul>\n<li>概念*\n<ol>\n<li>回归测试是对之前已修改过、经过修改的程序进行的重新测试，以保证该修改没有引入新的错误或者由于更改而发现之前未发现的错误</li>\n<li>回归测试要保证增强型或改正型修改使软件正常进行并且不影响已有的功能</li>\n</ol>\n</li>\n<li>意义\n<ul>\n<li>保证软件维护时未更改的代码功能不会收到影响</li>\n<li>保证软件模块区域和持续维护过程与回归测试的协作关系，是回归测试成为一个每月/每周/每日的常规活动</li>\n<li>实现软件整个生命周期的测试</li>\n</ul>\n</li>\n<li>引入时机\n<ul>\n<li>单元测试</li>\n<li>集成测试</li>\n<li>系统测试</li>\n<li>引入原则\n<ul>\n<li>开发过程中发生修改或维护，就有必要进行回归测试</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>特点\n<ol>\n<li>测试计划\n<ol>\n<li>常规测试\n<ul>\n<li>已有的带有测试用例的测试计划</li>\n</ul>\n</li>\n<li>回归测试\n<ul>\n<li>更改的规格说明书、修改过的程序和需要更新的旧测试计划</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>测试范围\n<ol>\n<li>常规测试\n<ul>\n<li>整个程序</li>\n</ul>\n</li>\n<li>回归测试\n<ul>\n<li>被修改部分的正确性以及它与原有功能的整合</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>时间分配\n<ol>\n<li>常规测试\n<ul>\n<li>测试时间实现有预算</li>\n</ul>\n</li>\n<li>回归测试\n<ol>\n<li>测试时间不包含在进度表中</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>开发信息\n<ol>\n<li>常规测试\n<ul>\n<li>随时可获得开发信息</li>\n</ul>\n</li>\n<li>回归测试\n<ul>\n<li>只需保留开发信息保证回归测试正确</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>完成时间\n<ol>\n<li>常规测试\n<ul>\n<li>所需时间长</li>\n</ul>\n</li>\n<li>回归测试\n<ol>\n<li>只需测试软件的一部分，测试时间短</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>执行频率\n<ol>\n<li>常规测试\n<ul>\n<li>高频率的活动</li>\n</ul>\n</li>\n<li>回归测试\n<ul>\n<li>由系统被修改而触发的周期性活动、</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>过程\n<ol>\n<li>提出软件测试修改需求</li>\n<li>进行软件修改</li>\n<li>选择测试用例（选择正确的测试用例集）</li>\n<li>执行测试</li>\n<li>识别失败结果</li>\n<li>识别错误</li>\n<li>排除错误</li>\n</ol>\n</li>\n<li>策略\n<ul>\n<li>全部重新测试\n<ul>\n<li>不用进行测试用例选择</li>\n</ul>\n</li>\n<li>有选择地重新测试\n<ul>\n<li>灵活、适用于测试用例较多的情形</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>重新确认测试用例</li>\n<li>组测试*\n<ul>\n<li>多模块集成工作差错</li>\n</ul>\n</li>\n<li>波及效应\n<ul>\n<li>保证软件修改后仍然保持一致性与完整性</li>\n<li>需求的波及效应</li>\n<li>设计的波及效应</li>\n<li>代码的波及效应</li>\n<li>测试用例的波及效应</li>\n<li>步骤\n<ol>\n<li>开始</li>\n<li>实施初始修改</li>\n<li>识别收到潜在影响的区域</li>\n<li>需要进一步修改一保持一致性？\n<ul>\n<li>y:\n<ul>\n<li>决定如何修改</li>\n<li>go to 1</li>\n</ul>\n</li>\n<li>n:\n<ul>\n<li>continue</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>结束</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n","prev":{"title":"低成本个人NAS搭建解决方案（带内网穿透）","link":"Others/privateNas"},"next":{"title":"Hackathon 华东 @2019 赛事主办回顾与反思","link":"Others/reviewOfHackathon"},"plink":"ilucia.github.io/Review/SoftwareTest/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 概述","id":"概述","index":"1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 软件测试产生背景","id":"软件测试产生背景","index":"1.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 软件测试基本概念","id":"软件测试基本概念","index":"1.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 软件测试现状和趋势","id":"软件测试现状和趋势","index":"1.3"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 白盒测试","id":"白盒测试","index":"2","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 白盒测试工具","id":"白盒测试工具","index":"2.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 控制流覆盖的测试","id":"控制流覆盖的测试","index":"2.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 基本路径测试","id":"基本路径测试","index":"2.3"},{"title":"<a class=\"markdownIt-Anchor\"></a> 数据流测试","id":"数据流测试","index":"2.4"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 黑盒测试","id":"黑盒测试","index":"3","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 黑盒测试基本概念","id":"黑盒测试基本概念","index":"3.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 黑盒测试方法基础","id":"黑盒测试方法基础","index":"3.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 黑盒测试方法","id":"黑盒测试方法","index":"3.3"},{"title":"","id":"黑盒测试工具","index":"3.4"},{"title":"<a class=\"markdownIt-Anchor\"></a> 等价划分和边界值分析","id":"等价划分和边界值分析","index":"3.5"},{"title":"<a class=\"markdownIt-Anchor\"></a> 因果图和决策表","id":"因果图和决策表","index":"3.6"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 单元测试和集成测试","id":"单元测试和集成测试","index":"4","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 软件测试","id":"软件测试","index":"4.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 集成测试","id":"集成测试","index":"4.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 测试插装","id":"测试插装","index":"4.3"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 系统测试、确认测试和回归测试","id":"系统测试-确认测试和回归测试","index":"5","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 系统测试","id":"系统测试","index":"5.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 确认测试","id":"确认测试","index":"5.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 回归测试","id":"回归测试","index":"5.3"}]}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2019年12月2日","updated":"2022年4月27日"}}