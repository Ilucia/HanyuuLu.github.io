{"title":"spring&mybatis/Spring IoC","date":"2022-04-27T15:24:01.747Z","link":"spring&mybatis/Spring IoC","updated":"2022-04-27T15:24:01.747Z","content":"<h1 id=\"spring-ioc\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#spring-ioc\"></a> Spring IoC<a href=\"spring&mybatis/Spring IoC#spring-ioc\"></a></h1>\n<h2 id=\"ioc\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#ioc\"></a> IoC<a href=\"spring&mybatis/Spring IoC#ioc\"></a></h2>\n<h5 id=\"ioc的概念\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#ioc的概念\"></a> IoC的概念<a href=\"spring&mybatis/Spring IoC#ioc的概念\"></a></h5>\n<ul>\n<li>简单点儿说，IoC的理念就是，让别人为你服务！</li>\n<li>通常情况下，被注入对象会直接依赖于被依赖对象。但是，在IoC的场景中，二者之间通过<strong>IoC Service Provider</strong>来打交道，所有的被注入对象和依赖对象现在由IoC Service Provider统一管理。被注入对象需要什么，直接跟IoC Service Provider招呼一声，后者就会把相应的被依赖对象注入到被注入对象中，从而达到IoC Service Provider为被注入对象服务的目的</li>\n<li>IoC Service Provider在这里就是通常的IoC容器所充当的角色。从被注入对象的角度看，<strong>与之前直接寻求依赖对象相比，依赖对象的取得方式发生了反转</strong>，<strong>控制也从被注入对象转到了IoC Service Provider那里</strong></li>\n<li><strong>原来是需要什么东西自己去拿，现在是需要什么东西就让别人送过来</strong></li>\n<li><strong>IoC是一种可以帮助我们解耦各业务对象间依赖关系的对象绑定方式</strong></li>\n</ul>\n<p><img src=\"/Users/ng/Documents/spring&amp;mybatis/pictures/IoC%E7%9A%84%E8%A7%92%E8%89%B2.png\" alt=\"\" class=\"article-img\"></p>\n<h3 id=\"依赖注入\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#依赖注入\"></a> 依赖注入<a href=\"spring&mybatis/Spring IoC#依赖注入\"></a></h3>\n<ul>\n<li><strong>接口注入</strong>\n<ul>\n<li>从注入方式的使用上来说，接口注入是现在不甚提倡的一种方式，基本处于“退役状态”。因为它强制被注入对象实现不必要的接口，<strong>带有侵入性</strong>。而构造方法注入和setter方法注入则不需要如此</li>\n</ul>\n</li>\n<li><strong>构造方法注入</strong>\n<ul>\n<li>这种注入方式的优点就是，<strong>对象在构造完成之后，即已进入就绪状态，可以马上使用</strong></li>\n<li>缺点就是，当依赖对象比较多的时候，构造方法的参数列表会比较长。而通过反射构造对象的时候，对相同类型的参数的处理会比较困难，维护和使用上也比较麻烦。而且在Java中，构造方法<strong>无法被继承，无法设置默认值</strong>。对于非必须的依赖处理，可能需要引入多个构造方法，而参数数量的变动可能造成维护上的不便</li>\n</ul>\n</li>\n<li><strong>setter方法注入</strong>\n<ul>\n<li>因为方法可以命名，所以setter方法注入在描述性上要比构造方法注入好一些。另外，setter方法<strong>可以被继承，允许设置默认值</strong>，而且有良好的IDE支持</li>\n<li>缺点当然就是<strong>对象无法在构造完成后马上进入就绪状态</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ioc-service-provider\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#ioc-service-provider\"></a> IoC Service Provider<a href=\"spring&mybatis/Spring IoC#ioc-service-provider\"></a></h2>\n<h5 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#概念\"></a> 概念<a href=\"spring&mybatis/Spring IoC#概念\"></a></h5>\n<ul>\n<li>它可以指代<strong>任何将IoC场景中的业务对象绑定到一起</strong>的实现方式</li>\n<li><strong>Spring的IoC容器</strong>就是一个<strong>提供依赖注入服务的IoC Service Provider</strong></li>\n<li>IoC Service Provider的职责\n<ul>\n<li>业务对象的构建管理</li>\n<li>业务对象间的依赖绑定</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ioc-service-provider-如何管理对象间的依赖关系\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#ioc-service-provider-如何管理对象间的依赖关系\"></a> IoC Service Provider 如何管理对象间的依赖关系<a href=\"spring&mybatis/Spring IoC#ioc-service-provider-如何管理对象间的依赖关系\"></a></h3>\n<h5 id=\"直接编码方式\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#直接编码方式\"></a> 直接编码方式<a href=\"spring&mybatis/Spring IoC#直接编码方式\"></a></h5>\n<ul>\n<li>\n<p>通过<strong>程序编码</strong>的方式<strong>将被注入对象和依赖对象注册到容器中</strong>，并<strong>明确它们相互之间的依赖注入关系</strong></p>\n</li>\n<li>\n<p>通过<strong>为相应的类指定对应的具体实例</strong>，可以告知IoC容器，当我们要这种类型的对象实例时，将容器中注册的、对应的那个具体实例返回给我们</p>\n<p><code>IoContainer container = ...;</code><br>\n<code>container.register(FXNewsProvider.class,new FXNewsProvider());</code><br>\n<code>container.register(IFXNewsListener.class,new DowJonesNewsListener());</code><br>\n<code>...</code><br>\n<code>FXNewsProvider newsProvider = (FXNewsProvider)container.get(FXNewsProvider.class);</code><br>\n<code>newProvider.getAndPersistNews();</code></p>\n</li>\n</ul>\n<h5 id=\"直接编码方式-接口注入\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#直接编码方式-接口注入\"></a> 直接编码方式-接口注入<a href=\"spring&mybatis/Spring IoC#直接编码方式-接口注入\"></a></h5>\n<ul>\n<li>\n<p>除了注册相应对象，还要<strong>将“注入标志接口”与相应的依赖对象绑定</strong>一下</p>\n<p><code>IoContainer container = ...;</code><br>\n<code>container.register(FXNewsProvider.class,new FXNewsProvider());</code><br>\n<code>container.register(IFXNewsListener.class,new DowJonesNewsListener());</code><br>\n<code>...</code><br>\n<strong><code>container.bind(IFXNewsListenerCallable.class, container.get(IFXNewsListener.class));</code></strong><br>\n<code>...</code><br>\n<code>FXNewsProvider newsProvider = (FXNewsProvider)container.get(FXNewsProvider.class);</code><br>\n<code>newProvider.getAndPersistNews();</code></p>\n</li>\n<li>\n<p>通过<strong>bind方法</strong>将“被注入对象”（由IFXNewsListenerCallable接口添加标志）所依赖的对象，绑定为容器中注册过的IFXNewsListener类型的对象实例</p>\n</li>\n<li>\n<p>容器在返回FXNewsProvider对象实例之前，会<strong>根据这个绑定信息</strong>，将IFXNewsListener注册到容器中的对象实例<strong>注入到“被注入对象”</strong>——FXNewsProvider中，并最终返回已经组装完毕FXNewsProvider对象</p>\n</li>\n</ul>\n<h5 id=\"配置文件方式\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#配置文件方式\"></a> 配置文件方式<a href=\"spring&mybatis/Spring IoC#配置文件方式\"></a></h5>\n<ul>\n<li>通过XML文件来管理对象注册和对象间依赖关系</li>\n</ul>\n<h5 id=\"注解方式\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#注解方式\"></a> 注解方式<a href=\"spring&mybatis/Spring IoC#注解方式\"></a></h5>\n<ul>\n<li>直接在类中<strong>使用元数据信息来标注各个对象之间的依赖关系</strong>，然后<strong>由Guice框架根据这些注解所提供的信息将这些对象组装</strong>后，交给客户端对象使用</li>\n<li>通过**@Inject**，我们指明需要IoC Service Provider<strong>通过构造方法注入方式</strong>，为FXNewsProvider注入其所依赖的对象。至于余下的<strong>依赖相关信息</strong>，<strong>在Guice中是由相应的Module来提供的</strong>\n<ul>\n<li>通过Module指定进一步的依赖注入相关信息之后，我们就可以直接从Guice那里取得最终已经注入完毕，并直接可用的对象了</li>\n</ul>\n</li>\n<li><strong>注解最终也要通过代码处理来确定最终的注入关系</strong>，从这点儿来说，注解方式可以算作编码方式的一种特殊情况</li>\n</ul>\n<h2 id=\"beanfactory\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#beanfactory\"></a> BeanFactory<a href=\"spring&mybatis/Spring IoC#beanfactory\"></a></h2>\n<h3 id=\"beanfactory和applicationcontext\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#beanfactory和applicationcontext\"></a> BeanFactory和ApplicationContext<a href=\"spring&mybatis/Spring IoC#beanfactory和applicationcontext\"></a></h3>\n<ul>\n<li>BeanFactory\n<ul>\n<li>基础类型IoC容器，提供完整的IoC服务支持</li>\n<li>默认采用<strong>延迟初始化策略</strong>（lazy-load）\n<ul>\n<li>只有当客户端对象需要访问容器中的某个受管对象的时候，才对该受管对象进行初始化以及依赖注入操作</li>\n<li>容器启动初期速度较快，所需要的资源有限</li>\n</ul>\n</li>\n<li>对于<strong>资源有限，并且功能要求不是很严格</strong>的场景，BeanFactory是比较合适的IoC容器选择</li>\n</ul>\n</li>\n<li>ApplicationContext\n<ul>\n<li>在BeanFactory的基础上构建，拥有BeanFactory的所有支持，还提供了其他高级特性\n<ul>\n<li>ApplicationContext<strong>间接继承自BeanFactory</strong>，所以说它是构建于BeanFactory之上的IoC容器</li>\n</ul>\n</li>\n<li>ApplicationContext所管理的对象，在该类型<strong>容器启动之后，默认全部初始化并绑定完成</strong>\n<ul>\n<li><strong>要求更多的系统资源</strong>，同时，因为在启动时就完成所有初始化，<strong>容器启动时间较</strong>之BeanFactory也会<strong>长</strong>一些</li>\n</ul>\n</li>\n<li>在那些<strong>系统资源充足，并且要求更多功能</strong>的场景中，ApplicationContext类型的容器是比较合适的选择</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"beanfactory概念\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#beanfactory概念\"></a> BeanFactory概念<a href=\"spring&mybatis/Spring IoC#beanfactory概念\"></a></h3>\n<ul>\n<li>BeanFactory，顾名思义，就是<strong>生产Bean的工厂</strong>\n<ul>\n<li><strong>把每个业务对象看作一个JavaBean对象</strong></li>\n<li>BeanFactory就像一个汽车生产厂。你从其他汽车零件厂商或者自己的零件生产部门取得汽车零件送入这个汽车生产厂，最后，只需要从生产线的终点取得成品汽车就可以了。相似地，将应用所需的所有业务对象交给BeanFactory之后，剩下要做的，就是直接从BeanFactory取得最终组装完成并且可用的对象。至于这个最终业务对象如何组装，你不需要关心，BeanFactory会帮你搞定</li>\n<li>BeanFactory肯定<strong>会公开一个取得组装完成的对象的方法接口</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BeanFactory</span> </span>&#123; </span><br><span class=\"line\">    String FACTORY_BEAN_PREFIX = <span class=\"string\">\"&amp;\"</span>; </span><br><span class=\"line\">    <span class=\"function\">Object <span class=\"title\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> BeansException</span>;</span><br><span class=\"line\">    <span class=\"function\">Object <span class=\"title\">getBean</span><span class=\"params\">(String name, Class requiredType)</span> <span class=\"keyword\">throws</span> BeansException</span>; </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@since</span> 2.5 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span> </span><br><span class=\"line\">    <span class=\"function\">Object <span class=\"title\">getBean</span><span class=\"params\">(String name, Object[] args)</span> <span class=\"keyword\">throws</span> BeansException</span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containsBean</span><span class=\"params\">(String name)</span></span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isSingleton</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException</span>; </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@since</span> 2.0.3 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isPrototype</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException</span>; </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@since</span> 2.0.1 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isTypeMatch</span><span class=\"params\">(String name, Class targetType)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException</span>; </span><br><span class=\"line\">    <span class=\"function\">Class <span class=\"title\">getType</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException</span>; </span><br><span class=\"line\">    String[] getAliases(String name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>\n<p>上面代码中的方法基本上都是<strong>查询相关的方法</strong>，例如，取得某个对象的方法（getBean）、查询某个对象是否存在于容器中的方法（containsBean），或者取得某个bean的状态或者类型的方法等</p>\n<ul>\n<li>因为通常情况下，对于独立的应用程序，只有主入口类才会跟容器的API直接耦合。</li>\n</ul>\n</li>\n<li>\n<p>使用BeanFactory<strong>前后唯一的不同，就是对象之间依赖关系的解决方式改变了</strong></p>\n</li>\n</ul>\n<h5 id=\"fx新闻应用设计和实现框架代码\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#fx新闻应用设计和实现框架代码\"></a> FX新闻应用设计和实现框架代码<a href=\"spring&mybatis/Spring IoC#fx新闻应用设计和实现框架代码\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设计FXNewsProvider类用于普遍的新闻处理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FXNewsProvider</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">... </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//设计IFXNewsListener接口抽象各个新闻社不同的新闻获取方式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IFXNewsListener</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">... </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//给出相应实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DowJonesNewsListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">IFXNewsListener</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">... </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//设计IFXNewsPersister接口抽象不同数据访问方式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IFXNewsPersister</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">... </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//实现相应的实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DowJonesNewsPersister</span> <span class=\"keyword\">implements</span> <span class=\"title\">IFXNewsPersister</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><strong>BeanFactory</strong>会<strong>通过常用的XML文件来注册并管理各个业务对象之间的依赖关系</strong></li>\n</ul>\n<h3 id=\"beanfactory的对象注册与依赖绑定方式\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#beanfactory的对象注册与依赖绑定方式\"></a> BeanFactory的对象注册与依赖绑定方式<a href=\"spring&mybatis/Spring IoC#beanfactory的对象注册与依赖绑定方式\"></a></h3>\n<ul>\n<li>为了能够明确<strong>管理各个业务对象以及业务对象之间的依赖绑定关系</strong>，需要某种途径来记录和管理这些信息\n<ul>\n<li>直接编码，配置文件，元数据</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"直接编码\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#直接编码\"></a> 直接编码<a href=\"spring&mybatis/Spring IoC#直接编码\"></a></h4>\n<ul>\n<li>BeanFactory只是一个接口，我们最终<strong>需要一个该接口的实现来进行实际的Bean的管理</strong></li>\n<li><strong>BeanFactory接口只定义如何访问容器内管理的Bean的方法</strong>，各个BeanFactory的具体实现类负责具体Bean的注册以及管理工作</li>\n<li><strong>BeanDefinitionRegistry接口才是在BeanFactory的实现中担当Bean注册管理的角色</strong>\n<ul>\n<li>通常情况下，具体的BeanFactory实现类会实现这个接口来管理Bean的注册</li>\n</ul>\n</li>\n<li>打个比方说，<strong>BeanDefinitionRegistry就像图书馆的书架</strong>，所有的书是放在书架上的。虽然你还书或者借书都是跟<strong>图书馆</strong>（也就是<strong>BeanFactory</strong>，或许BookFactory可能更好些）打交道，但书架才是存放各类图书的地方</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    DefaultListableBeanFactory beanRegistry = <span class=\"keyword\">new</span> DefaultListableBeanFactory(); </span><br><span class=\"line\">    BeanFactory container = (BeanFactory)bindViaCode(beanRegistry); </span><br><span class=\"line\">    FXNewsProvider newsProvider = ➥</span><br><span class=\"line\">    (FXNewsProvider)container.getBean(<span class=\"string\">\"djNewsProvider\"</span>); </span><br><span class=\"line\">    newsProvider.getAndPersistNews(); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BeanFactory <span class=\"title\">bindViaCode</span><span class=\"params\">(BeanDefinitionRegistry registry)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    AbstractBeanDefinition newsProvider = ➥</span><br><span class=\"line\">    <span class=\"keyword\">new</span> RootBeanDefinition(FXNewsProvider.class,<span class=\"keyword\">true</span>); </span><br><span class=\"line\">    AbstractBeanDefinition newsListener = ➥</span><br><span class=\"line\">    <span class=\"keyword\">new</span> RootBeanDefinition(DowJonesNewsListener.class,<span class=\"keyword\">true</span>); </span><br><span class=\"line\">    AbstractBeanDefinition newsPersister = ➥</span><br><span class=\"line\">    <span class=\"keyword\">new</span> RootBeanDefinition(DowJonesNewsPersister.class,<span class=\"keyword\">true</span>); </span><br><span class=\"line\">    <span class=\"comment\">// 将bean定义注册到容器中</span></span><br><span class=\"line\">    registry.registerBeanDefinition(<span class=\"string\">\"djNewsProvider\"</span>, newsProvider); </span><br><span class=\"line\">    registry.registerBeanDefinition(<span class=\"string\">\"djListener\"</span>, newsListener); </span><br><span class=\"line\">    registry.registerBeanDefinition(<span class=\"string\">\"djPersister\"</span>, newsPersister); </span><br><span class=\"line\">    <span class=\"comment\">// 指定依赖关系</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 可以通过构造方法注入方式</span></span><br><span class=\"line\">    ConstructorArgumentValues argValues = <span class=\"keyword\">new</span> ConstructorArgumentValues(); </span><br><span class=\"line\">    argValues.addIndexedArgumentValue(<span class=\"number\">0</span>, newsListener); </span><br><span class=\"line\">    argValues.addIndexedArgumentValue(<span class=\"number\">1</span>, newsPersister); </span><br><span class=\"line\">    newsProvider.setConstructorArgumentValues(argValues); </span><br><span class=\"line\">    <span class=\"comment\">// 2. 或者通过setter方法注入方式</span></span><br><span class=\"line\">    MutablePropertyValues propertyValues = <span class=\"keyword\">new</span> MutablePropertyValues(); </span><br><span class=\"line\">    propertyValues.addPropertyValue(<span class=\"keyword\">new</span> ropertyValue(<span class=\"string\">\"newsListener\"</span>,newsListener)); </span><br><span class=\"line\">    propertyValues.addPropertyValue(<span class=\"keyword\">new</span> PropertyValue(<span class=\"string\">\"newPersistener\"</span>,newsPersister)); </span><br><span class=\"line\">    newsProvider.setPropertyValues(propertyValues); </span><br><span class=\"line\">    <span class=\"comment\">// 绑定完成</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      因为传入的DefaultListableBeanFactory同时实现了BeanFactory和</span></span><br><span class=\"line\"><span class=\"comment\">      BeanDefinitionRegistry接口，所以，这样做强制类型转换不会出现问题。但需要注意的是，单纯</span></span><br><span class=\"line\"><span class=\"comment\">      的BeanDefinitionRegistry是无法强制转换到BeanFactory类型的</span></span><br><span class=\"line\"><span class=\"comment\">    **/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (BeanFactory)registry; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>在 main 方法中，<strong>首先构造一个 DefaultListableBeanFactory 作 为 BeanDefinition\u0002 Registry</strong>，<strong>然后将其交给bindViaCode方法进行具体的对象注册和相关依赖管理</strong>，<strong>然后通过bindViaCode返回的BeanFactory取得需要的对象</strong>，<strong>最后执行相应逻辑</strong>。在我们的实例里，当然就是取得FXNewsProvider进行新闻的处理</li>\n<li>在bindViaCode方法中，<strong>首先针对相应的业务对象构造与其相对应的BeanDefinition</strong>，使用了 RootBeanDefinition 作 为 BeanDefinition 的实现类。构造完成后，<strong>将这些BeanDefinition注册到通过方法参数传进来的BeanDefinitionRegistry中</strong>。之后，因为我们的FXNewsProvider是采用的构造方法注入，所以，需要<strong>通过ConstructorArgumentValues为其注入相关依赖</strong>。在这里为了同时说明setter方法注入，也同时展示了在Spring中如何使用代码实现setter方法注入。如果要运行这段代码，需要把setter方法注入部分的4行代码注释掉。<strong>最后，以BeanFactory的形式返回已经注册并绑定了所有相关业务对象的BeanDefini\u0002tionRegistry实例</strong></li>\n</ul>\n<h4 id=\"配置文件\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#配置文件\"></a> 配置文件<a href=\"spring&mybatis/Spring IoC#配置文件\"></a></h4>\n<ul>\n<li>采用外部配置文件时，Spring的IoC容器有一个统一的处理方式。通常情况下，需要根据不同的外<br>\n部配置文件格式，<strong>给出相应的BeanDefinitionReader实现类</strong>，<strong>由BeanDefinitionReader的相应实</strong><br>\n<strong>现类负责将相应的配置文件内容读取并映射到BeanDefinition</strong>，然后<strong>将映射后的BeanDefinition注</strong><br>\n<strong>册到一个BeanDefinitionRegistry</strong>，之后，<strong>BeanDefinitionRegistry即完成Bean的注册和加载</strong></li>\n</ul>\n<h5 id=\"properties文件\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#properties文件\"></a> properties文件<a href=\"spring&mybatis/Spring IoC#properties文件\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Properties格式表达的依赖注入配置内容</span></span><br><span class=\"line\"><span class=\"meta\">djNewsProvider.(class)</span>=<span class=\"string\">..FXNewsProvider </span></span><br><span class=\"line\"><span class=\"comment\"># ----------通过构造方法注入的时候------------- </span></span><br><span class=\"line\"><span class=\"meta\">djNewsProvider.$0(ref)</span>=<span class=\"string\">djListener </span></span><br><span class=\"line\"><span class=\"meta\">djNewsProvider.$1(ref)</span>=<span class=\"string\">djPersister </span></span><br><span class=\"line\"><span class=\"comment\"># ----------通过setter方法注入的时候--------- </span></span><br><span class=\"line\"><span class=\"comment\"># djNewsProvider.newsListener(ref)=djListener </span></span><br><span class=\"line\"><span class=\"comment\"># djNewsProvider.newPersistener(ref)=djPersister </span></span><br><span class=\"line\"><span class=\"meta\">djListener.(class)</span>=<span class=\"string\">..impl.DowJonesNewsListener </span></span><br><span class=\"line\"><span class=\"meta\">djPersister.(class)</span>=<span class=\"string\">..impl.DowJon</span></span><br><span class=\"line\"><span class=\"attr\">esNewsPersister</span></span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><strong>djNewsProvider作为beanName，后面通过.(class)表明对应的实现类是什么</strong>，实际上使用djNewsProvider.class=…的形式也是可以的，但Spring 1.2.6之后不再提倡使用，而<strong>提倡使用.(class)的形式</strong></li>\n<li><strong>通过在表示beanName的名称后添加.$[number]后缀的形式，来表示当前beanName对应的对象需要通过构造方法注入的方式注入相应依赖对象</strong>。在这里，我们分别将构造方法的第一个<br>\n参数和第二个参数对应到djListener和djPersister。需要注意的一点，就是**$0和$1后面的(ref)，(ref)用来表示所依赖的是引用对象，而不是普通的类型**。如果不加(ref)，<br>\nPropertiesBeanDefinitionReader会将djListener和djPersister作为简单的String类型进行注入，异常自然不可避免啦</li>\n<li>FXNewsProvider采用的是构造方法注入，而为了演示setter方法注入在Properties配置文件中又 5<br>\n是一个什么样子，以便于你更全面地了解基于Properties文件的配置方式，我们在下面增加了<br>\n<strong>setter方法注入</strong>的例子，不过进行了注释。实际上，<strong>与构造方法注入最大的区别就是，它不使用数字顺序来指定注入的位置，而使用相应的属性名称来指定注入</strong>。newsListener和<br>\nnewPersistener恰好就是我们的FXNewsProvider类中所声明的属性名称。这印证了之前在<br>\n比较构造方法注入和setter方法注入方式不同时提到的差异，<strong>即构造方法注入无法通过参数名称来标识注入的确切位置，而setter方法注入则可以通过属性名称来明确标识注入</strong>。与在<br>\nProperties中表达构造方法注入一样，同样需要注意，如果属性名称所依赖的是引用对象，那<br>\n么一定不要忘了(ref)</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加载Properties配置的BeanFactory的使用演示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  DefaultListableBeanFactory beanRegistry = <span class=\"keyword\">new</span> DefaultListableBeanFactory(); </span><br><span class=\"line\">  BeanFactory container = (BeanFactory)bindViaPropertiesFile(beanRegistry); </span><br><span class=\"line\">  FXNewsProvider newsProvider = (FXNewsProvider)container.getBean(<span class=\"string\">\"djNewsProvider\"</span>);</span><br><span class=\"line\">  newsProvider.getAndPersistNews(); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BeanFactory <span class=\"title\">bindViaPropertiesFile</span><span class=\"params\">(BeanDefinitionRegistry registry)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">  PropertiesBeanDefinitionReader reader = </span><br><span class=\"line\">  <span class=\"keyword\">new</span> PropertiesBeanDefinitionReader(registry); </span><br><span class=\"line\">  reader.loadBeanDefinitions(<span class=\"string\">\"classpath:../../binding-config.properties\"</span>); </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (BeanFactory)registry; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"xml文件\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#xml文件\"></a> xml文件<a href=\"spring&mybatis/Spring IoC#xml文件\"></a></h5>\n<ul>\n<li>Properties配置文件格式提供PropertiesBeanDefinitionReader相对应，<strong>Spring同样为XML格式的配置文件提供了现成的BeanDefinitionReader实现，即XmlBeanDefinitionReader</strong>。<strong>XmlBeanDefinitionReader负责读取Spring指定格式的XML配置文件并解析，之后将解析后的文件内容映射到相应的BeanDefinition，并加载到相应的BeanDefinitionRegistry中</strong>（在这里是Default\u0002ListableBeanFactory）。这时，整个BeanFactory就可以放给客户端使用了</li>\n<li>Spring在Default\u0002ListableBeanFactory的基础上构建了简化XML格式配置加载的XmlBeanFactory实现\n<ul>\n<li>XmlBeanFactory现已不再使用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"元数据\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#元数据\"></a> 元数据<a href=\"spring&mybatis/Spring IoC#元数据\"></a></h4>\n<ul>\n<li><strong>@Autowired的存在将告知Spring容器需要为当前对象注入哪些依赖对象</strong>。而**@Component则是配合Spring 2.5中新的classpath-scanning功能使用的**。现在我们只要再向Spring的配置文件中增加一个“触发器”，使用@Autowired和@Component标注的类就能获得依赖对象的注入了</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       \t\thttp://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">          http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">          http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">          http://www.springframework.org/schema/tx</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">          http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"</span>&gt;</span> </span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.spring21.project.base.package\"</span>/&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><code>&lt;context:component-scan/&gt;</code>会到指定的包（package）下面<strong>扫描标注有@Component的类</strong>，如果找到，则将它们<strong>添加到容器进行管理</strong>，并根据它们所标注的@Autowired为<strong>这些类注入符合条件的依赖对象</strong></li>\n</ul>\n<h2 id=\"ioc容器的实现\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#ioc容器的实现\"></a> IoC容器的实现<a href=\"spring&mybatis/Spring IoC#ioc容器的实现\"></a></h2>\n<ul>\n<li>\n<p>Spring的IoC容器会<strong>以某种方式加载Configuration Metadata</strong>（通常也就是XML格式的配置信息），然后<strong>根据这些信息绑定整个系统的对象</strong>，最终<strong>组装成一个可用的基于轻量级容器的应用系统</strong></p>\n</li>\n<li>\n<p>Spring的IoC容器实现以上功能的过程，基本上可以按照类似的流程划分为两个阶段，即<strong>容器启动阶段</strong>和<strong>Bean实例化阶段</strong></p>\n</li>\n</ul>\n<p><img src=\"/Users/ng/Documents/spring&amp;mybatis/pictures/%E5%AE%B9%E5%99%A8%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%90%84%E4%B8%AA%E9%98%B6%E6%AE%B5.png\" alt=\"\" class=\"article-img\"></p>\n<h5 id=\"容器启动阶段\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#容器启动阶段\"></a> 容器启动阶段<a href=\"spring&mybatis/Spring IoC#容器启动阶段\"></a></h5>\n<ul>\n<li>容器启动伊始，首先会<strong>通过某种途径加载Configuration MetaData</strong>。除了代码方式比较直接，在大部分情况下，容器需要依赖某些工具类（BeanDefinitionReader）对加载的Configuration MetaData进行解析和分析，并<strong>将分析后的信息编组为相应的BeanDefinition</strong>，最后<strong>把这些保存了bean定义必要信息的BeanDefinition，注册到相应的BeanDefinitionRegistry</strong>，这样容器启动工作就完成了</li>\n</ul>\n<h5 id=\"bean实例化阶段\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#bean实例化阶段\"></a> Bean实例化阶段<a href=\"spring&mybatis/Spring IoC#bean实例化阶段\"></a></h5>\n<ul>\n<li>经过第一阶段，现在所有的bean定义信息都通过BeanDefinition的方式注册到了BeanDefini\u0002tionRegistry中。<strong>当某个请求方通过容器的getBean方法明确地请求某个对象，或者因依赖关系容器需要隐式地调用getBean方法时，就会触发第二阶段的活动</strong></li>\n<li>该阶段，容器会首先检查所请求的对象之前是否已经初始化。<strong>如果没有，则会根据注册的BeanDefinition所提供的信息实例化被请求对象，并为其注入依赖</strong>。如果该对象实现了某些回调接口，也会根据回调接口的要求来装配它。<strong>当该对象装配完毕之后，容器会立即将其返回请求方使用</strong>。如果说第一阶段只是根据图纸装配生产线的话，那么第二阶段就是使用装配好的生产线来生产具体的产品了</li>\n</ul>\n<h3 id=\"干预容器启动阶段\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#干预容器启动阶段\"></a> 干预容器启动阶段<a href=\"spring&mybatis/Spring IoC#干预容器启动阶段\"></a></h3>\n<ul>\n<li>Spring提供了一种叫做<strong>BeanFactoryPostProcessor</strong>的容器扩展机制。该机制<strong>允许我们在容器实例化相应对象之前，对注册到容器的BeanDefinition所保存的信息做相应的修改</strong>。这就相当于在容器实现的第一阶段最后加入一道工序，让我们对最终的BeanDefinition做一些额外的操作，比如修改其中bean定义的某些属性，为bean定义增加其他信息等</li>\n<li>对于BeanFactory来说，我们需要用手动方式应用所有的BeanFactoryPostProcessor</li>\n<li>对于ApplicationContext来说，因为<strong>ApplicationContext会自动识别配置文件中的BeanFactoryPostProcessor并应用它</strong>，所以，相对于BeanFactory，在ApplicationContext中加载并应用BeanFactoryPostProcessor，<strong>仅需要在XML配置文件中将这些BeanFactoryPost\u0002Processor简单配置一下即可</strong></li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"locations\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>conf/jdbc.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>conf/mail.properties<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span> </span><br><span class=\"line\">... </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<h4 id=\"spring提供的beanfactorypostprocessor实现\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#spring提供的beanfactorypostprocessor实现\"></a> Spring提供的BeanFactoryPostProcessor实现<a href=\"spring&mybatis/Spring IoC#spring提供的beanfactorypostprocessor实现\"></a></h4>\n<h5 id=\"propertyplaceholderconfigurer\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#propertyplaceholderconfigurer\"></a> PropertyPlaceholderConfigurer<a href=\"spring&mybatis/Spring IoC#propertyplaceholderconfigurer\"></a></h5>\n<ul>\n<li>PropertyPlaceholderConfigurer<strong>允许我们在XML配置文件中使用占位符（Placeholder）</strong>，并<strong>将这些占位符所代表的资源单独配置到简单的properties文件中来加载</strong></li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>$&#123;jdbc.url&#125;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>$&#123;jdbc.driver&#125;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>$&#123;jdbc.username&#125;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>$&#123;jdbc.password&#125;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><strong>当BeanFactory在第一阶段加载完成所有配置信息时，BeanFac\u0002tory中保存的对象的属性信息还只是以占位符的形式存在</strong>，如<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi>j</mi><mi>d</mi><mi>b</mi><mi>c</mi><mi mathvariant=\"normal\">.</mi><mi>u</mi><mi>r</mi><mi>l</mi></mrow><mi mathvariant=\"normal\">、</mi></mrow><annotation encoding=\"application/x-tex\">{jdbc.url}、</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\">c</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span></span><span class=\"mord cjk_fallback\">、</span></span></span></span>{jdbc.driver}。<strong>当PropertyPlaceholderConfigurer作为BeanFactoryPostProcessor被应用时，它会使用properties配置文件中的配置信息来替换相应BeanDefinition中占位符所表示的属性值</strong>。这样，当<strong>进入容器实现的第二阶段实例化bean时，bean定义中的属性值就是最终替换完成的了</strong></li>\n<li>PropertyPlaceholderConfigurer不单会从其配置的properties文件中加载配置项，同时还<strong>会检查Java的System类中的Properties</strong>，可以通过setSystemPropertiesMode()或者setSystemProper\u0002tiesModeName()来控制是否加载或者覆盖System相应Properties的行为</li>\n</ul>\n<h5 id=\"propertyoverrideconfigurer\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#propertyoverrideconfigurer\"></a> PropertyOverrideConfigurer<a href=\"spring&mybatis/Spring IoC#propertyoverrideconfigurer\"></a></h5>\n<ul>\n<li>可以<strong>通过PropertyOverrideConfigurer对容器中配置</strong>的任何你想处理的<strong>bean定义的property信息进行覆盖替换</strong></li>\n<li>PropertyOverrideConfigurer的<strong>properties文件中的配置项，覆盖掉了原来XML中的bean定义的property信息</strong></li>\n<li>PropertyOverrideConfigurer使用的配置文件示例：<br>\n<code>beanName.propertyName=Value</code><br>\n也就是说，properties文件中的键是<strong>以XML中配置的bean定义的beanName为标志开始</strong>的（通常就是id指定的值），后面<strong>跟着相应被覆盖的property的名称</strong></li>\n<li>当容器中配置的多个PropertyOverrideConfigurer对同一个bean定义的同一个property值进<br>\n行处理的时候，<strong>最后一个将会生效</strong></li>\n</ul>\n<h5 id=\"customeditorconfigure\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#customeditorconfigure\"></a> CustomEditorConfigure<a href=\"spring&mybatis/Spring IoC#customeditorconfigure\"></a></h5>\n<ul>\n<li>CustomEditorConfigure只是<strong>辅助性地将后期会用到的信息注册到容器，对BeanDefinition没有做任何变动</strong></li>\n<li>不管对象是什么类型，也不管这些对象所声明的依赖对象是什么类型，<strong>通常都是通过XML（或者properties）文件格式来配置这些对象类型</strong>。但XML所记载的，都是String类型，即<strong>容器从XML格式的文件中读取的都是字符串形式，最终应用程序却是由各种类型的对象所构成</strong>。要想<strong>完成这种由字符串到具体对象的转换</strong>，<strong>都需要这种转换规则相关的信息</strong>，而CustomEditorConfigurer就是帮助我们传达类似信息的</li>\n<li>Spring内部<strong>通过JavaBean的PropertyEditor来帮助进行String类型到其他类型的转换工作</strong>。只要<strong>为每种对象类型提供一个 PropertyEditor ，就可以根据该对象类型取得与其相对应的PropertyEditor来做具体的类型转换</strong>。Spring容器内部在做具体的类型转换的时候，会<strong>采用JavaBean框架内默认的PropertyEditor搜寻逻辑</strong>，从而<strong>继承了对原生类型以及java.lang.String.java.awt.Color和java.awt.Font等类型的转换支持</strong>。同时，Spring框架还提供了自身实现的一些Property\u0002Editor，这些PropertyEditor大部分都位于org.springframework. beans.propertyeditors包下\n<ul>\n<li><strong>StringArrayPropertyEditor</strong>。该PropertyEditor会<strong>将符合CSV格式的字符串转换成String[]数组的形式，默认是以逗号（,）分隔的字符串</strong>，但可以指定自定义的字符串分隔符</li>\n<li>ClassEditor。<strong>根据String类型的class名称，直接将其转换成相应的Class对象，相当于通</strong><br>\n<strong>过Class.forName(String)完成的功效</strong>。可以通过String[]数组的形式传入需转换的值，以<br>\n达到与提供的ClassArrayEditor同样的目的\n<ul>\n<li>ClassEditor，FileEditor，LocaleEditor，PatternEditor等均<strong>默认加载使用</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"给出针对特定对象类型的propertyeditor实现\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#给出针对特定对象类型的propertyeditor实现\"></a> 给出针对特定对象类型的PropertyEditor实现<a href=\"spring&mybatis/Spring IoC#给出针对特定对象类型的propertyeditor实现\"></a></h5>\n<ul>\n<li>假设需要<strong>对yyyy/MM/dd形式的日期格式转换提供支持</strong>。虽然可以直接让PropertyEditor实现类去实现java.beans.PropertyEditor接口，不过，我们可以<strong>直接继承java.beans.Property\u0002EditorSupport类以避免实现java.beans.PropertyEditor接口的所有方法</strong>。就好像这次，我们仅仅让DatePropertyEditor完成从 String 到 java.util.Date 的转换，<strong>只需要实现setAsText(String)方法</strong>，而其他方法一概不管</li>\n</ul>\n<p>![image-20201026162419885](/Users/ng/Library/Application Support/typora-user-images/image-20201026162419885.png)</p>\n<ul>\n<li><strong>通过CustomEditorConfigurer将刚实现的DatePro\u0002pertyEditor注册到容器，以告知容器按照DatePropertyEditor的形式进行String到java.util.Date类型的转换工作</strong></li>\n<li>如果容器是<strong>BeanFactory的实现</strong>，比如XmlBeanFactory，则<strong>需要通过编码手动应用</strong></li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XmlBeanFactory beanFactory = <span class=\"keyword\">new</span> XmlBeanFactory(<span class=\"keyword\">new</span> ClassPathResource</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">CustomEditorConfigurer ceConfigurer = <span class=\"keyword\">new</span> CustomEditorConfigurer(); </span><br><span class=\"line\">Map customerEditors = <span class=\"keyword\">new</span> HashMap(); </span><br><span class=\"line\">customerEditors.put(java.util.Date.class, <span class=\"keyword\">new</span> DatePropertyEditor())；</span><br><span class=\"line\">ceConfigurer.setCustomEditors(customerEditors); </span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">ceConfigurer.postProcessBeanFactory(beanFactory);</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><strong>ApplicationContext相应实现</strong>，因为ApplicationContext会<strong>自动识别BeanFactoryPostProcessor并应用</strong>，所以<strong>只需要在相应配置文件中配置一下</strong></li>\n</ul>\n<h3 id=\"bean的生命周期\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#bean的生命周期\"></a> Bean的生命周期<a href=\"spring&mybatis/Spring IoC#bean的生命周期\"></a></h3>\n<ul>\n<li>ApplicationContext启动之后会实例化所有的bean定义，但<strong>ApplicationContext在实现的过程中依然遵循Spring容器实现流程的两个阶段</strong>，只不过它会<strong>在启动阶段的活动完成之后，紧接着调用注册到该容器的所有bean定义的实例化方法getBean()</strong>。这就是为什么当你得到ApplicationContext类型的容器引用时，容器内所有对象已经被全部实例化完成</li>\n<li>说getBean()方法是有可能触发Bean实例化阶段的活动，是因为<strong>只有当对应某个bean定义的getBean()方法第一次被调用时</strong>，不管是显式的还是隐式的，<strong>Bean实例化阶段的活动才会被触发</strong>，<strong>第二次被调用则会直接返回容器缓存的第一次实例化完的对象实例</strong>（prototype类型bean除外）。当<strong>getBean()方法内部发现该bean定义之前还没有被实例化之后，会通过createBean()方法来进行具体的对象实例化</strong></li>\n</ul>\n<p><img src=\"/Users/ng/Documents/spring&amp;mybatis/pictures/Bean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>Spring容器将对其所管理的对象<strong>全部给予统一的生命周期管理</strong></li>\n</ul>\n<h4 id=\"bean的实例化与beanwrapper\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#bean的实例化与beanwrapper\"></a> Bean的实例化与BeanWrapper<a href=\"spring&mybatis/Spring IoC#bean的实例化与beanwrapper\"></a></h4>\n<ul>\n<li>容器在内部实现的时候，<strong>采用“策略模式（Strategy Pattern）”来决定采用何种方式初始化bean实例</strong>。通常，可以通过反射或者CGLIB动态字节码生成来初始化相应的bean实例或者动态生成其子类。InstantiationStrategy是实例化策略的抽象接口，其直接子类<strong>SimpleInstantiationStrategy实现了简单的对象实例化功能</strong>，可以通过反射来实例化对象实例，但不支持方法注入方式的对象实例化</li>\n<li><strong>CglibSubclassingInstantiation\u0002Strategy</strong>继承了SimpleInstantiationStrategy的以反射方式实例化对象的功能，并且通过CGLIB的动态字节码生成功能，该策略实现类<strong>可以动态生成某个类的子类，进而满足了方法注入所需的对象实例化需求</strong>。默认情况下，容器内部采用的是CglibSubclassingInstantiationStrategy</li>\n</ul>\n<h5 id=\"第一步实例化bean对象\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#第一步实例化bean对象\"></a> 第一步：实例化Bean对象<a href=\"spring&mybatis/Spring IoC#第一步实例化bean对象\"></a></h5>\n<ul>\n<li>容器只要根据相应bean定义的BeanDefintion取得实例化信息，结合CglibSubclassingIns\u0002tantiationStrategy以及不同的bean定义类型，就可以返回实例化完成的对象实例。但是，<strong>不是直接返回构造完成的对象实例，而是以BeanWrapper对构造完成的对象实例进行包裹，返回相应的BeanWrapper实例</strong></li>\n</ul>\n<h5 id=\"第二步设置对象属性\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#第二步设置对象属性\"></a> 第二步：设置对象属性<a href=\"spring&mybatis/Spring IoC#第二步设置对象属性\"></a></h5>\n<ul>\n<li>在第一步结束后返回BeanWrapper实例而不是原先的对象实例，就是为了第二步“设置对象属性”</li>\n<li><strong>BeanWrapper定义继承了PropertyAccessor接口，可以以统一的方式对对象属性进行访问</strong>；BeanWrapper定义同时又直接或者间接<strong>继承了PropertyEditorRegistry和TypeConverter接口</strong>。<strong>在第一步构造完成对象之后，Spring会根据对象实例构造一个BeanWrapperImpl实例</strong>，然后<strong>将之前CustomEditor\u0002Configurer注册的PropertyEditor复制一份给BeanWrapperImpl实例</strong>（这就是BeanWrapper同时又是PropertyEditorRegistry的原因）。这样，当BeanWrapper转换类型、设置对象属性值时，就不会无从下手了</li>\n<li>使用BeanWrapper对bean实例操作很方便，可以<strong>免去直接使用Java反射API操作对象实例的烦琐</strong></li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object provider = Class.forName(<span class=\"string\">\"package.name.FXNewsProvider\"</span>).newInstance(); </span><br><span class=\"line\">Object listener = Class.forName(<span class=\"string\">\"package.name.DowJonesNewsListener\"</span>).newInstance(); </span><br><span class=\"line\">Object persister = Class.forName(<span class=\"string\">\"package.name.DowJonesNewsPersister\"</span>).newInstance(); </span><br><span class=\"line\">BeanWrapper newsProvider = <span class=\"keyword\">new</span> BeanWrapperImpl(provider); </span><br><span class=\"line\"></span><br><span class=\"line\">newsProvider.setPropertyValue(<span class=\"string\">\"newsListener\"</span>, listener); </span><br><span class=\"line\">newsProvider.setPropertyValue(<span class=\"string\">\"newPersistener\"</span>, persister); </span><br><span class=\"line\"></span><br><span class=\"line\">assertTrue(newsProvider.getWrappedInstance() <span class=\"keyword\">instanceof</span> FXNewsProvider); </span><br><span class=\"line\">assertSame(provider, newsProvider.getWrappedInstance()); </span><br><span class=\"line\">assertSame(listener, newsProvider.getPropertyValue(<span class=\"string\">\"newsListener\"</span>)); </span><br><span class=\"line\">assertSame(persister, newsProvider.getPropertyValue(<span class=\"string\">\"newsPersister\"</span>));</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"aware接口\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#aware接口\"></a> Aware接口<a href=\"spring&mybatis/Spring IoC#aware接口\"></a></h4>\n<ul>\n<li>当对象实例化完成并且相关属性以及依赖设置完成之后，Spring容器会检查当前对象实例是否实现了一系列的以Aware命名结尾的接口定义。如果是，则将这些Aware接口定义中规定的依赖注入给当前对象实例</li>\n<li>BeanFactory的Aware接口\n<ul>\n<li>BeanNameAware。如果Spring容器检测到当前对象实例实现了该接口，会<strong>将该对象实例的bean定义对应的beanName设置到当前对象实例</strong></li>\n<li>BeanClassLoaderAware。如果容器检测到当前对象实例实现了该接口，会<strong>将对应加载当前bean的Classloader注入当前对象实例</strong>。默认会使用加载org.springframework.util.ClassUtils类的Classloader</li>\n<li>BeanFactoryAware。在介绍方法注入的时候，我们提到过使用该接口以便每次获取prototype类型bean的不同实例。<strong>如果对象声明实现了BeanFactoryAware接口，BeanFactory容器会将自身设置到当前对象实例</strong>。这样，<strong>当前对象实例就拥有了一个BeanFactory容器的引用，并且可以对这个容器内允许访问的对象按照需要进行访问</strong></li>\n</ul>\n</li>\n<li>ApplicationContext的Aware接口\n<ul>\n<li>ResourceLoaderAware。ApplicationContext<strong>实现了Spring的ResourceLoader接口</strong>。当容器检测到当前对象实例实现了ResourceLoaderAware接口之后，会将当前ApplicationContext自身设置到对象实例，这样<strong>当前对象实例就拥有了其所在ApplicationContext容器的一个引用</strong></li>\n<li>ApplicationEventPublisherAware。ApplicationContext作为一个容器，同时还实现了ApplicationEventPublisher接口，这样，它就<strong>可以作为Appli\u0002cationEventPublisher来使用</strong>。所以，<strong>当前ApplicationContext容器如果检测到当前实例化的对象实例声明了ApplicationEventPublisherAware接口，则会将自身注入当前对象</strong></li>\n<li>MessageSourceAware。<strong>ApplicationContext通过Message\u0002Source接口提供国际化的信息支持</strong>，即I18n（Internationalization）。它自身就实现了Message\u0002Source接口，所以<strong>当检测到当前对象实例实现了MessageSourceAware接口，则会将自身注入当前对象实例</strong></li>\n<li>org.springframework.context.ApplicationContextAware。 <strong>如果ApplicationContext容器检测到当前对象实现了ApplicationContextAware接口，则会将自身注入当前对象实例</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"beanpostprocessor\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#beanpostprocessor\"></a> BeanPostProcessor<a href=\"spring&mybatis/Spring IoC#beanpostprocessor\"></a></h4>\n<ul>\n<li><strong>Bean\u0002PostProcessor</strong>存在于<strong>对象实例化阶段</strong>，而<strong>BeanFactoryPostProcessor</strong>则存在于<strong>容器启动阶段</strong></li>\n<li>与BeanFactoryPostProcessor通常会处理容器内所有符合条件的BeanDefinition类似，Bean\u0002PostProcessor<strong>会处理容器内所有符合条件的实例化后的对象实例</strong></li>\n<li><strong>postProcessBeforeInitialization()方法</strong>是图4-10中BeanPostProcessor<strong>前置处理</strong>这一步将会执行的方法，<strong>postProcessAfterInitialization()<strong>则是对应图4-10中BeanPostProcessor</strong>后置处理</strong>那一步将会执行的方法。BeanPostProcessor的两个方法中<strong>都传入了原来的对象实例的引用</strong>，这为我们扩展容器的对象实例化过程中的行为提供了极大的便利，我们几乎可以对传入的对象实例执行任何的操作</li>\n<li>通常比较常见的使用BeanPostProcessor的场景，是<strong>处理标记接口实现类，或者为当前对象提供代理实现</strong>。在图4-10的第三步中，ApplicationContext对应的那些<strong>Aware接口实际上就是通过Bean\u0002PostProcessor的方式进行处理的</strong></li>\n</ul>\n<h4 id=\"initializingbean和init-method\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#initializingbean和init-method\"></a> InitializingBean和init-method<a href=\"spring&mybatis/Spring IoC#initializingbean和init-method\"></a></h4>\n<ul>\n<li>InitializingBean是容器内部广泛使用的一个<strong>对象生命周期标识接口</strong>\n<ul>\n<li>其作用在于，在对象实例化过程调用过“BeanPostProcessor的前置处理”之后，会接着检测当前对象是否实现了InitializingBean接口，如果<strong>是，则会调用其afterProper\u0002tiesSet()方法进一步调整对象实例的状态</strong>。比如，在有些情况下，某个业务对象实例化完成后，还不能处于可以使用状态。这个时候就可以让该业务对象实现该接口，并在方法afterPropertiesSet()中完成对该业务对象的后续处理</li>\n<li>让业务对象实现这个接口，则显得Spring容器比较具有侵入性</li>\n</ul>\n</li>\n<li>Spring还提供了另一种方式来指定自定义的对象初始化操作，那就是在XML配置的时候，使用<code>&lt;bean&gt;</code>的init-method属性\n<ul>\n<li>通过init-method，系统中业务对象的自定义初始化操作可以以任何方式命名，而不再受制于InitializingBean的afterPropertiesSet()。如果系统开发过程中规定：所有业务对象的自定义初始化操作都必须以init()命名，为了省去挨个<code>&lt;bean&gt;</code>的设置init-method这样的烦琐，我们还<strong>可以通过最顶层的<code>&lt;beans&gt;</code>的default-init-method统一指定这一init()方法名</strong></li>\n<li>一般，我们是在集成第三方库，或者其他特殊的情况下，才会需要使用该特性</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"disposablebean与destroy-method\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#disposablebean与destroy-method\"></a> DisposableBean与destroy-method<a href=\"spring&mybatis/Spring IoC#disposablebean与destroy-method\"></a></h4>\n<ul>\n<li>当所有的一切，该设置的设置，该注入的注入，该调用的调用完成之后，容器<strong>将检查singleton类型的bean实例，看其是否实现了DisposableBean接口</strong>。<strong>或者其对应的bean定义是否通过<code>&lt;bean&gt;</code>的destroy-method属性指定了自定义的对象销毁方法</strong>。如果<strong>是，就会为该实例注册一个用于对象销毁的回调</strong>（Callback），<strong>以便在这些singleton类型的对象实例销毁之前，执行销毁逻辑</strong></li>\n<li>与InitializingBean和init-method用于对象的自定义初始化相对应，<strong>DisposableBean和destroy-method为对象提供了执行自定义销毁逻辑的机会</strong></li>\n<li>最常见到的该功能的使用场景就是<strong>在Spring容器中注册数据库连接池</strong></li>\n<li>不过，这些<strong>自定义的对象销毁逻辑，在对象实例初始化完成并注册了相关的回调方法之后，并不会马上执行</strong>。<strong>回调方法注册后，返回的对象实例即处于使用状态，只有该对象实例不再被使用的时候，才会执行相关的自定义销毁逻辑</strong>，此时<strong>通常也就是Spring容器关闭的时候</strong>。但<strong>Spring容器在关闭之前，不会自动调用这些回调方法。所以，需要我们告知容器，在哪个时间点来执行对象的自定义销毁方法</strong></li>\n<li>对于BeanFactory容器来说。我们<strong>需要在独立应用程序的主程序退出之前</strong>，或者其他被认为是合适的情况下（依照应用场景而定），<strong>调用ConfigurableBeanFactory提供的destroySingletons()方法销毁容器中管理的所有singleton类型的对象实例</strong></li>\n<li>对于ApplicationContext容器来说，它为我们提供了<strong>registerShutdownHook()方法</strong>，该方法<strong>底层使用标准的Runtime类的addShutdownHook()方式来调用相应bean对象的销毁逻辑</strong>，从而<strong>保证在Java虚拟机退出之前，这些singtleton类型的bean对象实例的自定义销毁逻辑会被执行</strong></li>\n</ul>\n<h2 id=\"applicationcontext\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#applicationcontext\"></a> ApplicationContext<a href=\"spring&mybatis/Spring IoC#applicationcontext\"></a></h2>\n<ul>\n<li>作为Spring提供的较之BeanFactory更为先进的IoC容器实现，ApplicationContext除了拥有BeanFactory支持的所有功能之外，还进一步扩展了基本容器的功能，包括BeanFactoryPostProces\u0002sor、BeanPostProcessor以及其他特殊类型bean的自动识别、容器启动后bean实例的自动初始化、国际化的信息支持、容器内事件发布等</li>\n</ul>\n<h3 id=\"统一资源加载策略\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#统一资源加载策略\"></a> 统一资源加载策略<a href=\"spring&mybatis/Spring IoC#统一资源加载策略\"></a></h3>\n<h5 id=\"使用原因\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#使用原因\"></a> 使用原因<a href=\"spring&mybatis/Spring IoC#使用原因\"></a></h5>\n<ul>\n<li>java SE提供的URL全名是Uniform Resource Locator（统一资源定位器）。首先，说是统一资源定位，但基本实现却<strong>只限于网络形式发布的资源的查找和定位工作</strong>，基本上只提供了基于HTTP、FTP、File等协议的资源定位功能</li>\n<li>资源这个词的范围比较广义，资源<strong>可以任何形式存在</strong>，如以<strong>二进制对象</strong>形式存在、以<strong>字节流</strong>形式存在、以<strong>文件</strong>形式存在等；而且，资源也<strong>可以存在于任何场所</strong>，如存在于<strong>文件系统</strong>、存在于<strong>Java应用的Classpath</strong>中，甚至存在于<strong>URL可以定位的地方</strong></li>\n</ul>\n<h4 id=\"spring中的resource\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#spring中的resource\"></a> Spring中的Resource<a href=\"spring&mybatis/Spring IoC#spring中的resource\"></a></h4>\n<ul>\n<li>Spring框架内部使用<strong>Resource接口作为所有资源的抽象和访问接口</strong>，我们之前在构造BeanFactory的时候已经接触过它，如下代码：\n<ul>\n<li>``BeanFactory beanFactory = new XmlBeanFactory(new ClassPathResource(&quot;…&quot;));`</li>\n<li>其中<strong>ClassPathResource</strong>就是Resource的一个特定类型的实现，<strong>代表的是位于Classpath中的资源</strong></li>\n</ul>\n</li>\n<li>Resource接口可以根据资源的不同类型，或者资源所处的不同场合，给出相应的具体实现。Spring框架在这个理念的基础上，提供了一些实现类（可以在org.springframework.core.io包下找到这些实现类）\n<ul>\n<li><strong>ByteArrayResource</strong>。将字节（byte）数组提供的数据作为一种资源进行封装，如果通过InputStream形式访问该类型的资源，该实现<strong>会根据字节数组的数据，构造相应的ByteArray\u0002InputStream并返回</strong></li>\n<li>ClassPathResource。该实现<strong>从Java应用程序的ClassPath中加载具体资源并进行封装</strong>，可以使用指定的类加载器（ClassLoader）或者给定的类进行资源加载</li>\n<li>FileSystemResource。对java.io.File类型的封装，所以，我们<strong>可以以文件或者URL的形式对该类型资源进行访问</strong>，只要能跟File打的交道，基本上跟FileSystemResource也可以</li>\n<li>UrlResource。<strong>通过java.net.URL进行的具体资源查找定位的实现类</strong>，内部委派URL进行具体的资源操作</li>\n<li>InputStreamResource。将给定的InputStream视为一种资源的Resource实现类，较为少用。可能的情况下，以ByteArrayResource以及其他形式资源实现代之</li>\n</ul>\n</li>\n<li>想实现自定义的Resource，我们可以继承AbstractResource抽象类，然后根据当前具体资源特征，覆盖相应的方法就可以了</li>\n</ul>\n<h4 id=\"更广义的urlresourceloader\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#更广义的urlresourceloader\"></a> “更广义的URL”——ResourceLoader<a href=\"spring&mybatis/Spring IoC#更广义的urlresourceloader\"></a></h4>\n<ul>\n<li>\n<p>资源是有了，但如何去查找和定位这些资源，则应该是ResourceLoader的职责所在了</p>\n</li>\n<li>\n<p><strong>ResourceLoader接口是资源查找定位策略的统一抽象</strong>，具体的资源查找定位策略则由相应的ResourceLoader实现类给出</p>\n<ul>\n<li>把ResourceLoader称作<strong>统一资源定位器</strong>或许才更恰当一些</li>\n</ul>\n</li>\n<li>\n<p>ResourceLoader定义如下</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ResourceLoader</span> </span>&#123; </span><br><span class=\"line\">    String CLASSPATH_URL_PREFIX = ResourceUtils.CLASSPATH_URL_PREFIX; </span><br><span class=\"line\">    <span class=\"function\">Resource <span class=\"title\">getResource</span><span class=\"params\">(String location)</span></span>; </span><br><span class=\"line\">    <span class=\"function\">ClassLoader <span class=\"title\">getClassLoader</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>其中<strong>最主要的就是Resource getResource(String location)方法</strong>，通过它，我们就<strong>可以根据指定的资源位置，定位到具体的资源实例</strong></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"defaultresourceloader\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#defaultresourceloader\"></a> DefaultResourceLoader<a href=\"spring&mybatis/Spring IoC#defaultresourceloader\"></a></h5>\n<ul>\n<li>ResourceLoader有一个默认的实现类，即DefaultResource\u0002Loader，该类默认的资源查找处理逻辑如下\n<ol>\n<li>首先<strong>检查资源路径是否以classpath:前缀打头</strong>，如果是，则<strong>尝试构造ClassPathResource类型资源并返回</strong></li>\n<li><strong>否则尝试通过URL，根据资源路径来定位资源</strong>，如果没有抛出MalformedURLException，<strong>有则会构造UrlResource类型的资源并返回</strong>\n<ol>\n<li>如果还是无法根据资源路径定位指定的资源，则<strong>委派getResourceByPath(String) 方法来定位</strong>， DefaultResourceLoader 的getResourceByPath(String)方法默认实现逻辑是，构造ClassPathResource类型的资源并返回</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Resource fakeFileResource = resourceLoader.getResource(<span class=\"string\">\"D:/spring21site/README\"</span>); </span><br><span class=\"line\">assertTrue(fakeFileResource <span class=\"keyword\">instanceof</span> ClassPathResource); </span><br><span class=\"line\">assertFalse(fakeFileResource.exists()); </span><br><span class=\"line\">Resource urlResource1 = resourceLoader.getResource(<span class=\"string\">\"file:D:/spring21site/README\"</span>); </span><br><span class=\"line\">assertTrue(urlResource1 <span class=\"keyword\">instanceof</span> UrlResource); </span><br><span class=\"line\">Resource urlResource2 = resourceLoader.getResource(<span class=\"string\">\"http://www.spring21.cn\"</span>); </span><br><span class=\"line\">assertTrue(urlResource2 <span class=\"keyword\">instanceof</span> UrlResource); </span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123; </span><br><span class=\"line\">fakeFileResource.getFile();</span><br><span class=\"line\">fail(<span class=\"string\">\"no such file with path[\"</span>+fakeFileResource.getFilename()+<span class=\"string\">\"] exists in classpath\"</span>); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">catch</span>(FileNotFoundException e)&#123; </span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123; </span><br><span class=\"line\">  urlResource1.getFile();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">catch</span>(FileNotFoundException e)&#123; </span><br><span class=\"line\">  fail();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li><strong>fakeFileResource资源的类型</strong>，并不是我们所预期的FileSystemResource类型，而<strong>是ClassPathResource类型</strong>，这是由DefaultResourceLoader的资源查找逻辑所决定的。<strong>如果最终没有找到符合条件的相应资源，getResourceByPath(String)方法就会构造一个实际上并不存在的资源并返回</strong>。而指定有协议前缀的资源路径，则通过URL能够定位，所以，<strong>返回的都是UrlResource类型</strong></li>\n</ul>\n<h5 id=\"filesystemresourceloader\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#filesystemresourceloader\"></a> FileSystemResourceLoader<a href=\"spring&mybatis/Spring IoC#filesystemresourceloader\"></a></h5>\n<ul>\n<li>为了<strong>避免DefaultResourceLoader在最后getResourceByPath(String)方法上的不恰当处理</strong>，我们可以使用<strong>FileSystemResourceLoader，它继承自Default\u0002ResourceLoader，但覆写getResourceByPath(String)方法</strong>，<strong>使之从文件系统加载资源并以FileSystemResource类型返回</strong>。这样，我们就可以取得预想的资源类型</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testResourceTypesWithFileSystemResourceLoader</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">ResourceLoader resourceLoader = <span class=\"keyword\">new</span> FileSystemResourceLoader(); </span><br><span class=\"line\">Resource fileResource = resourceLoader.getResource(<span class=\"string\">\"D:/spring21site/README\"</span>); </span><br><span class=\"line\">assertTrue(fileResource <span class=\"keyword\">instanceof</span> FileSystemResource); </span><br><span class=\"line\">assertTrue(fileResource.exists()); </span><br><span class=\"line\">Resource urlResource = resourceLoader.getResource(<span class=\"string\">\"file:D:/spring21site/README\"</span>); </span><br><span class=\"line\">assertTrue(urlResource <span class=\"keyword\">instanceof</span> UrlResource); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>FileSystemResourceLoader在ResourceLoader家族中的兄弟<strong>FileSystemXmlApplication\u0002Context</strong>，也是<strong>覆写了getResourceByPath(String)方法的逻辑</strong>，以改变DefaultResourceLoader的默认资源加载行为，<strong>最终从文件系统中加载并返回FileSystemResource类型的资源</strong></li>\n</ul>\n<h5 id=\"resourcepatternresolver-批量查找的resourceloader\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#resourcepatternresolver-批量查找的resourceloader\"></a> ResourcePatternResolver ——批量查找的ResourceLoader<a href=\"spring&mybatis/Spring IoC#resourcepatternresolver-批量查找的resourceloader\"></a></h5>\n<ul>\n<li>ResourcePatternResolver是ResourceLoader的扩展，<strong>ResourceLoader每次只能根据资源路径返回确定的单个Resource实例</strong>，而<strong>ResourcePatternResolver则可以根据指定的资源路径匹配模式，每次返回多个Resource实例</strong>。接口ResourcePattern\u0002Resolver定义如下：</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ResourcePatternResolver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceLoader</span> </span>&#123; </span><br><span class=\"line\">    String CLASSPATH_ALL_URL_PREFIX = <span class=\"string\">\"classpath*:\"</span>; </span><br><span class=\"line\">    Resource[] getResources(String locationPattern) <span class=\"keyword\">throws</span> IOException; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>ResourcePatternResolver在继承ResourceLoader原有定义的基础上，又引入了Resource[] getResources(String)方法定义，以支持根据路径匹配模式返回多个Resources的功能。它同时还引入了一种新的协议前缀classpath*:，针对这一点的支持，将由相应的子类实现给出</li>\n<li>ResourcePatternResolver最常用的一个实现是<strong>PathMatchingResourcePatternResolver</strong>，该实现类<strong>支持ResourceLoader级别的资源加载，支持基于Ant风格的路径匹配模式（类似于**/*.suffix之类的路径形式），支持ResourcePatternResolver新增加的classpath*:前缀等</strong>，基本上集所有技能于一身</li>\n<li>在构造PathMatchingResourcePatternResolver实例的时候，可以指定一个ResourceLoader，如果不指定的话，则PathMatchingResourcePatternResolver内部会默认构造一个Default\u0002ResourceLoader实例。PathMatchingResourcePatternResolver内部会将匹配后确定的资源路径，委派给它的ResourceLoader来查找和定位资源。这样，<strong>如果不指定任何ResourceLoader的话，Path\u0002MatchingResourcePatternResolver在加载资源的行为上会与DefaultResourceLoader基本相同，只存在返回的Resource数量上的差异</strong>。如下代码表明了二者在资源加载行为上的一致性：</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResourcePatternResolver resourceResolver = <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver(); </span><br><span class=\"line\">Resource fileResource = resourceResolver.getResource(<span class=\"string\">\"D:/spring21site/README\"</span>); </span><br><span class=\"line\">assertTrue(fileResource <span class=\"keyword\">instanceof</span> ClassPathResource); </span><br><span class=\"line\">assertFalse(fileResource.exists()); </span><br><span class=\"line\">...</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>不过，<strong>可以通过传入其他类型的ResourceLoader来替换PathMatchingResourcePatternResolver内部默认使用的DefaultResourceLoader，从而改变其默认行为</strong>\n<ul>\n<li>使用FileSystemResourceLoader替换默认的DefaultResourceLoader，从而使得PathMatching\u0002ResourcePatternResolver的行为跟使用FileSystemResourceLoader一样</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testResourceTypesWithPathMatchingResourcePatternResolver</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">ResourcePatternResolver resourceResolver = <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver(); </span><br><span class=\"line\">Resource fileResource = resourceResolver.getResource(<span class=\"string\">\"D:/spring21site/README\"</span>); </span><br><span class=\"line\">assertTrue(fileResource <span class=\"keyword\">instanceof</span> ClassPathResource); </span><br><span class=\"line\">assertFalse(fileResource.exists()); </span><br><span class=\"line\">resourceResolver = <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver(<span class=\"keyword\">new</span> ➥</span><br><span class=\"line\">FileSystemResourceLoader()); </span><br><span class=\"line\">fileResource = resourceResolver.getResource(<span class=\"string\">\"D:/spring21site/README\"</span>); </span><br><span class=\"line\">assertTrue(fileResource <span class=\"keyword\">instanceof</span> FileSystemResource); </span><br><span class=\"line\">assertTrue(fileResource.exists()); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"applicationcontext与resourceloader\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#applicationcontext与resourceloader\"></a> ApplicationContext与ResourceLoader<a href=\"spring&mybatis/Spring IoC#applicationcontext与resourceloader\"></a></h4>\n<ul>\n<li><strong>ApplicationContext</strong>继承了ResourcePatternResolver，当然就<strong>间接实现了ResourceLoader接口</strong>。所以，<strong>任何的ApplicationContext实现都可以看作是一个ResourceLoader甚至ResourcePatternResolver</strong>。而<strong>这就是ApplicationContext支持Spring内统一资源加载策略的真相</strong></li>\n</ul>\n<p>![image-20201104112529095](/Users/ng/Library/Application Support/typora-user-images/image-20201104112529095.png)</p>\n<h5 id=\"扮演resourceloader的角色\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#扮演resourceloader的角色\"></a> 扮演ResourceLoader的角色<a href=\"spring&mybatis/Spring IoC#扮演resourceloader的角色\"></a></h5>\n<ul>\n<li>既然ApplicationContext可以作为ResourceLoader或者ResourcePatternResolver来使用，那么，很显然，我们可以通过ApplicationContext来加载任何Spring支持的Resource类型</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResourceLoader resourceLoader = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"配置文件路径\"</span>); </span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"comment\">// ResourceLoader resourceLoader = new FileSystemXmlApplicationContext(\"配置文件路径\"); </span></span><br><span class=\"line\">Resource fileResource = resourceLoader.getResource(<span class=\"string\">\"D:/spring21site/README\"</span>); </span><br><span class=\"line\">assertTrue(fileResource <span class=\"keyword\">instanceof</span> ClassPathResource); </span><br><span class=\"line\">assertFalse(fileResource.exists()); </span><br><span class=\"line\">Resource urlResource2 = resourceLoader.getResource(<span class=\"string\">\"http://www.spring21.cn\"</span>); </span><br><span class=\"line\">assertTrue(urlResource2 <span class=\"keyword\">instanceof</span> UrlResource);</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"resourceloader类型的注入\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#resourceloader类型的注入\"></a> ResourceLoader类型的注入<a href=\"spring&mybatis/Spring IoC#resourceloader类型的注入\"></a></h5>\n<ul>\n<li>在大部分情况下，如果<strong>某个bean需要依赖于ResourceLoader来查找定位资源</strong>，我们可以为其<strong>注入容器中声明的某个具体的ResourceLoader实现</strong>，该bean也无需实现任何接口，<strong>直接通过构造方法注入或者setter方法注入规则声明依赖即可</strong>，这样处理是比较合理的。不过，如果你不介意你的bean定义依赖于Spring的API，那不妨考虑用一下Spring提供的便利</li>\n<li>ApplicationContext容器本身就是一个ResourceLoader，我们为了该类还需要单独提供一个resourceLoader实例就有些多于了，<strong>直接将当前的ApplicationContext容器作为Resource\u0002Loader注入</strong></li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooBar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResourceLoaderAware</span></span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">private</span> ResourceLoader resourceLoader; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(String location)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">System.out.println(getResourceLoader().getResource(location).getClass()); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResourceLoader <span class=\"title\">getResourceLoader</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">return</span> resourceLoader;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setResourceLoader</span><span class=\"params\">(ResourceLoader resourceLoader)</span> </span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">this</span>.resourceLoader = resourceLoader; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooBar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span></span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">private</span> ResourceLoader resourceLoader; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(String location)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">System.out.println(getResourceLoader().getResource(location).getClass()); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResourceLoader <span class=\"title\">getResourceLoader</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">return</span> resourceLoader; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext ctx)</span> ➥</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">throws</span> BeansException </span>&#123; </span><br><span class=\"line\"><span class=\"keyword\">this</span>.resourceLoader = ctx; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>剩下的就是直接将FooBar配置到bean定义文件即可，如下所示</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fooBar\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"...FooBar\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>现在，<strong>容器启动的时候，就会自动将当前ApplicationContext容器本身注入到FooBar中</strong>，因为ApplicationContext类型容器可以自动识别Aware接口</li>\n</ul>\n<h5 id=\"resource类型的注入\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#resource类型的注入\"></a> Resource类型的注入<a href=\"spring&mybatis/Spring IoC#resource类型的注入\"></a></h5>\n<ul>\n<li>我们之前讲过，容器可以将bean定义文件中的字符串形式表达的信息，正确地转换成具体对象定义的依赖类型。对于那些Spring容器提供的默认的PropertyEditors无法识别的对象类型，我们可以提供自定义的PropertyEditor实现并注册到容器中，以供容器做类型转换的时候使用。默认情况下，BeanFactory容器不会为Resource类型提供相应的Property\u0002Editor，所以，如果我们想注入Resource类型的bean定义，就需要注册自定义的PropertyEditor到BeanFactory容器。不过，对于ApplicationContext来说，我们无需这么做，因为<strong>Application\u0002Context容器可以正确识别Resource类型并转换后注入相关对象</strong></li>\n<li><strong>直接在配置文件中以String形式指定template所在位置，ApplicatonContext就可以正确地转换类型并注入依赖</strong></li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mailer\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"...XMailer\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"template\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"..resources.default_template.vm\"</span>/&gt;</span> </span><br><span class=\"line\">... </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>\n<p>ApplicationContext启动伊始，<strong>会通过一个Resource\u0002EditorRegistrar来注册Spring提供的针对Resource类型的PropertyEditor实现到容器中</strong>，这个PropertyEditor叫做 ResourceEditor。这样，Application\u0002Context就可以正确地识别Resource类型的依赖了。ResourceEditor怎么实现：<strong>把配置文件中的路径让ApplicationContext作为ResourceLoader定位一下</strong></p>\n</li>\n<li>\n<p>如果应用对象需要<strong>依赖一组Resource</strong>，与ApplicationContext注册了ResourceEditor类似，<strong>Spring提供了ResourceArrayProperty\u0002Editor实现，我们只需要通过CustomEditorConfigurar告知容器即可</strong></p>\n</li>\n</ul>\n<h5 id=\"在特定情况下applicationcontext的resource加载行为\"><a class=\"markdownIt-Anchor\" href=\"spring&mybatis/Spring IoC#在特定情况下applicationcontext的resource加载行为\"></a> 在特定情况下，ApplicationContext的Resource加载行为<a href=\"spring&mybatis/Spring IoC#在特定情况下applicationcontext的resource加载行为\"></a></h5>\n<ul>\n<li>\n<p>我们下面主要讨论两种类型的ApplicationContext容器，即ClassPathXmlApplicationContext和FileSystemXmlApplicationContext</p>\n</li>\n<li>\n<p>我们知道，对于URL所接受的资源路径来说，通常开始都会有一个协议前缀，比如file:、http:、ftp:等。既然Spring使用UrlResource对URL定位查找的资源进行了抽象，那么，同样也支持这样类型的资源路径，而且，在这个基础上，Spring还扩展了协议前缀的集合。ResourceLoader中增加了一种新的资源路径协议——classpath:，ResourcePatternResolver又增加了一种——classpath*:。这样，我们就可以<strong>通过这些资源路径协议前缀，明确地告知Spring容器要classpath中加载资源</strong></p>\n<p><code>// 代码中使用协议前缀 ResourceLoader resourceLoader = new ➥ FileSystemXmlApplicationContext(&quot;classpath:conf/container-conf.xml&quot;); // 配置中使用协议前缀 &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt; ean id=&quot;...&quot; class=&quot;.. &lt;value&gt;classpath:resource/template.vm&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt;</code></p>\n</li>\n<li>\n<p><em><em>classpath</em>:与classpath:的唯一区别就在于，如果能够在classpath中找到多个指定的资源，则返回多个</em>*。我们可以通过这两个前缀改变某些ApplicationContext实现类的默认资源加载行为</p>\n</li>\n<li>\n<p>ClassPathXmlApplicationContext和FileSystemXmlApplicationContext在处理资源加载的默认行为上有所不同</p>\n<ul>\n<li>\n<p><em><em>当ClassPathXmlApplicationContext在实例化的时候，即使没有指明classpath:或者classpath</em>:等前缀，它会默认从classpath中加载bean定义配置文件</em>*</p>\n</li>\n<li>\n<p>而<strong>FileSystemXmlApplicationContext则有些不同，它会尝试从文件系统中加载bean定义文件</strong></p>\n</li>\n<li>\n<p><strong>通过在资源路径之前增加classpath:前缀，明确指定</strong><br>\n<strong>FileSystemXmlApplicationContext从classpath中加载bean定义的配置文件</strong></p>\n<p><code>ApplicationContext ctx = new FileSystemXmlApplicationContext(&quot;classpath:conf/appContext.xml&quot;);</code></p>\n</li>\n<li>\n<p>这时，<strong>FileSystemXmlApplicationContext就是从Classpath中加载配置，而不是从文件系统中加载</strong>。也就是说，它现在对应的是ClassPathResource类型的资源，而不是默认的FileSystem\u0002Resource类型资源。FileSystemXmlApplicationContext之所以如此，是因为它与FileSystemResourceLoader一样，也<strong>覆写了DefaultResourceLoader的getRes\u0002ourceByPath(String)方法</strong>，逻辑跟 FileSystemResourceLoader一模一样</p>\n</li>\n<li>\n<p>对于ClassPathXmlApplicationContext来说，如果我们<strong>不指定路径之前的前缀</strong>，它也不会像资源路径所表现的那样，从文件系统加载资源，而是像实例化时候的行为一样，<strong>从Classpath中加载这种没有路径前缀的资源</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n","prev":{"title":"spring&mybatis/Spring Cloud","link":"spring&mybatis/Spring Cloud"},"next":{"title":"spring&mybatis/Spring MVC","link":"spring&mybatis/Spring MVC"},"plink":"ilucia.github.io/spring&mybatis/Spring IoC/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> Spring IoC","id":"spring-ioc","index":"1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> IoC","id":"ioc","index":"1.1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 依赖注入","id":"依赖注入","index":"1.1.1"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> IoC Service Provider","id":"ioc-service-provider","index":"1.2","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> IoC Service Provider 如何管理对象间的依赖关系","id":"ioc-service-provider-如何管理对象间的依赖关系","index":"1.2.1"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> BeanFactory","id":"beanfactory","index":"1.3","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> BeanFactory和ApplicationContext","id":"beanfactory和applicationcontext","index":"1.3.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> BeanFactory概念","id":"beanfactory概念","index":"1.3.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> BeanFactory的对象注册与依赖绑定方式","id":"beanfactory的对象注册与依赖绑定方式","index":"1.3.3"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> IoC容器的实现","id":"ioc容器的实现","index":"1.4","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 干预容器启动阶段","id":"干预容器启动阶段","index":"1.4.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> Bean的生命周期","id":"bean的生命周期","index":"1.4.2"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> ApplicationContext","id":"applicationcontext","index":"1.5","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 统一资源加载策略","id":"统一资源加载策略","index":"1.5.1"}]}]}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2022年4月27日","updated":"2022年4月27日"}}