{"title":"软件体系架构","date":"2019-04-23T23:03:06.000Z","link":"Review/SoftwareArchitecture","tags":["review","software architecture"],"categories":["review"],"updated":"2022-04-27T15:24:01.651Z","content":"<p>[TOC]</p>\n<h1 id=\"chapter-1-概述\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareArchitecture#chapter-1-概述\"></a> Chapter 1 概述<a href=\"Review/SoftwareArchitecture#chapter-1-概述\"></a></h1>\n<ul>\n<li>软件架构产生的背景\n<ul>\n<li>软件危机\n<ul>\n<li>根源\n<ol>\n<li>软件复杂易变，行为特性难于预见，需求向设计缺乏有效的转换导致开发过程中的困难和不可控</li>\n<li>随着软件体系规模越来越大越来越复杂，整个系统的贵和和规格说明越来越重要</li>\n<li>对于大规模复杂软件系统，总体的系统结构设计和规格说明非常重要</li>\n<li>对软件体系的结构的研究有望成为提升软件生产率和解决软件维护问题的有效途径之一</li>\n</ol>\n</li>\n<li>软件架构\n<ul>\n<li>作用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>软件架构的思想和特征</strong>\n<ul>\n<li><strong>主要思想</strong>\n<ul>\n<li><strong>软件架构是一个系统软件的设计图，不仅限于软件系统的总体结构，还包含一些质量属性以及功能与结构之间的映射关系，即设计决策</strong></li>\n<li><strong>软件架构的两个主要焦点集中于系统的总体结构以及需求和实现之间的对应</strong></li>\n<li><strong>主要思想是将注意力集中在系统总体结构的组织上</strong></li>\n<li><strong>筛选按手段是运用抽象方法屏蔽模块间的连接，是人们的认知提升并保持在整体结构的部件的交互层次，并进一步将交互从计算中分离出来，建立“组件+连接件+配置”的软件系统高层结构组织方式</strong></li>\n</ul>\n</li>\n<li><strong>特征</strong>\n<ol>\n<li><strong>注重可重用性——组件及架构及重用</strong></li>\n<li><strong>利益相关者多——平衡需求</strong></li>\n<li><strong>关注点分离——模块化、分治</strong></li>\n<li><strong>质量驱动——关注非功能属性</strong></li>\n<li><strong>提倡概念完整性——强调设计结构是一个持续的过程</strong></li>\n<li><strong>循环风格——用标准方法来处理反复出现的问题</strong></li>\n</ol>\n</li>\n</ul>\n</li>\n<li>软件架构的发展阶段，各阶段特征\n<ul>\n<li>1968-1994 基础研究阶段\n<ul>\n<li>1968 NATO 软件架构概念提出</li>\n<li>模块化实践\n<ul>\n<li>高内聚低耦合</li>\n<li>模块大小适度</li>\n<li>模块链调用深度不可过多</li>\n<li>接口干净，信息隐藏</li>\n<li>尽可能地复用已有模块（功能独立）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>1991-2000 概念体系和核心技术形成阶段\n<ul>\n<li>组件技术（component）</li>\n</ul>\n</li>\n<li>1996-1999 理论体系丰富发展阶段\n<ul>\n<li>软件架构的描述与表述</li>\n<li>软件架构分析、设计与测试</li>\n<li>软件架构发现、演化与重用</li>\n<li>基于软件架构的开发方法</li>\n<li>软件架构的风格</li>\n<li>etc…</li>\n</ul>\n</li>\n<li>1999-至今 理论完善和普及应用阶段</li>\n</ul>\n</li>\n<li>软件架构研究和应用现状</li>\n</ul>\n<h1 id=\"chapher-2-软件架构概念\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareArchitecture#chapher-2-软件架构概念\"></a> chapher 2 软件架构概念<a href=\"Review/SoftwareArchitecture#chapher-2-软件架构概念\"></a></h1>\n<ul>\n<li>软件架构定义\n<ul>\n<li>一研究人员一般认为</li>\n<li>软件架构就是一个系统的草图</li>\n</ul>\n</li>\n<li><strong>组成派定义</strong>\n<ul>\n<li><strong>组成派关注于软件本身，将软件架构看作构件和交互的集合</strong></li>\n</ul>\n</li>\n<li><strong>决策派定义</strong>\n<ul>\n<li><strong>决策派关注于软件架构中的实体（人），将软件架构视为一系列重要设计决策的集合</strong></li>\n</ul>\n</li>\n<li><strong>参考框架定义</strong>（一般性定义）：\n<ul>\n<li><strong>组件component</strong>\n<ul>\n<li><strong>角色role</strong></li>\n</ul>\n</li>\n<li><strong>连接件connector</strong>\n<ul>\n<li><strong>端口port</strong></li>\n</ul>\n</li>\n<li><strong>配置configuration</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-3-软件架构模型\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareArchitecture#chapter-3-软件架构模型\"></a> chapter 3 软件架构模型<a href=\"Review/SoftwareArchitecture#chapter-3-软件架构模型\"></a></h1>\n<ul>\n<li>\n<p>软件架构模型是什么</p>\n<ul>\n<li>软件架构建模是对架构设计决策的具象化和文档化</li>\n</ul>\n</li>\n<li>\n<p><strong>软件架构建模的五类方法</strong></p>\n<ul>\n<li>\n<p><strong>基于非规范图形表示的建模方法</strong></p>\n<blockquote>\n<p>基于图形可视化建模方法</p>\n<ul>\n<li>非正式图形表示\n<ul>\n<li>盒线图</li>\n<li>etc.</li>\n</ul>\n</li>\n<li>正式图形表示\n<ul>\n<li>树形结构</li>\n<li>树地图</li>\n<li>改进的树地图</li>\n<li>旭日图</li>\n<li>双曲树</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><strong>基于UML的建模方法</strong></p>\n<ul>\n<li>逻辑视图</li>\n<li>开发视图</li>\n<li>过程视图</li>\n<li>物理视图</li>\n<li>优点\n<ul>\n<li>统一标准</li>\n<li>支持多视图结构</li>\n<li>模型操作工具</li>\n<li>统一的交叉引用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>基于形式化的方法</strong></p>\n</li>\n<li>\n<p><strong>基于UML形式化的方法</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">A[需求分析]--&gt;B[需求文档规格说明]</span><br><span class=\"line\">B--&gt;C[UML建模]</span><br><span class=\"line\">C--&gt;D[形式化描述和验证]</span><br><span class=\"line\">D--&gt;E[程序编码]</span><br><span class=\"line\">E--&gt;F[形式规范自动生成和测试变量]</span><br><span class=\"line\">F--&gt;G[软件产品]</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>需求分析到形式化描述和验证占全部工作量的60%~70%</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>软件架构建模方法的发展趋势</strong></p>\n<p><img src=\"/Review/SoftwareArchitecture/1556180594343.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"SoftwareArchitecture/1556180594343.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>\n<p>第一层次</p>\n<ul>\n<li>文本模型</li>\n</ul>\n</li>\n<li>\n<p>第二层次</p>\n<ul>\n<li>图形可视化模型</li>\n</ul>\n</li>\n<li>\n<p>第三层次</p>\n</li>\n<li>\n<p>UML模型</p>\n</li>\n<li>\n<p>第四层次</p>\n</li>\n<li>\n<p>形式化模型</p>\n</li>\n<li>\n<p>第五层次</p>\n<ul>\n<li>未来模型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-4-软件架构风格和模式\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareArchitecture#chapter-4-软件架构风格和模式\"></a> Chapter 4 软件架构风格和模式<a href=\"Review/SoftwareArchitecture#chapter-4-软件架构风格和模式\"></a></h1>\n<ul>\n<li>\n<p><strong>什么是软件架构风格/软件架构惯用模式</strong></p>\n<ul>\n<li><strong>描述特定应用领域中系统组织方式的惯用模式</strong></li>\n</ul>\n</li>\n<li>\n<p>使用架构风格的好处</p>\n<ul>\n<li>作为“可复用的组织模式和习语”，为设计人员的交流提供了公共的术语空间，促进了设计复用和代码复用</li>\n<li>极大地促进了设计的重用性和代码的重用性，并且使得系统的组织结构易被理解</li>\n<li>使用标准的架构风格可较好地支持系统内部的互操作性以及针对特定风格的分析</li>\n</ul>\n</li>\n<li>\n<p><strong>经典体系结构风格的特点、优点、缺点、适用范围</strong></p>\n<blockquote>\n<p>数据流风格 加一个批处理序列</p>\n</blockquote>\n<ol>\n<li><strong>管道过滤器风格</strong>\n<ul>\n<li>特点\n<ul>\n<li>过滤器是独立运行的部件</li>\n<li>过滤器无法感知其处理上下连接的过滤器</li>\n<li>结果的正确性不依赖与各个过滤器运行的先后次序</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>每个组件行为不受其他组件的影响，整个系统的行为易于理解</li>\n<li>管道-过滤器风格支持功能模块的复用</li>\n<li>基于管道-过滤器风格的系统具有较强的可维护性和可扩展性</li>\n<li>支持一些特定的分析（e.g.吞吐量计算和死锁检测）</li>\n<li>管道-过滤器风格具有并发性</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>管道-过滤器风格往往导致系统处理过程的成批操纵</li>\n<li>对加密数据流需要在每个模块中进行解析或反解析，增加了过滤器实现的复杂性</li>\n<li>交互处理能力弱</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p>调用返回风格</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>主程序/子程序风格</strong>\n<ul>\n<li>特点\n<ul>\n<li>从功能观点设计系统，通过逐步分解和逐步细化得到系统架构，</li>\n<li>主程序的正确性依赖与它调用的子程序的正确性</li>\n<li>组件为主程序和子程序</li>\n<li>连接件为调用-返回机制</li>\n<li>拓补结构为层次化结构</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>具有很高的数据访问效率（计算共享一个储存区）</li>\n<li>不同的计算功能被划分在不同的模块中</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>对数据储存格式的变化将会影响几乎所有的模块</li>\n<li>对处理流程的改变与系统功能的增强适应性较差</li>\n<li>这种分解方案难以支持有效的复用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>面向对象风格</strong>\n<ul>\n<li>特点\n<ul>\n<li>对象负责维护其表示的完整性</li>\n<li>对象的表示对其他对象而言是隐蔽的</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>对象隐藏了其实现细节、可以在不影响其他对象的情况下改变对象的实现，不仅使得对象的使用变得简单、方便，而且具有很高的安全性和可靠性</li>\n<li>设计者可将一些数据存取操作的问题分解成一些交互代理程序的集合</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>当一个对象和其他对象通过过程调用等方式进行交互时，必须知道其他对象的标识。无论何时改变对象的标识，都必须修改所有显示调用它的其他对象，并消除由此带来的一些副作用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>层次化风格</strong>\n<ul>\n<li>特点\n<ul>\n<li>系统分层</li>\n<li>每个层次由一系列组件组成</li>\n<li>层次之间存在接口</li>\n<li>下层组件向上层组件提供服务，上层组件被看作是下层组件的客户端</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>支持基于可增加抽象层的设计，允许将一个复杂问题分解为一个增量步骤序列的实现</li>\n<li>支持扩展，每一层的改变最多只影响相邻层</li>\n<li>支持重用，只要给相邻层提供相同的接口，它允许系统中同一层的不同实现相互交换使用</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>不是所有系统都容易采用这种模式来构建</li>\n<li>定义一个合适的抽象层次可能会非常困难，特别是对应标准化的层次模型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p>独立组件风格</p>\n</blockquote>\n<ol start=\"5\">\n<li>\n<p><strong>事件驱动风格</strong></p>\n<ul>\n<li>特点\n<ul>\n<li>事件发布者不知道那些组件会受到时间的影响；组件不能对事件的处理排序，或者事件发生后的处理结果做任何假设</li>\n<li>从架构上来说，事件驱动系统的组件提供了一个过程集合和一组事件</li>\n<li>过程可以使用显式的方法进行调用，也可以用组件在系统事件中注册。当触发事件时，会自动引发这些过程的调用</li>\n<li>连接件既可以时显式过程调用，也可以是一种绑定事件声明和过程调用的手段</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>事件声明者不需要知道那些组件会影响事件，组件之间关联较弱</li>\n<li>提高软件复用能力。只要在系统事件中注册组件的过程，就可以将该组件继承到系统中</li>\n<li>系统便于升级。只要组件名和事件中所注册的过程名保持不变，原有组件就可以被新组件取代</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>组件放弃了对计算的控制权，完全由系统来决定</li>\n<li>存在数据交换问题</li>\n<li>该风格中，正确性验证成为一个问题（难以调试）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p>虚拟机风格</p>\n</blockquote>\n<ol start=\"6\">\n<li>\n<p><strong>解释器风格</strong></p>\n<ul>\n<li>\n<p>解释器（Interpreter）是一个用来执行其他程序的程序，它针对不同的硬件平台实现了一个虚拟机，将高层次的程序翻译为低抽象层次的所能理解的指令，，以弥合程序语义所期望的与硬件提供的计算引擎之间的差距</p>\n</li>\n<li>\n<p>优点</p>\n<ul>\n<li>它有利于实现程序的可移植性和语言的跨平台能力</li>\n</ul>\n</li>\n<li>\n<p>它可以对未来的硬件进行模拟和仿真，能够降低测试所带来的复杂性和昂贵花费</p>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>额外的间接层次导致了系统性能的下降（e.g. Java without JIT）<br>\n<img src=\"/Review/SoftwareArchitecture/1556282849350.png\" alt=\"\"><br>\n<img src=\"SoftwareArchitecture/1556282849350.png\" alt=\"\"><br>\n<img src=\"/Review/SoftwareArchitecture/1556282935258.png\" alt=\"\"><br>\n<img src=\"SoftwareArchitecture/1556282935258.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>基于规则的系统风格</strong></p>\n<ul>\n<li>\n<p>显示里的业务需求经常频繁的发生变化，不断修改代码效率低、成本高。<strong>最好把频繁变化的业务逻辑抽取出来，形成独立的规则库</strong></p>\n</li>\n<li>\n<p><strong>规则可独立于软件系统而存在，可以被随时更新</strong></p>\n</li>\n<li>\n<p>系统运行时，读取规则库，依据当前运行状态，从规则库中选择与之匹配的规则解释运行<br>\n| 基于规则的系统     | 解释器风格             |<br>\n| ------------------ | ---------------------- |<br>\n| 知识库             | 待解释程序             |<br>\n| 规则解释器         | 解释器引擎             |<br>\n| 规则与数据元素选择 | 解释器引擎内部控制状态 |<br>\n| 工作内存           | 程序当前的运行状态     |</p>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p>仓库风格</p>\n</blockquote>\n<ol start=\"8\">\n<li>\n<p><strong>仓库风格</strong></p>\n<ul>\n<li>\n<p>特点</p>\n<ul>\n<li>仓库是储存和维护数据的中心场所</li>\n<li>仓库式风格的两种组件\n<ul>\n<li>中央数据结构组件</li>\n<li>相对独立的组件集合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>优点</p>\n<ul>\n<li>便于模块间的数据共享,方便模块的添加,更新和删除,避免了知识源的不必要的重复储存等</li>\n</ul>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>对于各个模块,需要一定的同步/加锁机制保证数据结构的完整性和一致性<br>\n<img src=\"/Review/SoftwareArchitecture/1556285459619.png\" alt=\"\"><br>\n<img src=\"SoftwareArchitecture/1556285459619.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>黑板系统风格</strong></p>\n<ul>\n<li>\n<p>特点</p>\n</li>\n<li>\n<p>黑板系统是传统上被用于信号处理方面进行复杂解释的应用程序,以及松散耦合的组件访问共享数据的应用程序</p>\n</li>\n<li>\n<p>黑板架构实现的基本出发点是已经存在一个对公共数据结构进行协同操作的独立程序集合</p>\n</li>\n<li>\n<p>组成部分</p>\n<ul>\n<li>\n<p>知识源</p>\n</li>\n<li>\n<p>黑板数据结构</p>\n</li>\n<li>\n<p>控制器<br>\n<img src=\"/Review/SoftwareArchitecture/1556285650816.png\" alt=\"\"><br>\n<img src=\"SoftwareArchitecture/1556285650816.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>\n<p>优点</p>\n<ul>\n<li>\n<p>便于多客户共享大量数据,他们不关心数据何时有的,谁提供的,怎样提供的</p>\n</li>\n<li>\n<p>既便于添加新的作为知识源代理的应用程序,也便于扩展共享的黑板数据结构</p>\n</li>\n<li>\n<p>知识源可重用</p>\n</li>\n<li>\n<p>支持容错性和健壮性</p>\n</li>\n</ul>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>\n<p>不同的知识源代理对于共享数据结构要达成一致,而且这也造成对黑板数据结构的修改较为苦难(要考虑到给个代理的调用)</p>\n</li>\n<li>\n<p>需要一定的同步/加锁机制保证数据结构的完整性和一致性,增大了系统复杂度</p>\n<p><img src=\"/Review/SoftwareArchitecture/1556285901469.png\" alt=\"\" class=\"article-img\"><br>\n<img src=\"SoftwareArchitecture/1556285901469.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>其他</p>\n</blockquote>\n<ol start=\"10\">\n<li><strong>C2风格</strong></li>\n</ol>\n<ul>\n<li>\n<p>特点</p>\n<ul>\n<li>\n<p>系统组织规则</p>\n<ul>\n<li>系统中的组件和连接件都有一个顶部和一个底部</li>\n<li>组件的顶部应连接到某连接件的底部,组件的底部应连接到某连接件的顶部,不允许组件之间的直接连接\n<ul>\n<li>一个连接件可以和任意数目的其他组件和连接件连接<br>\n- 当两个连接件进行直接连接时,必须由其中一个的底部到另一个的底部<br>\n<img src=\"/Review/SoftwareArchitecture/1556286112213.png\" alt=\"\"><br>\n<img src=\"SoftwareArchitecture/1556286112213.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>C2的内部,通信和处理时分开完成的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>优点<br>\n- 可使用任何编程语言开发组件,组件重用和替换易实现<br>\n- 由于组件之间相对独立,依赖较小,因而该风格具有一定扩展能力,可支持不同粒度的组件<br>\n- 组件不需共享地址空间<br>\n- 可实现多个用户和多个系统之间的交互<br>\n- 课使用多个工具集和多种媒体类型,动态更新系统框架结构(适合交互系统)</p>\n</li>\n<li>\n<p>缺点</p>\n</li>\n<li>\n<p>不太适合大规模流式系统,以及对数据库使用比较频繁的应用</p>\n</li>\n</ul>\n<ol start=\"11\">\n<li><strong>客户机/服务器风格</strong>（两层C/S架构）</li>\n</ol>\n<ul>\n<li>\n<p>特点</p>\n<ul>\n<li>协作关系<br>\n- 客户机<br>\n- 服务器<br>\n- 客户机和服务器程序配置在分布式环境中时:通过远程调用(RPC)协议进行通信</li>\n<li>优点\n<ul>\n<li>客户机组件和服务器组件分别运行在不同的计算机上,有利于分布式数据的组织和处理</li>\n<li>组件之间的位置是相互透明的</li>\n<li>客户机程序和服务器程序可运行在不同的操作系统上,便于实现异构环境和多种不同开发技术的融合</li>\n<li>软件环境和硬件环境的配置具有极大的灵活性,易于系统功能的扩展</li>\n<li>将大规模的业务逻辑分布到多个通过网络连接的低成本的计算机上,降低了系统的整体开销</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>开发成本高(客户机软硬件要求搞)</li>\n<li>客户机程序的设计复杂度大,客户机负载重</li>\n<li>信息内容和形式单一</li>\n<li>C/S架构升级需要开发人员到现场更新客户机程序,对运行环境进行重新配置,增加了维护费用</li>\n<li>两层C/S结构采用了单一的服务器,同时以局域网为中心,难以扩展到inrtante和Internet</li>\n<li>数据安全性不高</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"12\">\n<li>\n<p><strong>浏览器/服务器风格</strong>（三层C/S架构）</p>\n<ul>\n<li>特点\n<ul>\n<li>相对两层C/S架构的优点\n<ul>\n<li>合理地划分三层结构的功能，可以使系统的逻辑结构更加清晰，提高软件的可维护性和可扩充性</li>\n<li>在实现三层C/S架构时，可以更有效地选择运行平台和硬件环境，从而使每一层都具有清晰的逻辑结构，良好的符合处理能力和叫号的开放性</li>\n<li><strong>在C/S结构中，可以分别选择合适的变成语言并行开发</strong></li>\n<li>系统具有较高的安全性</li>\n</ul>\n</li>\n<li>在使用三层C/S架构时需要注意以下问题\n<ul>\n<li>如果各层之间通信效率不高，及时每一层的硬件配置都很高，系统的整体性能也不会太高</li>\n<li>必须慎重考虑三层之间的通信方法，通信频率和数据传输量，这和提高各层的独立性一样也是实现三层C/S架构的关键性问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>浏览器/服务器风格是三层C/S风格的一种实现方式\n<ul>\n<li>与三层C/S结构的解决方案相比，B/S架构在客户机采用了WWW浏览器，把web服务作为应用服务器</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>客户端只需要安装浏览器，操作简单，能够发布动态信息和静态信息</li>\n<li>运用HTTP标准协议和统一客户端软件，能够实现跨平台通信</li>\n<li>开发成本比较低，只需要维护web服务器和中心数据库，客户端升级可以通过升级浏览器是实现</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>个性化程度低,所有客户端程序的功能都是一样的</li>\n<li>客户端数据处理能力较差,加重了web服务器的工作负担,影响系统的整体性能</li>\n<li>在B/S架构中,数据提交一般以页面为单位,动态交互性不强,不利于在线事务处理(OLTP)</li>\n<li>B/S架构可扩展性比较差,系统安全性难以保障</li>\n<li>B/S架构的应用系统查询中心数据库,其速度要远低于C/S架构</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>平台/插件风格</strong></p>\n<ul>\n<li>特点\n<ul>\n<li>平台\n<ul>\n<li>程序的主题或主框架\n<ul>\n<li>内核功能</li>\n<li>插件处理功能</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>接口\n<ul>\n<li>平台扩展接口</li>\n<li>插件接口</li>\n</ul>\n</li>\n<li>插件\n<ul>\n<li>对软件功能的扩展或补充模块</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>降低系统各模块之间的互依赖性</li>\n<li>系统模块独立开发,部署,维护</li>\n<li>根据需求动态的组装,分离系统</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>只服务与该主程序,可重用性差</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>面向Agent风格</strong></p>\n<ul>\n<li>特点\n<ul>\n<li>Agent\n<ul>\n<li>一个能感知环境并主动决策和行为的软件实体</li>\n</ul>\n</li>\n<li>Agent组件\n<ul>\n<li>对系统处理的高度抽象,具有高度灵活和高度智能特色的软件实体</li>\n<li>自主性,智能性,交互性</li>\n</ul>\n</li>\n<li>Agent连接件\n<ul>\n<li>对复合型组件的连接,提供通信,协调,转换,接通等服务</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>面向Agent的软件工程方法对于解决复杂问题是一种好技术,特别是对于分布开放异构的软件环境</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>大多数结构中Agent自身缺乏社会性结构描述和与环境的交互</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>面向方面软件架构风格</strong></p>\n<ul>\n<li>特点\n<ul>\n<li>一般认为AOP在传统软件架构基础上增加了方面组件(Aspect Component)这一个新的构成单元,通过 方面组件来封装系统的横切关注点(需求特性或关注点)</li>\n</ul>\n</li>\n<li>优缺点\n<ul>\n<li>可以定义交叉的关系,并将这些关系应用于跨模块的,彼此不同的对象模型</li>\n<li>AOP同时还可以让我们层次化功能性而不是嵌入功能性,从而使得代码有更好的可读性和易于维护</li>\n<li>他会和面向对象编程很好地合作,互补</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>面向服务架构风格</strong></p>\n<ul>\n<li>\n<p>特点</p>\n<ul>\n<li>\n<p>面像服务架构模型（SOA）</p>\n</li>\n<li>\n<p>服务</p>\n<ul>\n<li>一个粗粒度的，可发现的软件实体</li>\n</ul>\n</li>\n<li>\n<p>接口</p>\n</li>\n<li>\n<p><img src=\"/Review/SoftwareArchitecture/1556331836632.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"SoftwareArchitecture/1556331836632.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>发布</li>\n<li>发现</li>\n<li>绑定和调用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>优点</p>\n<ul>\n<li>灵活性，根据需求变化，重新编排服务</li>\n<li>对IT资产的复用</li>\n<li>使企业的信息建设真正以业务为核心。业务人员根据需求编排服务，而不必考虑技术细节</li>\n</ul>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>服务的划分很困难</li>\n<li>服务的编排问题</li>\n<li>接口标准可能会带来系统的额外开销和不稳定性</li>\n<li>对硬件IT资产谈不上复用</li>\n<li>目前主流实现方式很多，松散脆弱</li>\n<li>目前主流实现方式局限于不带界面的服务的共享</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>正交架构风格</strong></p>\n<ul>\n<li>\n<p>特点</p>\n<ul>\n<li>\n<p>由完成不同功能的n个线索（子系统）组成</p>\n</li>\n<li>\n<p>系统具有m个不同抽象级别的层</p>\n</li>\n<li>\n<p>线索之间是相互独立的</p>\n</li>\n<li>\n<p>系统有一个公共驱动层（一般为最高层）和公共数据结构（一般为最底层）</p>\n<ul>\n<li>组织层（Layer）\n<ul>\n<li>由一组具有相同抽象级别的组件构成</li>\n</ul>\n</li>\n<li>线索（Thread）<small>子系统的特例</small>的组件（Component）</li>\n<li>线索是相互独立的，即线索中的组件之间没有相互调用</li>\n</ul>\n<p><img src=\"/Review/SoftwareArchitecture/1556332223947.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"SoftwareArchitecture/1556332223947.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>优点</p>\n<ul>\n<li>结构清晰，易于理解。由于线索功能相互独立，组件的位置可以清楚地说明它所实现的抽象层次和负担的功能</li>\n<li>易修改，可维护性强。由于线索之间是相互独立的，所以对一个线索的修改不会影响到其他线索</li>\n<li>可移植性强，重用粒度大。因为正交结构可以为一个领域内的所有应用程序所共享，这些软件有着相同或类似的层次和线索，可以实现架构级的重用</li>\n</ul>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>在实际应用中，并不是所有软件系统都能完全正交化，或者有时完全正交化的成本太高。因此，在进行应用项目的软件架构设计时，必须反复权衡进一步正交化的额外开销与所得到的更好的性能之间的关系</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>异构风格</strong></p>\n<ul>\n<li>特点\n<ul>\n<li>在设计软件系统时，从不同角度来观察和思考问题，会对架构风格的选择产生影响</li>\n<li>每一种架构风格都有不同的特点，适用于不同的应用问题，因此，架构风格的选择是多样化的和复杂的</li>\n<li>实际应用中，各种软件架构并不是独立存在的，在一个系统中，往往会有多种架构共存和相互融合，形成更复杂的框架结构，即异构架构</li>\n<li>组合方式\n<ul>\n<li>层次结构</li>\n<li>单一组件使用符合的连接件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>可以实现遗留代码的重用</li>\n<li>在某些单位中，规定了共享软件包和某些标准，但仍会存在解释和表示习惯上的不同。选择异构架构风格，可以解决这一问题</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>不同风格之间的兼容问题有时很难解决</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>基于层次消息总线的架构风格</strong>（JB/HMB风格）</p>\n<ul>\n<li>特点\n<ul>\n<li>以青鸟软件生产线的实践为背景，提出了基于层次消息总线的软件架构(Jade bird hierarchical message bus based style)</li>\n<li>JB/HMB风格基于层次消息总线、支持组件的分布和并发，组件之间通过消息总线进行通讯</li>\n<li>消息总线是系统的连接件，负责消息的分派、传递和过滤以及处理结果的返回。各个组件挂接在消息总线上，向总线登记感兴趣的消息类型</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>较好地支持架构设计</li>\n<li>构件之间的耦合性较低</li>\n<li>构建使用灵活</li>\n<li>构建重用性较高</li>\n<li>动态性（支持系统演化）</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>总线可重用性差</li>\n<li>重用要求高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>模型-视图-控制器风格</strong></p>\n<ul>\n<li>特点\n<ul>\n<li>模型</li>\n<li>视图</li>\n<li>控制器</li>\n</ul>\n</li>\n<li>优点\n<ul>\n<li>多个视图与一个模型相对应。变化一一传播机制确保了所有相关视图都能够及<br>\n时地获取模型变化信息，从而使所有视图和控制器同步，便于维护</li>\n<li>具有良好的移植性。由于模型独立于视图，因此可以方便的实现不同部分的移植</li>\n<li>系统被分割为三个独立的部分，当功能发生变化时，改变其中的一个部分就能满足要求</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>增加了系统设计和运行复杂性</li>\n<li>视图与控制器连接过于紧密，妨碍了二者的独立重用</li>\n<li>视图访问模型的效率比较低。由于模型具有不同的操作接口，因此视图需要多次访问模型才能获得足够的数据</li>\n<li>频繁访问未变化的数据，也将降低系统的性能</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"chapter-5-架构描述语言\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareArchitecture#chapter-5-架构描述语言\"></a> Chapter 5 架构描述语言<a href=\"Review/SoftwareArchitecture#chapter-5-架构描述语言\"></a></h1>\n<ul>\n<li>什么是软件架构描述语言\n<ul>\n<li>ADL（Architecture description language）用于任何软件架构的表示形式</li>\n</ul>\n</li>\n<li><strong>为何有多种软件架构描述语言</strong>\n<ul>\n<li>//TODO</li>\n</ul>\n</li>\n<li>ADL的核心设计元素\n<ul>\n<li>组件(Component)\n<ul>\n<li>表示系统中主要的计算元素和数据存储，如客户端、服务器、数据库等</li>\n</ul>\n</li>\n<li>连接件(Connector)\n<ul>\n<li>定义了组件之间的交互关系，如过程调用、消息传递、事件广播等</li>\n</ul>\n</li>\n<li>软件架构配置（ArchitectureConfiguration）\n<ul>\n<li>描述组件、连接件之间的拓扑关系</li>\n</ul>\n</li>\n<li>约束条件（constraint)\n<ul>\n<li>定义组件之间依赖、组件与连接件之间依赖的约束</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-6-软件架构与敏捷开发\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareArchitecture#chapter-6-软件架构与敏捷开发\"></a> Chapter 6 软件架构与敏捷开发<a href=\"Review/SoftwareArchitecture#chapter-6-软件架构与敏捷开发\"></a></h1>\n<ul>\n<li>\n<p>敏捷开发的基本理念</p>\n<ul>\n<li>强调个体和互动比强调过程和工具更好</li>\n<li>强调获得可运行的软件比强调完成详尽的文档好</li>\n<li>强调与客户合作比强调进行详细的合同谈好</li>\n<li>强调响应变化比强调遵循既定的计划好</li>\n</ul>\n<hr>\n<ul>\n<li>尽早并持续地交付有价值的软件以满足顾客需求</li>\n<li>敏捷流程欢迎需求的变化，并利用这种变化来提高用户的竞争优势</li>\n<li>经常交付可用的软件，发布间隔可以从几周到几个月，能短则短</li>\n<li>业务人员和开发人员在项目开发过程中应该每天共同工作</li>\n<li>选择有进取心的人作为项目核心人员，充分支持并信任他们</li>\n<li>无论团队内外，面对面交流始终是最有效的沟通方式</li>\n<li>可用的软件是衡量项目进展的主要指标</li>\n<li>敏捷流程应能保持可持续发展。责任人，开发者和用户应该能够保持一个长期的，恒定的开发速度</li>\n<li>不断关注技术和设计能增强敏捷能力</li>\n<li>保持简明（尽可能简化工作量的技巧）</li>\n<li>最高的构架，需求和设计出自于自组织的团队</li>\n<li>时时总结如何提高团队效率，并付诸行动</li>\n</ul>\n</li>\n<li>\n<p>敏捷开发与架构的设计的关系</p>\n<ul>\n<li>软件架构与敏捷开发的出发点是一致的\n<ul>\n<li>目的：提高软件开发效率，提高软件质量，降低软件成本，将开发团队的价值最大化（权衡的过程）</li>\n</ul>\n</li>\n<li>敏捷开发也要重视软件架构</li>\n<li>敏捷开发改变了软件架构的设计方式</li>\n</ul>\n</li>\n<li>\n<p>敏捷开发中如何改变了软件架构的设计方式</p>\n<ul>\n<li>\n<p>敏捷开发非常重视软件的架构设计，但是轻架构的详细设计</p>\n</li>\n<li>\n<p>敏捷思想中进传统的架构设计分成</p>\n<ul>\n<li>\n<p>种子架构设计</p>\n<ul>\n<li>软件的架构层次</li>\n<li>重要模块</li>\n<li>重要的说明类</li>\n</ul>\n</li>\n<li>\n<p>详细架构设计</p>\n<p><img src=\"/Review/SoftwareArchitecture/1556333827911.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"SoftwareArchitecture/1556333827911.png\" alt=\"\" class=\"article-img\"></p>\n<ul>\n<li>敏捷开发把传统软件开发前期的详细架构设计分散到了整个敏捷开发软件过程中，以达到提高效率，减少风险的目的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>两类常见敏捷架构设计方法</p>\n<ul>\n<li>\n<p>规划式设计和演进式设计，具体体现为初始化阶段设计和迭代过程中的设计</p>\n</li>\n<li>\n<p>团队设计</p>\n<ul>\n<li>\n<p>群体决策</p>\n</li>\n<li>\n<p>优点</p>\n<ul>\n<li>团队设计的理论依据是群体决策。其结论要比个人决策更加完整，避免个人遗漏，相对稳定、周密</li>\n</ul>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>需要额外付出沟通成本、决策效率低、责任不明<br>\n确等。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>简单设计</p>\n<ul>\n<li>敏捷的思想要求软件架构设计必须是简单设计\n<ul>\n<li>表达方式的简单化</li>\n<li>现实抽象的简单化。\n<ul>\n<li>敏捷开发中对详细架构描述文档等中间产物的弱化，只满足有效沟通即可</li>\n</ul>\n</li>\n<li>现实抽象的简单化\n<ul>\n<li>仅针对当前需求建模分析，不做“多余的&quot;工作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>简单设计可以降低开发成本、提升沟通效率、增强适应性和稳定性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-7-架构驱动的软件开发\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareArchitecture#chapter-7-架构驱动的软件开发\"></a> Chapter 7 架构驱动的软件开发<a href=\"Review/SoftwareArchitecture#chapter-7-架构驱动的软件开发\"></a></h1>\n<ul>\n<li>\n<p><strong>架构驱动的软件开发步骤</strong>和开发流程</p>\n<ul>\n<li>\n<p>步骤</p>\n<ul>\n<li>架构需求获取</li>\n<li>基本架构设计</li>\n<li>架构记录和文档化</li>\n<li>架构评估</li>\n<li>架构实现</li>\n<li>架构维护</li>\n</ul>\n</li>\n<li>\n<p>开发流程</p>\n<p><img src=\"/Review/SoftwareArchitecture/1556337628833.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"SoftwareArchitecture/1556337628833.png\" alt=\"\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>质量场景</strong>、质量模型</p>\n<ul>\n<li>抽象场景\n<ul>\n<li>根据软件的使用进行一定层面的分类（如：软件流水线方式、三层结构等），这些分类就会对相应软件提出一定的需求，此类需求即为架构需求的抽象场景</li>\n</ul>\n</li>\n<li>质量场景\n<ul>\n<li>架构需求要用质量场景进行描述\n<ul>\n<li>对于架构师和领域专家来说，需要做的是从抽象场景描述中获得<strong>特定的质量属性场景</strong></li>\n<li>通常来说，我们考虑的特定的质量场景是对性能、可移植性、可替换性、可重用性等质量属性产<br>\n生影响时的质量场景</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>质量模型\n<ul>\n<li>软件质量理想模型\n<ul>\n<li>质量场景进行描述，可以用来描述，评估和预测质量属性的模型</li>\n<li>可以清晰地描述质量模型中元素和元素之间的相互关系的模型</li>\n<li>实例化的软件质量理想模型和对质量场景的注解</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>架构的结构</p>\n<ul>\n<li>通过一定的结构对软件的架构进行描述，把这样的结构称为架构结构</li>\n<li>架构结构描述了架构的基本信息，也包括了类，方法，对象，文件，库等所有需要人做的设计和编码</li>\n<li>架构视图是由架构结构派生而出的，它可以是架构结构的子部分，也可以是多个架构结构信息的综合</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-8-软件架构建模方法\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareArchitecture#chapter-8-软件架构建模方法\"></a> Chapter 8 软件架构建模方法<a href=\"Review/SoftwareArchitecture#chapter-8-软件架构建模方法\"></a></h1>\n<ul>\n<li>\n<p><strong>成功的软件架构应具有的品质</strong></p>\n<ul>\n<li><strong>良好的模块化</strong></li>\n<li><strong>适应功能需求的变化，适应技术的变化</strong></li>\n<li><strong>对系统的动态运行有良好的规划</strong></li>\n<li><strong>对数据的良好规划</strong></li>\n<li><strong>明确，灵活的部署规划</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>将软件架构的概念和原则引入软件需求阶段有什么好处？不引入可能会引起什么问题？</strong></p>\n<ul>\n<li><strong>好处</strong>\n<ul>\n<li><strong>有助于保证需求规约 ，系统设计之间的可追踪新和一致性，有效保持软件质量</strong></li>\n<li><strong>有助于更有结构性和可重用的需求规约</strong></li>\n</ul>\n</li>\n<li><strong>用传统方法产生需求规约，不考虑软件架构概念和原则，，则在软件架构设计阶段建立需求规约与架构的映射将相对困难</strong></li>\n</ul>\n</li>\n<li>\n<p>软件架构和软件需求是如何协同演化的？</p>\n<ul>\n<li>软件需求和软件架构两者是相辅相成的关系，一方面软件需求影响软件架构设计，另一方面软件架构帮助需求分析的明确和细化</li>\n</ul>\n</li>\n<li>\n<p>需求与架构的相互影响可以看作一个螺旋的过程，也是一个双峰的过程<br>\n<img src=\"/Review/SoftwareArchitecture/1556341874365.png\" alt=\"\"><br>\n<img src=\"SoftwareArchitecture/1556341874365.png\" alt=\"\"><br>\n<img src=\"/Review/SoftwareArchitecture/1556341928826.png\" alt=\"\"><br>\n<img src=\"SoftwareArchitecture/1556341928826.png\" alt=\"\"></p>\n</li>\n<li>\n<p>将软件架构映射到详细设计经常遇到什么问题？如何解决？</p>\n<ul>\n<li>问题\n<ul>\n<li>缺失重要架构视图，片面强调功能需求</li>\n<li>不够深入，架构设计方案过于笼统，基本还停留在概念性架构的层面，没有提供明确的技术蓝图</li>\n<li>名不副实的分层架构，缺失层次之间的交互接口和交互机制，只进行职责划分</li>\n<li>在某些方面过度设计。</li>\n</ul>\n</li>\n<li>解决方案\n<ul>\n<li>对于缺失重要架构视图问题，可以针对遗漏的架构视图进行设计</li>\n<li>对于不够深入问题，需要将设计决策细化到和技术相关的层面</li>\n<li>对于名不副实的分层架构问题，需要步步深入，明确各层之间的交互接口和交互机制</li>\n<li>虽然我们必须考虑到系统的扩展性，可维护性等，但切忌过度设计</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>MDA<small>model driven architecture基于模型驱动软件架构</small>的基本思想，应用MDA的好处</strong></p>\n<ul>\n<li>计算无关模型(CIM.Comutation Independent Model)也称业务模型\n<ul>\n<li>描述系统的外部行为和运行环境</li>\n</ul>\n</li>\n<li>平台无关模型(PIM,Platform Independent Model)\n<ul>\n<li>具有高抽象层次、无关于任何实现技术的模型</li>\n</ul>\n</li>\n<li>平台特定模型(PSM,Platform secific Model)\n<ul>\n<li>为某种特定实现技量身定做，让你用这种技术中可用现构造来描述系统的模型。PIM会被变换一个或多个PSM</li>\n</ul>\n</li>\n<li>MDA开发步骤\n<ul>\n<li>用计算无关模型CIM捕获需求\n<ul>\n<li>创建平台无关模型PIM</li>\n<li>将PIM转化成为一个或多个平台特定模型PSM，并加入平台特定的规则和代码</li>\n<li>将PSM转化为代码等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>基本思想</strong>\n<ul>\n<li><strong>将软件系统分成模型和实现两部分</strong>\n<ul>\n<li><strong>模型是对系统的描述，实现是利用特定技术在特定平台或环境中对模型的解释。模型仅仅负责对系统的描述与实现技术无关。这是模型的实现技术无关性</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>好处</strong>\n<ul>\n<li><strong>将模型与实现分离后，能够很好的适应技术易变性。由于实现往往高度依赖特定技术和特定平台，当技术发生迁移时，只需针对这种技术作相应的实现，编写相应的运行平台或变换工具。所以，能够比较好的应对实现技术发展带来的挑战</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>架构设计原则</p>\n<ul>\n<li>一般原则\n<ul>\n<li>商业原则</li>\n<li>数据原则</li>\n<li>应用程序原则</li>\n<li>技术原则</li>\n</ul>\n</li>\n<li>关键设计原则\n<ul>\n<li>关注分离点</li>\n<li>单一职责原则</li>\n<li>最少知识原则</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-15-软件架构评估方法\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareArchitecture#chapter-15-软件架构评估方法\"></a> Chapter 15 软件架构评估方法<a href=\"Review/SoftwareArchitecture#chapter-15-软件架构评估方法\"></a></h1>\n<ul>\n<li>\n<p>软件架构评估的必要性</p>\n<ul>\n<li>软件体系结构的好坏关系到软件产品的好坏，软件产品的好坏关系到软件公司的发展</li>\n<li>通过评估能了解系统的体系结构和重要属性（质量属性），能够屏蔽风险，带来诸多收益</li>\n<li>到目前为止没有很好的自动化评估系统</li>\n</ul>\n</li>\n<li>\n<p>软件架构评估的方式分类</p>\n<ul>\n<li>基于调查问卷或检查表的评估方式</li>\n<li>基于场景的评估方式</li>\n<li>基于度量的评估方式</li>\n<li>质量属性、（质量）场景<small>基于场景的评估</small></li>\n</ul>\n</li>\n<li>\n<p>体系结构权衡分析方法（ATAM）的相关概念、评估过程（步骤）、优缺点</p>\n<ul>\n<li>基本概念\n<ul>\n<li>敏感点(Sensitivity point)\n<ul>\n<li>敏感点是一个或多个构件的特征</li>\n<li>敏感点可以使设计师搞清楚实现质量目标时应该注意什么</li>\n</ul>\n</li>\n<li>权衡点(Tradeoffpoint)\n<ul>\n<li>权衡点是影响多个质量属性的特征</li>\n<li>是多个质量属性的敏感点</li>\n<li>权衡点需要进行权衡</li>\n</ul>\n</li>\n<li>敏感点影响一个质量属性</li>\n<li>权衡点影响多个质量属性</li>\n<li>风险承担者，涉众，牵涉到的人</li>\n<li>场景\n<ul>\n<li>刺激</li>\n<li>环境</li>\n<li>响应</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>评估过程\n<ol>\n<li>陈述，包括通过它进行的信息交流\n<ol>\n<li>ATAM方法的陈述</li>\n<li>商业动机的陈述</li>\n<li>SA的陈述</li>\n</ol>\n</li>\n<li>调查与分析，包括对照体系结构方法评估关键质量属性需求\n<ol>\n<li>确定体系结构方法</li>\n<li>生成质量效用树</li>\n<li>分析体系结构方法</li>\n</ol>\n</li>\n<li>测试，包括对照所有相关人员的需求检验最新结果\n<ol>\n<li>集体讨论并确定场景优先级</li>\n<li>分析体系结构方法</li>\n</ol>\n</li>\n<li>形成报告，包括陈述ATAM的结果\n<ol>\n<li>结果的表述</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>软件体系结构分析方法（SAAM）的评估过程（步骤）、优缺点（敏感点、权衡点、效用树…）</p>\n<ul>\n<li>\n<p>评估过程</p>\n<p><img src=\"/Review/SoftwareArchitecture/1556344021563.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"SoftwareArchitecture/1556344021563.png\" alt=\"\" class=\"article-img\"></p>\n<ol>\n<li>场景的形成</li>\n<li>体系结构的表述</li>\n<li>场景分类和优先级的确定</li>\n<li>对场景的单个评估</li>\n<li>场景相互作用的评估</li>\n<li>形成总体评估</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"chapter-9软件架构的演化和维护\"><a class=\"markdownIt-Anchor\" href=\"Review/SoftwareArchitecture#chapter-9软件架构的演化和维护\"></a> Chapter 9软件架构的演化和维护<a href=\"Review/SoftwareArchitecture#chapter-9软件架构的演化和维护\"></a></h1>\n<ul>\n<li>\n<p>软件架构演化的目的</p>\n<ul>\n<li>维持软件架构自身的有用性</li>\n</ul>\n</li>\n<li>\n<p>软件架构演化的实施</p>\n</li>\n<li>\n<p><strong>软件架构演化方式的分类</strong></p>\n<ul>\n<li>\n<p><strong>静态演化：需求、过程</strong></p>\n<ul>\n<li>\n<p>需求</p>\n<ul>\n<li>设计时演化需求\n<ul>\n<li>在架构开发和实现过程中对原有架构进行调整，保证软件实现与架构的一致性以及软件开发过程的顺利进行</li>\n<li>运行前演化需求：软件发布之后由于运行环境的变化，需要对软件进行修改升级，在此期间软件的架构同样要进行演化</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>过程<br>\n<img src=\"/Review/SoftwareArchitecture/1556344248357.png\" alt=\"\"><br>\n<img src=\"SoftwareArchitecture/1556344248357.png\" alt=\"\"></p>\n<ol>\n<li>软件理解\n<ol>\n<li>查阅软件文档，分析软件架构，识别系统组成元素及其之间的相互关系，提取系统的抽象表<br>\n示形式</li>\n</ol>\n</li>\n<li>需求变更分析\n<ol>\n<li>静态演化往往是由于用户需求变化、系统运行出错和运行环境发生改变等原因所引起的,需要找出新的软件需求与原有的差异</li>\n</ol>\n</li>\n<li>演化计划\n<ol>\n<li>分析原系统，确定演化范围和成本，选择合适的演化计划</li>\n</ol>\n</li>\n<li>系统重构\n<ol>\n<li>根据演化计划对系统进行重构，使之适应当前的需求</li>\n</ol>\n</li>\n<li>系统测试\n<ol>\n<li>对演化后的系统进行测试，查找其中的错误和不足之处</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>动态演化：需求、类型、内容、技术</strong></p>\n<ul>\n<li><strong>需求</strong>\n<ul>\n<li><strong>软件内部执行所导致的体系结构改变</strong></li>\n<li><strong>是软件系统外部的请求对软件进行的重配置</strong></li>\n</ul>\n</li>\n<li><strong>类型</strong>\n<ol>\n<li><strong>交互动态性</strong></li>\n<li><strong>结构动态性</strong></li>\n<li><strong>架构动态性</strong></li>\n</ol>\n</li>\n<li><strong>内容</strong>\n<ul>\n<li><strong>属性改名</strong>\n<ul>\n<li><strong>在运行过程中，用户可能会对非功能指标进行重新定义，如服务响应时间等</strong></li>\n</ul>\n</li>\n<li><strong>行为变化</strong>\n<ul>\n<li><strong>在运行过程中，用户需求变化或系统自身服务质量的调节，都将引发软件行为的变化。如：为了提高安全级别而更换加密算法；将http协议改为https协议</strong></li>\n</ul>\n</li>\n<li><strong>拓扑结构改变</strong>\n<ul>\n<li><strong>如增、删组件，增、删连接件，改变组件与连接件之间的关联关系等</strong></li>\n</ul>\n</li>\n<li><strong>风格变化</strong>\n<ul>\n<li><strong>一般软件演化后其架构风格应当保持不变，如果非要改变软件的架构风格，也只能将架构风格变为其“衍生&quot;风格，如将两层c/s结构调整为三层c/s结构或c/s和B/s的混合结构</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>技术</strong>\n<ul>\n<li><strong>动态软件架构 (SDA, Dynamic Software Architecture)</strong></li>\n<li><strong>动态重配置 (DR, Dynamic Reconfiguration)</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>软件架构演化原则</p>\n<ul>\n<li>\n<p>成本控制原则</p>\n</li>\n<li>\n<p>进度可控原则</p>\n</li>\n<li>\n<p>风险可控原则</p>\n</li>\n<li>\n<p>主体维持原则</p>\n</li>\n<li>\n<p>系统总体结构优化原则</p>\n</li>\n<li>\n<p>平滑演化原则</p>\n</li>\n<li>\n<p>目标一致原则</p>\n</li>\n<li>\n<p>模块独立烟花原则/修改局部化原则</p>\n</li>\n<li>\n<p>影响可控原则</p>\n</li>\n<li>\n<p>复杂性可控原则</p>\n</li>\n<li>\n<p>有利于重构原则</p>\n</li>\n<li>\n<p>有利于重用原则</p>\n</li>\n<li>\n<p>设计原则遵从性原则</p>\n</li>\n<li>\n<p>适应新技术原则</p>\n</li>\n<li>\n<p>环境适应性原则</p>\n</li>\n<li>\n<p>标准依从性原则</p>\n</li>\n<li>\n<p>质量向好原则</p>\n</li>\n<li>\n<p>适应新需求原则</p>\n</li>\n</ul>\n</li>\n</ul>\n","prev":{"title":"计算机网络复习","link":"Review/ComputerNetwork"},"next":{"title":"systemCall添加自定义项目","link":"Others/systemCallAdd"},"plink":"ilucia.github.io/Review/SoftwareArchitecture/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 1 概述","id":"chapter-1-概述","index":"1"},{"title":"<a class=\"markdownIt-Anchor\"></a> chapher 2 软件架构概念","id":"chapher-2-软件架构概念","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> chapter 3 软件架构模型","id":"chapter-3-软件架构模型","index":"3"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 4 软件架构风格和模式","id":"chapter-4-软件架构风格和模式","index":"4"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 5 架构描述语言","id":"chapter-5-架构描述语言","index":"5"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 6 软件架构与敏捷开发","id":"chapter-6-软件架构与敏捷开发","index":"6"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 7 架构驱动的软件开发","id":"chapter-7-架构驱动的软件开发","index":"7"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 8 软件架构建模方法","id":"chapter-8-软件架构建模方法","index":"8"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 15 软件架构评估方法","id":"chapter-15-软件架构评估方法","index":"9"},{"title":"<a class=\"markdownIt-Anchor\"></a> Chapter 9软件架构的演化和维护","id":"chapter-9软件架构的演化和维护","index":"10"}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2019年4月23日","updated":"2022年4月27日"}}