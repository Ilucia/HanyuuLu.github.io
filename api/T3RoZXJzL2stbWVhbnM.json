{"title":"简单的k-means实践","date":"2019-07-15T00:00:00.000Z","link":"Others/k-means","tags":["k-means","python"],"updated":"2022-04-27T15:24:01.559Z","content":"<blockquote>\n<p>本文来自于笔者在肝数模过程中的亲身实践，如果仅仅是了解可以直接观看，如果想要复现可以戳<a href=\"https://github.com/HanyuuFurude/MCM-2019-College/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%AD%E7%BB%83/2019%E5%9F%B9%E8%AE%AD4/code\" target=\"_blank\" rel=\"noopener\">实践环境</a>获得开发环境（处于安全考虑，在2019年国赛打完之前此链接的仓库为private，请谅解）</p>\n</blockquote>\n<h1 id=\"场景概述\"><a class=\"markdownIt-Anchor\" href=\"Others/k-means#场景概述\"></a> 场景概述<a href=\"Others/k-means#场景概述\"></a></h1>\n<p>笔者需要对一个excel数据表中的记录（含有经纬度信息），表格字段如下</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>C</th>\n<th>D</th>\n<th>E</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>任务号码</td>\n<td>任务gps纬度</td>\n<td>任务gps经度</td>\n<td>任务标价</td>\n<td>任务执行情况</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>我们现在需要将字段B和C中的经纬度提取为坐标并将这些坐标分类，在这里我们使用k-means方法来大致观察坐标并分类（手动实现没用轮子.jpg）</p>\n<h1 id=\"实验环境\"><a class=\"markdownIt-Anchor\" href=\"Others/k-means#实验环境\"></a> 实验环境<a href=\"Others/k-means#实验环境\"></a></h1>\n<ul>\n<li>python 3(笔者使用python 3.6)</li>\n</ul>\n<h1 id=\"基本原理\"><a class=\"markdownIt-Anchor\" href=\"Others/k-means#基本原理\"></a> 基本原理<a href=\"Others/k-means#基本原理\"></a></h1>\n<h2 id=\"k-means\"><a class=\"markdownIt-Anchor\" href=\"Others/k-means#k-means\"></a> k-means<a href=\"Others/k-means#k-means\"></a></h2>\n<p>k-means的大致思路</p>\n<ul>\n<li>在数据集中随机挑选x个数据作为中心点（x为聚类数量）；</li>\n<li>每个数据挑选最近的中心点，围绕这个中心点的所有数据点成为一个聚类。（此处我们的距离使用欧氏距离）；</li>\n<li>完成！</li>\n</ul>\n<h2 id=\"一些不尽如人意的地方和问题\"><a class=\"markdownIt-Anchor\" href=\"Others/k-means#一些不尽如人意的地方和问题\"></a> 一些不尽如人意的地方和问题<a href=\"Others/k-means#一些不尽如人意的地方和问题\"></a></h2>\n<ul>\n<li>数据集本身位置，事先未必能较为准确的预估聚类的个数（甚至大致范围也难以确定）；</li>\n<li>由于挑选聚类是随机的，可能这些点选择的不尽人意。</li>\n<li>如何评估随机生成的聚类中心的质量？</li>\n</ul>\n<h1 id=\"成果预览\"><a class=\"markdownIt-Anchor\" href=\"Others/k-means#成果预览\"></a> 成果预览<a href=\"Others/k-means#成果预览\"></a></h1>\n<blockquote>\n<p>P.S. 此处展示了聚类为3的输出，地图是后期通过其他方式贴合上去的，至于贴合方法……有缘更新吧……</p>\n</blockquote>\n<p><img src=\"/Others/k-means/1563289902403.png\" alt=\"\" class=\"article-img\"></p>\n<p><img src=\"k-means/1563289902403.png\" alt=\"\" class=\"article-img\"></p>\n<h1 id=\"解决方案实现\"><a class=\"markdownIt-Anchor\" href=\"Others/k-means#解决方案实现\"></a> 解决方案&amp;实现<a href=\"Others/k-means#解决方案实现\"></a></h1>\n<h3 id=\"聚类逻辑代码\"><a class=\"markdownIt-Anchor\" href=\"Others/k-means#聚类逻辑代码\"></a> 聚类逻辑代码<a href=\"Others/k-means#聚类逻辑代码\"></a></h3>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> sqrt</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint, random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> dataReader <span class=\"keyword\">import</span> dataReader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classifier</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 初始化、读入数据库、标定数据范围</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 原始数据</span></span><br><span class=\"line\">        self.rawData = dataReader()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 下标下限</span></span><br><span class=\"line\">        self.LOWER_LIMIT = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 下标上限</span></span><br><span class=\"line\">        self.UPPER_LIMIT = len(self.rawData) - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 产生一组不重复的随机中心</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generateRandomCenter</span><span class=\"params\">(self, typeCount: int)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 随机中心（聚类）数</span></span><br><span class=\"line\">        self.typeCount = typeCount</span><br><span class=\"line\">        <span class=\"comment\"># 随机中心编号列表</span></span><br><span class=\"line\">        self.coreList = list()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> len(self.coreList) &lt; self.typeCount:</span><br><span class=\"line\">            key = randint(self.LOWER_LIMIT, self.UPPER_LIMIT)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> self.coreList:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            self.coreList.append(key)</span><br><span class=\"line\">        <span class=\"comment\"># print('[center]%s' % str(self.coreList))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 聚类计算</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 聚类列表</span></span><br><span class=\"line\">        self.classList = [list() <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(self.typeCount)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> self.rawData:</span><br><span class=\"line\">            key = float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\">            ptr = <span class=\"number\">-1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> self.coreList:</span><br><span class=\"line\">                distance = dis(i, self.rawData[j])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> key &gt; distance:</span><br><span class=\"line\">                    ptr = self.coreList.index(j)</span><br><span class=\"line\">                    key = distance</span><br><span class=\"line\">            self.classList[ptr].append(i)</span><br><span class=\"line\">        <span class=\"comment\"># print('[info] calc finished 😂')</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 绘制聚类图</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        plt.rcParams[<span class=\"string\">'font.sans-serif'</span>] = [<span class=\"string\">'SimHei'</span>]</span><br><span class=\"line\">        plt.rcParams[<span class=\"string\">'axes.unicode_minus'</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">        plt.figure(figsize=(<span class=\"number\">30</span>, <span class=\"number\">20</span>), dpi=<span class=\"number\">100</span>)</span><br><span class=\"line\">        plt.xlim(<span class=\"number\">112</span>, <span class=\"number\">115</span>)</span><br><span class=\"line\">        plt.ylim(<span class=\"number\">22</span>, <span class=\"number\">24</span>)</span><br><span class=\"line\">        plt.xlabel(<span class=\"string\">'经度/°E'</span>)</span><br><span class=\"line\">        plt.ylabel(<span class=\"string\">'纬度/°N'</span>)</span><br><span class=\"line\">        plt.title(</span><br><span class=\"line\">            <span class=\"string\">'%d centers with average distance %.4f'</span></span><br><span class=\"line\">            % (self.typeCount, self.totalAverage)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># print(str(self.coreList))</span></span><br><span class=\"line\">        handerList = list()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> self.classList:</span><br><span class=\"line\">            col = (random(), random(), random())</span><br><span class=\"line\">            handerList.append(</span><br><span class=\"line\">                plt.plot([x[<span class=\"number\">2</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> i], [x[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> i],</span><br><span class=\"line\">                     <span class=\"string\">'x'</span>, color=col)</span><br><span class=\"line\">            )</span><br><span class=\"line\">        <span class=\"comment\"># plt.text(112.74, 23.8, str(self.coreList), ha='left', fontsize=8)</span></span><br><span class=\"line\">        plt.legend(self.coreList)</span><br><span class=\"line\">        plt.draw()</span><br><span class=\"line\">        <span class=\"comment\"># plt.show()</span></span><br><span class=\"line\">        <span class=\"comment\"># plt.text(4, 1, t, ha='left', rotation=15, wrap=True)</span></span><br><span class=\"line\">        plt.savefig(<span class=\"string\">'resPic\\%s.jpg'</span> % str(self.typeCount))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算得分（平均距离）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 每个分组的平均距离</span></span><br><span class=\"line\">        self.averageList = list()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> range((len(self.coreList))):</span><br><span class=\"line\">                self.averageList.append(</span><br><span class=\"line\">                    sum([dis(x, self.rawData[self.coreList[key]])</span><br><span class=\"line\">                         <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> self.classList[key]]) /</span><br><span class=\"line\">                    len(self.classList[key])</span><br><span class=\"line\">                )</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">            Exception(<span class=\"string\">\"bad center!\"</span>)</span><br><span class=\"line\">        <span class=\"comment\"># print('[average]')</span></span><br><span class=\"line\">        self.totalAverage = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 加权平均</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> self.averageList:</span><br><span class=\"line\">            self.totalAverage +=  \\</span><br><span class=\"line\">                i*len(self.classList[self.averageList.index(i)])</span><br><span class=\"line\">            <span class=\"comment\"># print('\\t[group %d]\\t%f' % (self.averageList.index(i), i))</span></span><br><span class=\"line\">        self.totalAverage /= len(self.rawData)</span><br><span class=\"line\">        <span class=\"comment\"># print('\\t[total]\\t\\t%f' % self.totalAverage)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.totalAverage</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 单次运行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.generateRandomCenter(<span class=\"number\">10</span>)</span><br><span class=\"line\">        self.calc()</span><br><span class=\"line\">        self.score()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 给定聚类数多次随机取表现较好值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">des</span><span class=\"params\">(self, typeCount: int)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 最优结果、得分暂存变量</span></span><br><span class=\"line\">        score = float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\">        resList = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"comment\"># 连续conn次没有得到更优化的结果的次数</span></span><br><span class=\"line\">        conn = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 尝试次数计数器</span></span><br><span class=\"line\">        counter = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (conn &lt; <span class=\"number\">100</span>):</span><br><span class=\"line\">            counter += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\"># print('[attempt %d with %d times better]' % (counter, conn))</span></span><br><span class=\"line\">            self.generateRandomCenter(typeCount)</span><br><span class=\"line\">            self.calc()</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                tempScore = self.score()</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">                print(<span class=\"string\">\"[ERROR]\\tbad center occured skip.\"</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> tempScore &lt; score:</span><br><span class=\"line\">                resList = self.coreList</span><br><span class=\"line\">                score = tempScore</span><br><span class=\"line\">                conn = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                conn += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 还原最佳聚类现场以便后续画图</span></span><br><span class=\"line\">        self.coreList = resList</span><br><span class=\"line\">        self.calc()</span><br><span class=\"line\">        print(<span class=\"string\">'[info]\\tdes finish with best score %f'</span> % score)</span><br><span class=\"line\">        print(resList)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resList</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dis</span><span class=\"params\">(obj1: list, obj2: list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> isinstance(obj1, list), \\</span><br><span class=\"line\">        <span class=\"string\">'[ERROR] 第一个参数应当为list,输入的参数类型为$s'</span> % str(type(obj1))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> isinstance(obj2, list), \\</span><br><span class=\"line\">        <span class=\"string\">'[ERROR] 第二个参数应当为list,输入的参数类型为$s'</span> % str(type(obj2))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sqrt((obj1[<span class=\"number\">1</span>] - obj2[<span class=\"number\">1</span>]) ** <span class=\"number\">2</span> + (obj1[<span class=\"number\">2</span>] - obj2[<span class=\"number\">2</span>]) ** <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    exp = Classifier()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>, <span class=\"number\">20</span>):</span><br><span class=\"line\">        print(<span class=\"string\">'[center counter]\\t%d'</span> % i)</span><br><span class=\"line\">        exp.des(i)</span><br><span class=\"line\">        exp.draw()</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"数据处理和读入代码\"><a class=\"markdownIt-Anchor\" href=\"Others/k-means#数据处理和读入代码\"></a> 数据处理和读入代码<a href=\"Others/k-means#数据处理和读入代码\"></a></h3>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xlrd</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"comment\"># import datetime</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dataConverter</span><span class=\"params\">(src: list)</span>-&gt;list:</span></span><br><span class=\"line\">    res = list()</span><br><span class=\"line\">    res.append(src[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">4</span>):</span><br><span class=\"line\">        res.append(src[i])</span><br><span class=\"line\">    res.append(int(src[<span class=\"number\">4</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dataReader</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    fileName = <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        fileName = sys.argv[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        print(<span class=\"string\">'[fileName]%s'</span> % fileName)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">        print(<span class=\"string\">'no file name'</span>)</span><br><span class=\"line\">    data = list()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        workbook = xlrd.open_workbook(filename=fileName)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(workbook.nsheets):</span><br><span class=\"line\">            data.append(list())</span><br><span class=\"line\">            rangeRow = workbook.sheet_by_index(i).nrows</span><br><span class=\"line\">            sheet = workbook.sheet_by_index(i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(rangeRow):</span><br><span class=\"line\">                temp = sheet.row_values(x)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> temp[<span class=\"number\">0</span>] == <span class=\"string\">'任务号码'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                data[i].append(dataConverter(temp))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">'bad data file'</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'\\t[Exception]\\t%s'</span> % str(e))</span><br><span class=\"line\">        exit()</span><br><span class=\"line\">    <span class=\"comment\"># for i in data:</span></span><br><span class=\"line\">    <span class=\"comment\">#     for x in i:</span></span><br><span class=\"line\">    <span class=\"comment\">#         print(x)</span></span><br><span class=\"line\">    print(<span class=\"string\">'😀[info]\\tdata fetched successfully'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    data = dataReader()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> sheet <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> sheet:</span><br><span class=\"line\">            print(x)</span><br></pre></td></tr></table></div></figure>","prev":{"title":"提升Powershell使用体验","link":"windows/oh-my-posh"},"next":{"title":"Python中遍历List时删除元素","link":"python/delInList"},"plink":"ilucia.github.io/Others/k-means/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 场景概述","id":"场景概述","index":"1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 实验环境","id":"实验环境","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 基本原理","id":"基本原理","index":"3","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> k-means","id":"k-means","index":"3.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 一些不尽如人意的地方和问题","id":"一些不尽如人意的地方和问题","index":"3.2"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 成果预览","id":"成果预览","index":"4"},{"title":"<a class=\"markdownIt-Anchor\"></a> 解决方案&amp;实现","id":"解决方案实现","index":"5"}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2019年7月15日","updated":"2022年4月27日"}}