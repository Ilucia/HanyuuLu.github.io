{"title":"java1.8/集合_容器","date":"2022-04-27T15:24:01.727Z","link":"java1.8/集合_容器","updated":"2022-04-27T15:24:01.727Z","content":"<h1 id=\"容器\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#容器\"></a> 容器<a href=\"java1.8/集合_容器#容器\"></a></h1>\n<h2 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#作用\"></a> 作用<a href=\"java1.8/集合_容器#作用\"></a></h2>\n<ul>\n<li>可以动态增加长度</li>\n<li>存储的元素都是对象(引用地址)，所以集合可以存储不同的数据类型，但如果是需要比较元素来排序的集合，则需要类型一致</li>\n<li>提供了统一的增删改查方法，使用方便</li>\n<li>支持泛型，避免数据不一致和转换异常，还对常用的数据结构进行了封装</li>\n</ul>\n<h2 id=\"总框架\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#总框架\"></a> 总框架<a href=\"java1.8/集合_容器#总框架\"></a></h2>\n<ul>\n<li>由Collection、Map(映射关系)和Iterator(迭代器)组成</li>\n</ul>\n<h3 id=\"collection体系\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#collection体系\"></a> Collection体系<a href=\"java1.8/集合_容器#collection体系\"></a></h3>\n<ul>\n<li>Set(集)： 元素是无序的且不可重复</li>\n<li>List(列表)：元素是有序的且可重复</li>\n<li>Queue(队列)：封装了数据结构中的队列</li>\n</ul>\n<h3 id=\"map体系\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#map体系\"></a> Map体系<a href=\"java1.8/集合_容器#map体系\"></a></h3>\n<ul>\n<li>Map用于保存具有映射关系的数据，即key-value(键值对)。Map集合的key是唯一的，不可重复，而value可以重复。所以一个value可以对应多个key</li>\n<li>Map体系除了常用类之外，还有Properties（属性类）也属于Map体系</li>\n</ul>\n<h3 id=\"iterator迭代器\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#iterator迭代器\"></a> Iterator(迭代器)<a href=\"java1.8/集合_容器#iterator迭代器\"></a></h3>\n<h4 id=\"迭代器模式\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#迭代器模式\"></a> 迭代器模式<a href=\"java1.8/集合_容器#迭代器模式\"></a></h4>\n<ul>\n<li>把访问逻辑从不同类型的集合类中抽取出来，从而避免向外部暴露集合的内部结构</li>\n<li>在java中是一个对象，其目的是遍历并选中其中的每个元素，而使用者（客户端）无需知道里面的具体细节</li>\n<li>要足够“轻量”，即创建代价小</li>\n</ul>\n<h4 id=\"iterator\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#iterator\"></a> Iterator<a href=\"java1.8/集合_容器#iterator\"></a></h4>\n<ul>\n<li>Collection集合元素的通用获取方式：在取出元素之前先判断集合中有没有元素。如果有，就把这个元素取出来，继续再判断，如果还有就再取出来，一直把集合中的所有元素全部取出来，这种取出元素的方式专业术语称为迭代</li>\n<li>java.util.Iterator:在Java中Iterator为一个接口，它只提供了迭代的基本规则</li>\n<li>Collection中有一个抽象方法iterator方法，所有的Collection子类都实现了这个方法，该方法返回一个Iterator对象</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;<span class=\"comment\">//判断是否存在下一个对象元素</span></span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">next</span><span class=\"params\">()</span></span>;<span class=\"comment\">//获取下一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span></span>;<span class=\"comment\">//移除元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"异常\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#异常\"></a> 异常<a href=\"java1.8/集合_容器#异常\"></a></h5>\n<ul>\n<li>在迭代集合中元素的过程中，集合的长度发生改变（进行了add或者remove操作)，会出现修改并发异常ConcurrentModificationException\n<ul>\n<li>增强for的底层原理也是迭代器，所以也需要避免这种操作\n<ul>\n<li>获取迭代器由jvm完成，不需要我们获取迭代器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在进行集合元素取出的时候，如果集合中没有元素了，还继续使用next()方法的话，将发生NoSuchElementException</li>\n<li>解决上述异常的方法：使用ListIterator</li>\n</ul>\n<h4 id=\"iterable接口\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#iterable接口\"></a> Iterable接口<a href=\"java1.8/集合_容器#iterable接口\"></a></h4>\n<ul>\n<li>Iterable接口实现后的功能是‘返回’一个迭代器</li>\n<li>该接口的iterator()方法返回一个标准的Iterator实现，实现Iterable接口允许对象成为Foreach语句的目标，就可以通过foreach语句来遍历你的底层序列</li>\n</ul>\n<h5 id=\"for-each语法使用\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#for-each语法使用\"></a> for each语法使用<a href=\"java1.8/集合_容器#for-each语法使用\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strs = Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>); </span><br><span class=\"line\"><span class=\"keyword\">for</span> (String str: strs) &#123; out.println(str); &#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>代码减少，方便遍历</li>\n<li>没有索引，不能操作容器里的元素</li>\n</ul>\n<h4 id=\"foreach\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#foreach\"></a> forEach()<a href=\"java1.8/集合_容器#foreach\"></a></h4>\n<ul>\n<li>forEach方法接收lambda表达式</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strs = Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>); <span class=\"comment\">//使用Java 1.8的lambda表达式 </span></span><br><span class=\"line\">strs.forEach(out::println);</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"spliterator迭代器\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#spliterator迭代器\"></a> Spliterator迭代器<a href=\"java1.8/集合_容器#spliterator迭代器\"></a></h4>\n<ul>\n<li>1.8新增的迭代器</li>\n<li>属于并行迭代器，可以将迭代任务分割交由多个线程来进行\n<ul>\n<li>使用Spliterator的时候，将元素分割成多份，分别交于不于的线程去遍历，以提高效率</li>\n</ul>\n</li>\n<li>使用 Spliterator 每次可以处理某个元素集合中的一个元素\n<ul>\n<li>不是从 Spliterator 中获取元素，而是使用 tryAdvance() 或 forEachRemaining() 方法对元素应用操作</li>\n</ul>\n</li>\n<li>Spliterator 还可以用于估计其中保存的元素数量，而且还可以像细胞分裂一样变为一分为二</li>\n</ul>\n<h4 id=\"listiterator\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#listiterator\"></a> ListIterator<a href=\"java1.8/集合_容器#listiterator\"></a></h4>\n<ul>\n<li>是一个更强大的Iterator子类型，能用于各种List类访问</li>\n<li>可以双向移动，所以能指出迭代器当前位置的前一个和后一个索引</li>\n<li>可以用set方法替换它访问过的最后一个元素</li>\n<li>调用listIterator方法产生一个指向List开始处的ListIterator</li>\n<li>可以用过重载方法listIterator(n)来创建一个指定列表索引为n的元素的ListIterator</li>\n</ul>\n<h5 id=\"和iterator区别\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#和iterator区别\"></a> 和Iterator区别<a href=\"java1.8/集合_容器#和iterator区别\"></a></h5>\n<ul>\n<li>两者都有next()和hasNext()，可以实现向后遍历，但是ListIterator有previous()和hasPrevious()方法，即可以实现向前遍历</li>\n<li>ListIterator可以定位当前位置，nextIndex()和previous()可以实现</li>\n<li>ListIterator有add()方法，可以向list集合中添加数据</li>\n<li>都可以实现删除操作，但是ListIterator可以通过set方法实现对对象的修改，Iterator仅能遍历，不能修改</li>\n</ul>\n<h4 id=\"fail-fast\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#fail-fast\"></a> Fail-Fast<a href=\"java1.8/集合_容器#fail-fast\"></a></h4>\n<ul>\n<li>类中的iterator()方法和listIterator()方法返回的iterators迭代器是<strong>fail-fast</strong>的</li>\n<li>当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，产生fail-fast事件</li>\n</ul>\n<h2 id=\"接口工具类\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#接口工具类\"></a> 接口/工具类<a href=\"java1.8/集合_容器#接口工具类\"></a></h2>\n<h3 id=\"arrays\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#arrays\"></a> Arrays<a href=\"java1.8/集合_容器#arrays\"></a></h3>\n<ul>\n<li>数组的工具类,里面都是操作数组的工具</li>\n</ul>\n<h4 id=\"常用方法\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#常用方法\"></a> 常用方法<a href=\"java1.8/集合_容器#常用方法\"></a></h4>\n<p>1、数组的排序:Arrays.sort(a);//实现了对数组从小到大的排序//注：此类中只有升序排序，而无降序排序。</p>\n<p>2、数组元素的定位查找:Arrays.binarySearch(a,8);//二分查找法</p>\n<p>3、数组的打印:Arrays.toString(a);//String 前的a和括号中的a均表示数组名称</p>\n<p>4、 查看数组中是否有特定的值:Arrays.asList(a).contains(1)</p>\n<h3 id=\"collections\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#collections\"></a> Collections<a href=\"java1.8/集合_容器#collections\"></a></h3>\n<h4 id=\"排序操作\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#排序操作\"></a> 排序操作<a href=\"java1.8/集合_容器#排序操作\"></a></h4>\n<ul>\n<li>Collections提供以下方法对List进行排序操作</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(List list)</span><span class=\"comment\">//反转</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(List list)</span><span class=\"comment\">//随机排序</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(List list)</span><span class=\"comment\">//按自然排序的升序排序</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(List list, Comparator c)</span><span class=\"comment\">//定制排序，由Comparator控制排序逻辑</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(List list, <span class=\"keyword\">int</span> i , <span class=\"keyword\">int</span> j)</span><span class=\"comment\">//交换两个索引位置的元素</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(List list, <span class=\"keyword\">int</span> distance)</span><span class=\"comment\">//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面</span></span></span><br></pre></td></tr></table></div></figure>\n<h4 id=\"查找替换操作\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#查找替换操作\"></a> 查找/替换操作<a href=\"java1.8/集合_容器#查找替换操作\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(List list, Object key)</span>,<span class=\"comment\">//对List进行二分查找，返回索引，注意List必须是有序的</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(Collection coll)</span><span class=\"comment\">//根据元素的自然顺序，返回最大的元素。 类比int min(Collection coll)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(Collection coll, Comparator c)</span><span class=\"comment\">//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll, Comparator c)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fill</span><span class=\"params\">(List list, Object obj)</span><span class=\"comment\">//用元素obj填充list中所有元素</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">frequency</span><span class=\"params\">(Collection c, Object o)</span><span class=\"comment\">//统计元素出现次数</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOfSubList</span><span class=\"params\">(List list, List target)</span><span class=\"comment\">//统计targe在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source, list target).</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">replaceAll</span><span class=\"params\">(List list, Object oldVal, Object newVal)</span><span class=\"comment\">//用新元素替换旧元素</span></span></span><br></pre></td></tr></table></div></figure>\n<h4 id=\"同步控制\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#同步控制\"></a> 同步控制<a href=\"java1.8/集合_容器#同步控制\"></a></h4>\n<ul>\n<li>Collections中几乎对每个集合都定义了同步控制方法, 这些方法，来将集合包装成线程安全的集合</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SynchronizedList(List);</span><br><span class=\"line\">SynchronizedSet(Set;</span><br><span class=\"line\">SynchronizedMap(Map);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"collection\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#collection\"></a> Collection<a href=\"java1.8/集合_容器#collection\"></a></h2>\n<ul>\n<li>最基本的集合接口，一个Collection代表一组Object，即Collection的元素</li>\n<li>Java SDK不提供直接继承自Collection的类， Java SDK提供的类都是继承自Collection的“子接口”如List和Set</li>\n<li>所有实现Collection接口的类都必须提供两个标准的构造函数：无参数的构造函数用于创建一个空的Collection，有一个Collection参数的构造函数用于创建一个新的 Collection，这个新的Collection与传入的Collection有相同的元素。后一个构造函数允许用户复制一个Collection</li>\n</ul>\n<h3 id=\"遍历\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#遍历\"></a> 遍历<a href=\"java1.8/集合_容器#遍历\"></a></h3>\n<ul>\n<li>不论Collection的实际类型如何，它都支持一个iterator()的方法，该方法返回一个迭代子，使用该迭代子即可逐一访问Collection中每一个元素</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator it = collection.iterator(); <span class=\"comment\">// 获得一个迭代子</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(it.hasNext()) &#123;</span><br><span class=\"line\">    Object obj = it.next(); <span class=\"comment\">// 得到下一个元素</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"框架\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#框架\"></a> 框架<a href=\"java1.8/集合_容器#框架\"></a></h3>\n<p><img src=\"/Users/ng/Documents/java1.8/pictures/Collection%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png\" alt=\"Collection接口继承关系\" class=\"article-img\"></p>\n<ul>\n<li>Set(集)：元素是无序的且不可重复</li>\n<li>List(列表)：元素是有序的且可重复</li>\n<li>Queue(队列)：封装了数据结构中的队列</li>\n</ul>\n<h3 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#set\"></a> Set<a href=\"java1.8/集合_容器#set\"></a></h3>\n<ul>\n<li>Set利用Map实现，<strong>无序</strong>(存入和取出顺序有可能不一致)，<strong>允许重复元素</strong>（Map中的Key值唯一，可为null，最多有一个null元素）\n<ul>\n<li>元素无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的</li>\n<li>加入Set的元素必须定义equals()方法以确保对象的唯一性</li>\n</ul>\n</li>\n<li>具有与Collection完全一样的接口，因此没有任何额外的功能,只是行为不同</li>\n</ul>\n<h4 id=\"hashset\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#hashset\"></a> HashSet<a href=\"java1.8/集合_容器#hashset\"></a></h4>\n<ul>\n<li>基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的</li>\n<li>放入的对象必须重写equals和hashCode方法\n<ul>\n<li>当元素的 hashCode 值相同时，才继续判断元素的 equals 是否为 true</li>\n<li>如果 hashCode 值不同，那么不判断 equals，从而提高对象比较的速度</li>\n</ul>\n</li>\n<li>不是同步的</li>\n<li>存储取出都比较快</li>\n</ul>\n<h4 id=\"treeset\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#treeset\"></a> TreeSet<a href=\"java1.8/集合_容器#treeset\"></a></h4>\n<ul>\n<li>基于红黑树/TreeMap实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)</li>\n<li>不能写入空数据</li>\n<li>排序方式\n<ul>\n<li><strong>自然排序：让元素自身具备比较性，需要元素对象实现Comparable接口，覆盖compareTo方法</strong>\n<ul>\n<li>在默认的compareTo方法中，需要将的两个的类型的对象的转换同一个类型，因此需要将的保证的加入到TreeSet中的数据类型是同一个类型，但是如果自己覆盖compareTo方法时，没有要求两个对象强制转换成同一个对象，是可以成功的添加treeSet中</li>\n</ul>\n</li>\n<li><strong>定制排序：让集合自身具备比较性，需要定义一个实现了Comparator接口的比较器，并覆盖compare方法，并将该类对象作为实际参数传递给TreeSet集合的构造函数</strong></li>\n</ul>\n</li>\n<li>额外增加的方法</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first()<span class=\"comment\">//返回第一个元素</span></span><br><span class=\"line\">last()<span class=\"comment\">//返回最后一个元素</span></span><br><span class=\"line\">lower(Object o)<span class=\"comment\">//返回指定元素之前的元素</span></span><br><span class=\"line\">higher(Obect o)<span class=\"comment\">//返回指定元素之后的元素</span></span><br><span class=\"line\">subSet(fromElement, toElement)<span class=\"comment\">//返回子集合</span></span><br></pre></td></tr></table></div></figure>\n<h4 id=\"linkedhashset\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#linkedhashset\"></a> LinkedHashSet<a href=\"java1.8/集合_容器#linkedhashset\"></a></h4>\n<ul>\n<li>\n<p>底层数据结构为LinkedHashMap</p>\n</li>\n<li>\n<p>具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序</p>\n<ul>\n<li>LinkedHashSet在迭代访问Set中的全部元素时，性能比HashSet好，但是插入时性能稍微逊色于HashSet</li>\n</ul>\n</li>\n<li>\n<p>没有重写HashSet的方法</p>\n</li>\n</ul>\n<h3 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#list\"></a> List<a href=\"java1.8/集合_容器#list\"></a></h3>\n<ul>\n<li>有序(元素存入集合的顺序和取出的顺序一致)</li>\n<li>元素/特有方法都有索引</li>\n<li>元素可以重复</li>\n<li>除了Collection接口必备的iterator()方法外，List还提供一个listIterator()方法\n<ul>\n<li>返回一个 ListIterator接口</li>\n<li>和标准的Iterator接口相比，ListIterator多了一些add()之类的方法，允许添加，删除，设定元素，还能向前或向后遍历</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"arraylist\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#arraylist\"></a> ArrayList<a href=\"java1.8/集合_容器#arraylist\"></a></h4>\n<ul>\n<li>基于动态数组实现，支持随机访问\n<ul>\n<li>RandomAccess 接口标识着该类支持快速随机访问</li>\n</ul>\n</li>\n<li>数组默认大小为10</li>\n</ul>\n<h5 id=\"扩容\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#扩容\"></a> 扩容<a href=\"java1.8/集合_容器#扩容\"></a></h5>\n<ul>\n<li>添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容\n<ul>\n<li>新容量的大小为 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code>，也就是旧容量的 1.5 倍</li>\n</ul>\n</li>\n<li>扩容操作需要调用 <code>Arrays.copyOf()</code> 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#删除\"></a> 删除<a href=\"java1.8/集合_容器#删除\"></a></h5>\n<ul>\n<li>需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    rangeCheck(index);</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    E oldValue = elementData(index);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">    elementData[--size] = <span class=\"keyword\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"序列化\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#序列化\"></a> 序列化<a href=\"java1.8/集合_容器#序列化\"></a></h5>\n<ul>\n<li>ArrayList 基于数组实现，并且具有动态扩容特性，因此保存元素的数组不一定都会被使用，那么就没必要全部进行序列化</li>\n<li>保存元素的数组 elementData 使用 transient 修饰，该关键字声明数组默认不会被序列化</li>\n<li>ArrayList 实现了 writeObject() 和 readObject() 来控制只序列化数组中有元素填充那部分内容</li>\n<li>序列化时需要使用 ObjectOutputStream 的 writeObject() 将对象转换为字节流并输出。而 writeObject() 方法在传入的对象存在 writeObject() 的时候会去反射调用该对象的 writeObject() 来实现序列化。反序列化使用的是 ObjectInputStream 的 readObject() 方法，原理类似</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(<span class=\"keyword\">new</span> FileOutputStream(file));</span><br><span class=\"line\">oos.writeObject(list);</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"fail-fast机制\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#fail-fast机制\"></a> Fail-Fast机制<a href=\"java1.8/集合_容器#fail-fast机制\"></a></h5>\n<ul>\n<li>参数modCount用来记录 ArrayList 结构发生变化的次数\n<ul>\n<li>结构发生变化是指添加或者删除至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化</li>\n</ul>\n</li>\n<li>在进行序列化或者迭代等操作时，需要比较操作前后 modCount 是否改变，如果改变了需要抛出 ConcurrentModificationException</li>\n<li>在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险</li>\n</ul>\n<h4 id=\"vector\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#vector\"></a> Vector<a href=\"java1.8/集合_容器#vector\"></a></h4>\n<ul>\n<li>和 ArrayList 类似，但它是线程安全的\n<ul>\n<li>使用synchronized进行同步</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    ensureCapacityHelper(elementCount + <span class=\"number\">1</span>);</span><br><span class=\"line\">    elementData[elementCount++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= elementCount)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> elementData(index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"扩容-2\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#扩容-2\"></a> 扩容<a href=\"java1.8/集合_容器#扩容-2\"></a></h5>\n<ul>\n<li>Vector 的构造函数可以传入 capacityIncrement 参数，它的作用是在扩容时使容量 capacity 增长 capacityIncrement</li>\n<li>如果这个参数的值小于等于 0，扩容时每次都令 capacity 为原来的两倍\n<ul>\n<li>调用没有 capacityIncrement 的构造函数时，capacityIncrement 值被设置为 0，也就是说默认情况下 Vector 每次扩容时容量都会翻倍</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"替代方案\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#替代方案\"></a> 替代方案<a href=\"java1.8/集合_容器#替代方案\"></a></h5>\n<ul>\n<li>可以使用 <code>Collections.synchronizedList();</code> 得到一个线程安全的 ArrayList</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">List&lt;String&gt; synList = Collections.synchronizedList(list);</span><br></pre></td></tr></table></div></figure>\n<h5 id=\"copyonwritearraylist\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#copyonwritearraylist\"></a> CopyOnWriteArrayList<a href=\"java1.8/集合_容器#copyonwritearraylist\"></a></h5>\n<ul>\n<li>\n<p>在concurrent 并发包下</p>\n</li>\n<li>\n<p><strong>读写分离</strong></p>\n<ul>\n<li>写操作在一个复制的数组上进行，读操作还是在原始数组中进行，读写分离，互不影响</li>\n<li>写操作需要加锁，防止并发写入时导致写入数据丢失</li>\n<li>写操作结束之后需要把原始数组指向新的复制数组</li>\n</ul>\n</li>\n<li>\n<p>适用场景</p>\n<ul>\n<li>CopyOnWriteArrayList 在写操作的同时允许读操作，大大提高了读操作的性能，因此很适合读多写少的应用场景</li>\n</ul>\n</li>\n<li>\n<p>缺点</p>\n<ul>\n<li>内存占用：在写操作时需要复制一个新的数组，使得内存占用为原来的两倍左右</li>\n<li>数据不一致：读操作不能读取实时性的数据，因为部分写操作的数据还未同步到读数组中</li>\n</ul>\n</li>\n<li>\n<p>CopyOnWriteArrayList 不适合内存敏感以及对实时性要求很高的场景</p>\n</li>\n</ul>\n<h4 id=\"linkedlist\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#linkedlist\"></a> LinkedList<a href=\"java1.8/集合_容器#linkedlist\"></a></h4>\n<p><img src=\"/Users/ng/Documents/java1.8/pictures/LinkedList.png\" alt=\"LinkedList\" class=\"article-img\"></p>\n<ul>\n<li>基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列</li>\n<li>使用 Node 存储链表节点信息\n<ul>\n<li>每个链表存储了 first 和 last 指针</li>\n</ul>\n</li>\n<li>线程不安全\n<ul>\n<li>可以使用 <code>Collections.synchronizedList();</code> 得到一个线程安全的 LinkedList</li>\n</ul>\n</li>\n<li>可被用作堆栈（stack），队列（queue）或双向队列（deque）</li>\n<li>允许null元素</li>\n<li>使用foreach或迭代器来进行遍历操作</li>\n</ul>\n<h3 id=\"queue\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#queue\"></a> Queue<a href=\"java1.8/集合_容器#queue\"></a></h3>\n<ul>\n<li>Queue用于模拟队列这种数据结构，实现“FIFO”等数据结构</li>\n<li>通常，队列不允许随机访问队列中的元素</li>\n<li>Queue 接口并未定义阻塞队列的方法\n<ul>\n<li>BlockingQueue 接口定义了那些等待元素出现或等待队列中有可用空间的方法，这些方法扩展了此接口</li>\n</ul>\n</li>\n<li>Queue 实现通常不允许插入 null 元素，尽管某些实现（如 LinkedList）并不禁止插入 null\n<ul>\n<li>即使在允许 null 的实现中，也不应该将 null 插入到 Queue 中，因为 null 也用作 poll 方法的一个特殊返回值，表明队列不包含元素</li>\n</ul>\n</li>\n<li>相对于LinkedList，Queue添加了element、offer、peek、poll、remove方法</li>\n<li>offer：在允许的情况下，将一个元素插入到队尾，或者返回false\n<ul>\n<li>自动包装机制，会自动的把random.nextInt转化程Integer，把char转化成Character</li>\n</ul>\n</li>\n<li>peek，element：在不移除的情况下返回队头，peek在队列为空返回null，element抛异常NoSuchElementException</li>\n<li>poll,remove：移除并返回队头，poll当队列为空是返回null，remove抛出NoSuchElementException异常</li>\n</ul>\n<h4 id=\"deque\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#deque\"></a> Deque<a href=\"java1.8/集合_容器#deque\"></a></h4>\n<ul>\n<li>Deque是Queue的子接口,我们知道Queue是一种队列形式,而Deque则是双向队列,它支持从两个端点方向检索和插入元素,因此Deque既可以支持LIFO形式也可以支持LIFO形式</li>\n</ul>\n<h5 id=\"添加功能\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#添加功能\"></a> 添加功能<a href=\"java1.8/集合_容器#添加功能\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(E)</span> <span class=\"comment\">//向队列头部插入一个元素,失败时抛出异常</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addFirst</span><span class=\"params\">(E)</span> <span class=\"comment\">//向队列头部插入一个元素,失败时抛出异常</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(E)</span> <span class=\"comment\">//向队列尾部插入一个元素,失败时抛出异常</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">offerFirst</span><span class=\"params\">(E)</span> <span class=\"comment\">//向队列头部加入一个元素,失败时返回false</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">offerLast</span><span class=\"params\">(E)</span> <span class=\"comment\">//向队列尾部加入一个元素,失败时返回false</span></span></span><br></pre></td></tr></table></div></figure>\n<h5 id=\"获取功能\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#获取功能\"></a> 获取功能<a href=\"java1.8/集合_容器#获取功能\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">E <span class=\"title\">getFirst</span><span class=\"params\">()</span> <span class=\"comment\">//获取队列头部元素,队列为空时抛出异常</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">getLast</span><span class=\"params\">()</span> <span class=\"comment\">//获取队列尾部元素,队列为空时抛出异常</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">peekFirst</span><span class=\"params\">()</span> <span class=\"comment\">//获取队列头部元素,队列为空时返回null</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">peekLast</span><span class=\"params\">()</span> <span class=\"comment\">//获取队列尾部元素,队列为空时返回null</span></span></span><br></pre></td></tr></table></div></figure>\n<h5 id=\"删除功能\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#删除功能\"></a> 删除功能<a href=\"java1.8/集合_容器#删除功能\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeFirstOccurrence</span><span class=\"params\">(Object)</span> <span class=\"comment\">//删除第一次出现的指定元素,不存在时返回false</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeLastOccurrence</span><span class=\"params\">(Object)</span> <span class=\"comment\">//删除最后一次出现的指定元素,不存在时返回false</span></span></span><br></pre></td></tr></table></div></figure>\n<h5 id=\"弹出功能\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#弹出功能\"></a> 弹出功能<a href=\"java1.8/集合_容器#弹出功能\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">E <span class=\"title\">pop</span><span class=\"params\">()</span> <span class=\"comment\">//弹出队列头部元素,队列为空时抛出异常</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">removeFirst</span><span class=\"params\">()</span> <span class=\"comment\">//弹出队列头部元素,队列为空时抛出异常</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">removeLast</span><span class=\"params\">()</span> <span class=\"comment\">//弹出队列尾部元素,队列为空时抛出异常</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">pollFirst</span><span class=\"params\">()</span> <span class=\"comment\">//弹出队列头部元素,队列为空时返回null</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">pollLast</span><span class=\"params\">()</span> <span class=\"comment\">//弹出队列尾部元素,队列为空时返回null</span></span></span><br></pre></td></tr></table></div></figure>\n<h5 id=\"迭代器\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#迭代器\"></a> 迭代器<a href=\"java1.8/集合_容器#迭代器\"></a></h5>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Iterator&lt;E&gt; <span class=\"title\">descendingIterator</span><span class=\"params\">()</span> <span class=\"comment\">//返回队列反向迭代器</span></span></span><br></pre></td></tr></table></div></figure>\n<h5 id=\"arraydeque\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#arraydeque\"></a> ArrayDeque<a href=\"java1.8/集合_容器#arraydeque\"></a></h5>\n<ul>\n<li>从效率来看,ArrayDeque要比LinkedList在两端增删元素上更为高效,因为没有在节点创建删除上的开销</li>\n<li>总体ArrayDeque要比LinkedList更优越,在大队列的测试上有3倍与LinkedList的性能,最好的是给ArrayDeque一个较大的初始化大小,以避免底层数组扩容时数据拷贝的开销</li>\n</ul>\n<h5 id=\"linkedblockingdeque\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#linkedblockingdeque\"></a> LinkedBlockingDeque<a href=\"java1.8/集合_容器#linkedblockingdeque\"></a></h5>\n<ul>\n<li>LinkedBlockingDeque是Deque的并发实现,在队列为空的时候,它的takeFirst,takeLast会阻塞等待队列处于可用状态</li>\n</ul>\n<h2 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#map\"></a> Map<a href=\"java1.8/集合_容器#map\"></a></h2>\n<ul>\n<li>存储健值对，根据键得到值，因此不允许键重复，但允许值重复</li>\n<li>底层是一个哈希表（数组+单向链表）：查询快，增删快, 是一个无序集合</li>\n</ul>\n<h3 id=\"常用方法-2\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#常用方法-2\"></a> 常用方法<a href=\"java1.8/集合_容器#常用方法-2\"></a></h3>\n<ul>\n<li>get(key)\n<ul>\n<li>根据key值返回对应的value值，key值不存在则返回null</li>\n</ul>\n</li>\n<li>put(key , value)\n<ul>\n<li>往集合中添加元素（key和value）</li>\n<li>添加的时候，如果key不存在，返回值null</li>\n<li>如果Key已经存在的话，就会新值替换旧值，返回旧值</li>\n</ul>\n</li>\n<li>remove(key)\n<ul>\n<li>删除key值对应的键值对</li>\n<li>如果key不存在，删除失败，返回值为null</li>\n<li>如果key存在则删除成功，返回值为删除的value</li>\n</ul>\n</li>\n<li>可以通过containsKey()和containsValue()来判断集合是否包含某个键或某个值</li>\n</ul>\n<h3 id=\"hashmap\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#hashmap\"></a> HashMap<a href=\"java1.8/集合_容器#hashmap\"></a></h3>\n<ul>\n<li>非线程安全，高效，支持null\n<ul>\n<li>最多只允许一条记录的键为Null；允许多条记录的值为 Null</li>\n<li>可以用 Collections的synchronizedMap() 方法使HashMap具有同步的能力</li>\n</ul>\n</li>\n<li>HashMap里面存入的值在取出的时候是随机的，它根据键的HashCode来存储数据，根据键可以直接获取它的值，具有很快的访问速度。在Map中插入、删除和定位元素，HashMap 是最好的选择</li>\n<li>采用拉链法解决冲突</li>\n<li>jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。原本Map.Entry接口的实现类Entry改名为了Node。转化为红黑树时改用另一种实现TreeNode</li>\n</ul>\n<h4 id=\"拉链法工作原理\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#拉链法工作原理\"></a> 拉链法工作原理<a href=\"java1.8/集合_容器#拉链法工作原理\"></a></h4>\n<p><img src=\"/Users/ng/Documents/java1.8/pictures/HashMap%E6%8B%89%E9%93%BE%E6%B3%95.png\" alt=\"HashMap拉链法\" class=\"article-img\"></p>\n<ul>\n<li>链表的插入是以头插法方式进行的</li>\n</ul>\n<h4 id=\"put操作\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#put操作\"></a> put操作<a href=\"java1.8/集合_容器#put操作\"></a></h4>\n<ul>\n<li>允许插入键为 null 的键值对，但是因为无法调用 null 的 hashCode() 方法，也就无法确定该键值对的桶下标，只能通过强制指定一个桶下标来存放\n<ul>\n<li>HashMap 使用第 0 个桶存放键为 null 的键值对</li>\n</ul>\n</li>\n<li>头插法</li>\n</ul>\n<h4 id=\"确定桶下标\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#确定桶下标\"></a> 确定桶下标<a href=\"java1.8/集合_容器#确定桶下标\"></a></h4>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = indexFor(hash, table.length);</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>位运算的代价比求模运算小的多，因此在进行取模计算时用位运算的话能带来更高的性能</li>\n<li>确定桶下标的最后一步是将 key 的 hash 值对桶个数取模：hash%capacity，如果能保证 capacity 为 2 的 n 次方，那么就可以将这个操作转换为位运算</li>\n</ul>\n<h4 id=\"扩容-3\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#扩容-3\"></a> 扩容<a href=\"java1.8/集合_容器#扩容-3\"></a></h4>\n<ul>\n<li>\n<p>设 HashMap 的 table 长度为 M，需要存储的键值对数量为 N，如果哈希函数满足均匀性的要求，那么每条链表的长度大约为 N/M，因此查找的复杂度为 O(N/M)</p>\n</li>\n<li>\n<p>为了让查找的成本降低，应该使 N/M 尽可能小，因此需要保证 M 尽可能大，也就是说 table 要尽可能大。HashMap 采用动态扩容来根据当前的 N 值来调整 M 值，使得空间效率和时间效率都能得到保证</p>\n</li>\n<li>\n<p>和扩容相关的参数主要有：capacity、size、threshold 和 load_factor</p>\n</li>\n</ul>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>capacity</td>\n<td>table 的容量大小，默认为 16。需要注意的是 capacity 必须保证为 2 的 n 次方。</td>\n</tr>\n<tr>\n<td>size</td>\n<td>键值对数量。</td>\n</tr>\n<tr>\n<td>threshold</td>\n<td>size 的临界值，当 size 大于等于 threshold 就必须进行扩容操作。</td>\n</tr>\n<tr>\n<td>loadFactor</td>\n<td>装载因子，table 能够使用的比例，threshold = (int)(capacity* loadFactor)。</td>\n</tr>\n</tbody>\n</table></div></div>\n<ul>\n<li>当需要扩容时，令 capacity 为原来的两倍</li>\n<li>扩容使用 resize() 实现\n<ul>\n<li>扩容操作同样需要把 oldTable 的所有键值对重新插入 newTable 中，因此这一步是很费时的</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"扩容后重新计算桶下标\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#扩容后重新计算桶下标\"></a> 扩容后重新计算桶下标<a href=\"java1.8/集合_容器#扩容后重新计算桶下标\"></a></h5>\n<ul>\n<li>HashMap capacity 为 2 的 n 次方这一特点能够极大降低重新计算桶下标操作的复杂度</li>\n</ul>\n<p>假设原数组长度 capacity 为 16，扩容之后 new capacity 为 32：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">capacity     : 00010000</span><br><span class=\"line\">new capacity : 00100000</span><br></pre></td></tr></table></div></figure>\n<p>对于一个 Key，它的哈希值 hash 在第 5 位：</p>\n<ul>\n<li>为 0，那么 hash%00010000 = hash%00100000，桶位置和原来一致</li>\n<li>为 1，hash%00010000 = hash%00100000 + 16，桶位置是原位置 + 16</li>\n</ul>\n<h4 id=\"与hashtable的比较\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#与hashtable的比较\"></a> 与HashTable的比较<a href=\"java1.8/集合_容器#与hashtable的比较\"></a></h4>\n<ul>\n<li>Hashtable 使用 synchronized 来进行同步。</li>\n<li>HashMap 可以插入键为 null 的 Entry。</li>\n<li>HashMap 的迭代器是 fail-fast 迭代器。</li>\n<li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。</li>\n</ul>\n<h3 id=\"concurrenthashmap\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#concurrenthashmap\"></a> ConcurrentHashMap<a href=\"java1.8/集合_容器#concurrenthashmap\"></a></h3>\n<p><img src=\"/Users/ng/Documents/java1.8/pictures/HashMap%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png\" alt=\"HashMap存储结构\" class=\"article-img\"></p>\n<ul>\n<li>ConcurrentHashMap 和 HashMap 实现上类似，最主要的差别是 ConcurrentHashMap 采用了分段锁（Segment），每个分段锁维护着几个桶（HashEntry），多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 Segment 的个数）\n<ul>\n<li>Segment 继承自 ReentrantLock</li>\n<li>默认的并发级别为 16，也就是说默认创建 16 个 Segment</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"size操作\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#size操作\"></a> size操作<a href=\"java1.8/集合_容器#size操作\"></a></h4>\n<ul>\n<li>每个 Segment 维护了一个 count 变量来统计该 Segment 中的键值对个数</li>\n<li>在执行 size 操作时，需要遍历所有 Segment 然后把 count 累计起来</li>\n<li>ConcurrentHashMap 在执行 size 操作时先尝试不加锁，如果连续两次不加锁操作得到的结果一致，那么可以认为这个结果是正确的\n<ul>\n<li>尝试次数使用 RETRIES_BEFORE_LOCK 定义，该值为 2，retries 初始值为 -1，因此尝试次数为 3</li>\n<li>如果尝试的次数超过 3 次，就需要对每个 Segment 加锁</li>\n</ul>\n</li>\n<li>JDK1.8使用了CAS操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized\n<ul>\n<li>在链表过长时会转换为红黑树</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"linkedhashmap\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#linkedhashmap\"></a> LinkedHashMap<a href=\"java1.8/集合_容器#linkedhashmap\"></a></h3>\n<ul>\n<li>继承自 HashMap，因此具有和 HashMap 一样的快速查找特性</li>\n<li>内部维护了一个双向链表，用来维护插入顺序或者 LRU 顺序\n<ul>\n<li>head和tail</li>\n</ul>\n</li>\n<li>accessOrder 参数决定了顺序，默认为 false，此时维护的是插入顺序</li>\n<li>LinkedHashMap 最重要的是以下用于维护顺序的函数，它们会在 put、get 等方法中调用</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterNodeAccess</span><span class=\"params\">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterNodeInsertion</span><span class=\"params\">(<span class=\"keyword\">boolean</span> evict)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"afternodeaccess\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#afternodeaccess\"></a> afterNodeAccess()<a href=\"java1.8/集合_容器#afternodeaccess\"></a></h4>\n<ul>\n<li>当一个节点被访问时，如果 accessOrder 为 true，则会将该节点移到链表尾部</li>\n<li>也就是说指定为 LRU 顺序之后，在每次访问一个节点时，会将这个节点移到链表尾部，保证链表尾部是最近访问的节点，那么链表首部就是最近最久未使用的节点</li>\n</ul>\n<h4 id=\"afternodeinsertion\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#afternodeinsertion\"></a> afterNodeInsertion()<a href=\"java1.8/集合_容器#afternodeinsertion\"></a></h4>\n<ul>\n<li>在 put 等操作之后执行，当 removeEldestEntry() 方法返回 true 时会移除最晚的节点，也就是链表首部节点 first</li>\n<li>evict 只有在构建 Map 的时候才为 false，在这里为 true</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterNodeInsertion</span><span class=\"params\">(<span class=\"keyword\">boolean</span> evict)</span> </span>&#123; <span class=\"comment\">// possibly remove eldest</span></span><br><span class=\"line\">    LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (evict &amp;&amp; (first = head) != <span class=\"keyword\">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class=\"line\">        K key = first.key;</span><br><span class=\"line\">        removeNode(hash(key), key, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>removeEldestEntry() 默认为 false，如果需要让它为 true，需要继承 LinkedHashMap 并且覆盖这个方法的实现，这在实现 LRU 的缓存中特别有用，通过移除最近最久未使用的节点，从而保证缓存空间足够，并且缓存的数据都是热点数据</p>\n<h4 id=\"实现lru缓存\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#实现lru缓存\"></a> 实现LRU缓存<a href=\"java1.8/集合_容器#实现lru缓存\"></a></h4>\n<ul>\n<li>设定最大缓存空间 MAX_ENTRIES 为 3</li>\n<li>使用 LinkedHashMap 的构造函数将 accessOrder 设置为 true，开启 LRU 顺序</li>\n<li>覆盖 removeEldestEntry() 方法实现，在节点多于 MAX_ENTRIES 就会将最近最久未使用的数据移除</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRUCache</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">LinkedHashMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ENTRIES = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeEldestEntry</span><span class=\"params\">(Map.Entry eldest)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size() &gt; MAX_ENTRIES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    LRUCache() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(MAX_ENTRIES, <span class=\"number\">0.75f</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    LRUCache&lt;Integer, String&gt; cache = <span class=\"keyword\">new</span> LRUCache&lt;&gt;();</span><br><span class=\"line\">    cache.put(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    cache.put(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">    cache.put(<span class=\"number\">3</span>, <span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">    cache.get(<span class=\"number\">1</span>);</span><br><span class=\"line\">    cache.put(<span class=\"number\">4</span>, <span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">    System.out.println(cache.keySet());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果为 [3,1,4]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"weakhashmap\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#weakhashmap\"></a> WeakHashMap<a href=\"java1.8/集合_容器#weakhashmap\"></a></h3>\n<ul>\n<li>WeakHashMap 的 Entry 继承自 WeakReference，被 WeakReference 关联的对象在下一次垃圾回收时会被回收</li>\n<li>WeakHashMap 主要用来实现缓存，通过使用 WeakHashMap 来引用缓存对象，由 JVM 对这部分缓存进行回收</li>\n</ul>\n<h4 id=\"concurrentcache\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#concurrentcache\"></a> ConcurrentCache<a href=\"java1.8/集合_容器#concurrentcache\"></a></h4>\n<ul>\n<li>Tomcat 中的 ConcurrentCache 使用了 WeakHashMap 来实现缓存功能。</li>\n<li>ConcurrentCache 采取的是分代缓存</li>\n</ul>\n<h5 id=\"分代缓存\"><a class=\"markdownIt-Anchor\" href=\"java1.8/集合_容器#分代缓存\"></a> 分代缓存<a href=\"java1.8/集合_容器#分代缓存\"></a></h5>\n<ul>\n<li>经常使用的对象放入 eden 中，eden 使用 ConcurrentHashMap 实现，不用担心会被回收（伊甸园）；</li>\n<li>不常用的对象放入 longterm，longterm 使用 WeakHashMap 实现，这些老对象会被垃圾收集器回收。</li>\n<li>当调用 get() 方法时，会先从 eden 区获取，如果没有找到的话再到 longterm 获取，当从 longterm 获取到就把对象放入 eden 中，从而保证经常被访问的节点不容易被回收。</li>\n<li>当调用 put() 方法时，如果 eden 的大小超过了 size，那么就将 eden 中的所有对象都放入 longterm 中，利用虚拟机回收掉一部分不经常使用的对象。</li>\n</ul>\n","prev":{"title":"spring&mybatis/Spring基础","link":"spring&mybatis/Spring基础"},"next":{"title":"java1.8/函数式编程","link":"java1.8/函数式编程"},"plink":"ilucia.github.io/java1.8/集合_容器/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 容器","id":"容器","index":"1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 作用","id":"作用","index":"1.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 总框架","id":"总框架","index":"1.2","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> Collection体系","id":"collection体系","index":"1.2.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> Map体系","id":"map体系","index":"1.2.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> Iterator(迭代器)","id":"iterator迭代器","index":"1.2.3"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 接口/工具类","id":"接口工具类","index":"1.3","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> Arrays","id":"arrays","index":"1.3.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> Collections","id":"collections","index":"1.3.2"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> Collection","id":"collection","index":"1.4","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 遍历","id":"遍历","index":"1.4.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 框架","id":"框架","index":"1.4.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> Set","id":"set","index":"1.4.3"},{"title":"<a class=\"markdownIt-Anchor\"></a> List","id":"list","index":"1.4.4"},{"title":"<a class=\"markdownIt-Anchor\"></a> Queue","id":"queue","index":"1.4.5"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> Map","id":"map","index":"1.5","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 常用方法","id":"常用方法-2","index":"1.5.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> HashMap","id":"hashmap","index":"1.5.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> ConcurrentHashMap","id":"concurrenthashmap","index":"1.5.3"},{"title":"<a class=\"markdownIt-Anchor\"></a> LinkedHashMap","id":"linkedhashmap","index":"1.5.4"},{"title":"<a class=\"markdownIt-Anchor\"></a> WeakHashMap","id":"weakhashmap","index":"1.5.5"}]}]}],"copyright":{"author":"Ilucia Niu","license":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>","published":"2022年4月27日","updated":"2022年4月27日"}}